{
    "docs": [
        {
            "location": "/", 
            "text": "Branch Deep Linking\n\n\n\n\nURLs can navigate to your website, but not to your app. \n\n\nBranch deep links allow users to install, open, and navigate to content inside your app.\n\n\nBranch increases discovery of your app by sharing its content, converting web users to app users, enabling user-to-user sharing, personalizing user experiences, tracking users, tracking referrals, tracking campaigns, tracking conversions, and increasing overall engagement.\n\n\n\n\n\n  \n\n\n\n\n\nGetting started\n\n\n\n\n\n\nBasic setup\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntegrate your app\n\n\nCreate and share deep links\n\n\nTrack analytics\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConvert app users\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinks to app\n\n\nWebsite to app\n\n\nDesktop to app\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEmails to app\n\n\nAds to app\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare app content\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInvites\n\n\nReferrals\n\n\nContent Navigation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack app engagement\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLink\n\n\nUsers\n\n\nContent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCampaigns\n\n\nAttribution\n\n\nRevenue", 
            "title": "Getting started"
        }, 
        {
            "location": "/#branch-deep-linking", 
            "text": "URLs can navigate to your website, but not to your app.   Branch deep links allow users to install, open, and navigate to content inside your app.  Branch increases discovery of your app by sharing its content, converting web users to app users, enabling user-to-user sharing, personalizing user experiences, tracking users, tracking referrals, tracking campaigns, tracking conversions, and increasing overall engagement.", 
            "title": "Branch Deep Linking"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/#basic-setup", 
            "text": "Integrate your app  Create and share deep links  Track analytics", 
            "title": "Basic setup"
        }, 
        {
            "location": "/#convert-app-users", 
            "text": "Links to app  Website to app  Desktop to app         Emails to app  Ads to app", 
            "title": "Convert app users"
        }, 
        {
            "location": "/#share-app-content", 
            "text": "Invites  Referrals  Content Navigation", 
            "title": "Share app content"
        }, 
        {
            "location": "/#track-app-engagement", 
            "text": "Link  Users  Content         Campaigns  Attribution  Revenue", 
            "title": "Track app engagement"
        }, 
        {
            "location": "/pages/apps/ios/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure bundle identifier\n\n\n\n\n\n\nBundle Id matches \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure associated domains\n\n\n\n\n\n\nAdd \nBranch Dashboard\n values\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure entitlements\n\n\n\n\n\n\nConfirm entitlements are within target\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure info.pList\n\n\n\n\n\n\nAdd \nBranch Dashboard\n values\n\n\n\n\n\n\n\n\n\n\n\n\nConfirm app prefix\n\n\n\n\n\n\nFrom your \nApple Developer Account\n\n\n\n\n\n\n\n\n\n\n\n\nInstall Branch\n\n\n\n\n\n\nOption 1: \nCocoaPods\n\n\nplatform :ios, \n8.0\n\n\ntarget \nAPP_NAME\n \ndo\n\n  \n# if swift\n\n  use_frameworks!\n\n\n  pod \nBranch\n\n\nend\n\n\n\n\n\n\n\n\nOption 2: \nCarthage\n\n\ngithub \nBranchMetrics/ios-branch-deep-linking\n\n\n\n\n\n\n\n\n\nOption 3: Manually install the \nsource code\n with dependencies\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nSwift 3\n\n\nimport\n \nUIKit\n\n\nimport\n \nBranch\n\n\n\n\n@UIApplicationMain\n\n\nclass\n \nAppDelegate\n:\n \nUIResponder\n,\n \nUIApplicationDelegate\n \n{\n\n\n\nvar\n \nwindow\n:\n \nUIWindow\n?\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidFinishLaunchingWithOptions\n \nlaunchOptions\n:\n \n[\nUIApplicationLaunchOptionsKey\n:\n \nAny\n]?)\n \n-\n \nBool\n \n{\n\n\n  \n// for debug and development only\n\n\n  \nBranch\n.\ngetInstance\n().\nsetDebug\n()\n\n\n  \n// listener for Branch Deep Link data\n\n\n  \nBranch\n.\ngetInstance\n().\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n)\n \n{\n \n(\nparams\n,\n \nerror\n)\n \nin\n\n\n    \n// do stuff with deep link data (nav to page, display content, etc)\n\n\n    \nprint\n(\nparams\n \nas\n?\n \n[\nString\n:\n \nAnyObject\n]\n \n??\n \n{})\n\n\n  \n}\n\n\n  \nreturn\n \ntrue\n\n\n}\n\n\n\nfunc\n \napplication\n(\n_\n \napp\n:\n \nUIApplication\n,\n \nopen\n \nurl\n:\n \nURL\n,\n \noptions\n:\n \n[\nUIApplicationOpenURLOptionsKey\n \n:\n \nAny\n]\n \n=\n \n[:])\n \n-\n \nBool\n \n{\n\n\n  \n// handler for URI Schemes (depreciated in iOS 9.2+, but still used by some Google apps)\n\n\n  \nBranch\n.\ngetInstance\n().\napplication\n(\napp\n,\n \nopen\n:\n \nurl\n,\n \noptions\n:\n \noptions\n)\n\n\n  \nreturn\n \ntrue\n\n\n}\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ncontinue\n \nuserActivity\n:\n \nNSUserActivity\n,\n \nrestorationHandler\n:\n \n@\nescaping\n \n([\nAny\n]?)\n \n-\n \nVoid\n)\n \n-\n \nBool\n \n{\n\n\n  \n// handler for Universal Links\n\n\n  \nBranch\n.\ngetInstance\n().\ncontinue\n(\nuserActivity\n)\n\n\n  \nreturn\n \ntrue\n\n\n}\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidReceiveRemoteNotification\n \nuserInfo\n:\n \n[\nAnyHashable\n \n:\n \nAny\n],\n \nfetchCompletionHandler\n \ncompletionHandler\n:\n \n@\nescaping\n \n(\nUIBackgroundFetchResult\n)\n \n-\n \nVoid\n)\n \n{\n\n\n  \n// handler for Push Notifications\n\n\n  \nBranch\n.\ngetInstance\n().\nhandlePushNotification\n(\nuserInfo\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n#import \nAppDelegate.h\n\n\n#import \nBranch/Branch.h\n\n\n\n\n@interface\n \nAppDelegate\n \n()\n\n\n\n@end\n\n\n\n@implementation\n \nAppDelegate\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidFinishLaunchingWithOptions:\n(\nNSDictionary\n \n*\n)\nlaunchOptions\n \n{\n\n\n  \n// for debug and development only\n\n\n  \n[[\nBranch\n \ngetInstance\n]\n \nsetDebug\n];\n \n\n  \n// listener for Branch Deep Link data\n\n\n  \n[[\nBranch\n \ngetInstance\n]\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\n \n_Nonnull\n \nparams\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n\n    \n// do stuff with deep link data (nav to page, display content, etc)\n\n\n    \nNSLog\n(\n@\n%@\n,\n \nparams\n);\n\n\n  \n}];\n\n\n  \nreturn\n \nYES\n;\n\n\n}\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napp\n \nopenURL:\n(\nNSURL\n \n*\n)\nurl\n \noptions:\n(\nNSDictionary\nUIApplicationOpenURLOptionsKey\n,\nid\n \n*\n)\noptions\n \n{\n\n\n  \n// handler for URI Schemes (depreciated in iOS 9.2+, but still used by some Google apps)\n\n\n  \n[[\nBranch\n \ngetInstance\n]\n \napplication\n:\napp\n \nopenURL\n:\nurl\n \noptions\n:\noptions\n];\n\n\n  \nreturn\n \nYES\n;\n\n\n}\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ncontinueUserActivity:\n(\nNSUserActivity\n \n*\n)\nuserActivity\n \nrestorationHandler:\n(\nvoid\n \n(\n^\n)(\nNSArray\n \n*\n \n_Nullable\n))\nrestorationHandler\n \n{\n\n\n  \n// handler for Universal Links\n\n\n  \n[[\nBranch\n \ngetInstance\n]\n \ncontinueUserActivity\n:\nuserActivity\n];\n\n\n  \nreturn\n \nYES\n;\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidReceiveRemoteNotification:\n(\nNSDictionary\n \n*\n)\nuserInfo\n \n{\n\n\n  \n// handler for Push Notifications\n\n\n  \n[[\nBranch\n \ngetInstance\n]\n \nhandlePushNotification\n:\nuserInfo\n];\n\n\n}\n\n\n\n@end\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link\n\n\n\n\n\n\nCreate a deep link from the \nBranch Marketing Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app \n(\ncordova run ios\n \nphonegap run ios\n \nionic run ios\n)\n\n\n\n\n\n\nPaste deep link in \nApple Notes\n\n\n\n\n\n\nLong press on the deep link \n(not 3D Touch)\n\n\n\n\n\n\nClick \nOpen in \"APP_NAME\"\n to open your app \n(\nexample\n)\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share \n\n\n\n\n\n\nUses \nUniversal Object properties\n\n\n\n\n\n\nSwift 3\n\n\n// only canonical identifier is required\n\n\nlet\n \nbuo\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/12345\n)\n\n\nbuo\n.\ntitle\n \n=\n \nUUID\n.\ninit\n().\nuuidString\n\n\nbuo\n.\ncontentDescription\n \n=\n \nMy Content Description\n\n\nbuo\n.\nimageUrl\n \n=\n \nhttp://lorempixel.com/200/200/\n\n\nbuo\n.\ncanonicalUrl\n \n=\n \nhttp://s3z3.app.link/rawr_rawr\n\n\nbuo\n.\ncontentIndexMode\n \n=\n \n.\npublic\n\n\nbuo\n.\naddMetadataKey\n(\nproperty1\n,\n \nvalue\n:\n \nblue\n)\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// only canonical identifier is required\n\n\nBranchUniversalObject\n \n*\nbuo\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nitem/12345\n];\n\n\nbuo\n.\ntitle\n \n=\n \n@\nMy Content Title\n;\n\n\nbuo\n.\ncontentDescription\n \n=\n \n@\nMy Content Description\n;\n\n\nbuo\n.\nimageUrl\n \n=\n \n@\nhttps://example.com/mycontent-12345.png\n;\n\n\n[\nbuo\n \naddMetadataKey\n:\n@\nproperty1\n \nvalue\n:\n@\nblue\n];\n\n\n[\nbuo\n \naddMetadataKey\n:\n@\nproperty2\n \nvalue\n:\n@\nred\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nGenerates a deep link within your app\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\nlet\n \nlp\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlp\n.\nfeature\n \n=\n \nsharing\n\n\nlp\n.\nchannel\n \n=\n \nfacebook\n\n\nlp\n.\ncampaign\n \n=\n \nmeow meow\n\n\nlp\n.\naddControlParam\n(\n$desktop_url\n,\n \nwithValue\n:\n \nhttp://example.com/home\n)\n\n\nlp\n.\naddControlParam\n(\nrandom\n,\n \nwithValue\n:\n \nUUID\n.\ninit\n().\nuuidString\n)\n\n\n\nbuo\n.\ngetShortUrl\n(\nwith\n:\n \nlp\n)\n \n{\n \nurl\n,\n \nerror\n \nin\n\n  \nguard\n \nlet\n \nurl\n \n=\n \nurl\n \nelse\n \n{\n \nreturn\n \n}\n\n  \nprint\n(\nurl\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\nBranchLinkProperties\n \n*\nlp\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlp\n.\nfeature\n \n=\n \n@\nsharing\n;\n\n\nlp\n.\nchannel\n \n=\n \n@\nfacebook\n;\n\n\n[\nlp\n \naddControlParam\n:\n@\n$desktop_url\n \nwithValue\n:\n@\nhttp://example.com/home\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$ios_url\n \nwithValue\n:\n@\nhttp://example.com/ios\n];\n\n\n\n[\nbuo\n \ngetShortUrlWithLinkProperties\n:\nlp\n \nandCallback\n:\n^\n(\nNSString\n*\n \nurl\n,\n \nNSError\n*\n \nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nNSLog\n(\n@\n@\n,\n \nurl\n);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nShare a deep link between users and apps\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nSwift 3\n\n\n// optional values\n\n\nlet\n \nlp\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlp\n.\nfeature\n \n=\n \nsharing\n\n\nlp\n.\nchannel\n \n=\n \nfacebook\n\n\nlp\n.\ncampaign\n \n=\n \nmeow meow\n\n\nlp\n.\naddControlParam\n(\n$desktop_url\n,\n \nwithValue\n:\n \nhttp://example.com/home\n)\n\n\nlp\n.\naddControlParam\n(\nrandom\n,\n \nwithValue\n:\n \nUUID\n.\ninit\n().\nuuidString\n)\n\n\n\n// share link\n\n\nbuo\n.\nshowShareSheet\n(\nwith\n:\n \nlp\n,\n \nandShareText\n:\n \ntext\n \n,\n \nfrom\n:\n \ncontroller\n)\n \n{\n \n(\nactivity\n,\n \nsuccess\n)\n \nin\n\n  \nprint\n(\nactivity\n \n??\n \nnone\n,\n \nsuccess\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// optional values\n\n\nBranchLinkProperties\n \n*\nlp\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlp\n.\nfeature\n \n=\n \n@\nsharing\n;\n\n\nlp\n.\nchannel\n \n=\n \n@\nfacebook\n;\n\n\n[\nlp\n \naddControlParam\n:\n@\n$desktop_url\n \nwithValue\n:\n@\nhttp://example.com/home\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$ios_url\n \nwithValue\n:\n@\nhttp://example.com/ios\n];\n\n\n\n// share link\n\n\n[\nbuo\n \nshowShareSheetWithLinkProperties\n:\nlp\n \nandShareText\n:\n@\nSuper amazing thing I want to share!\n \nfromViewController\n:\nself\n \ncompletion\n:\n^\n(\nNSString\n*\n \nactivityType\n,\n \nBOOL\n \ncompleted\n)\n \n{\n\n    \nNSLog\n(\n@\nfinished presenting\n);\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nSwift 3\n\n\n// listener (within AppDelegate)\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n)\n \n{\n \nparams\n,\n \nerror\n \nin\n\n  \nprint\n(\nparams\n \nas\n?\n \n[\nString\n:\n \nAnyObject\n]\n \n??\n \n{})\n\n\n}\n\n\n\n// latest\n\n\nlet\n \nsessionParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetLatestReferringParams\n()\n\n\n\n// first\n\n\nlet\n \ninstallParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetFirstReferringParams\n()\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// listener (within AppDelegate.m)\n\n\n[[\nBranch\n \ngetInstance\n]\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\n \n_Nonnull\n \nparams\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n    \nNSLog\n(\n@\n%@\n,\n \nparams\n);\n  \n\n}];\n\n\n\n// latest\n\n\nNSDictionary\n \n*\nsessionParams\n \n=\n \n[[\nBranch\n \ngetInstance\n]\n \ngetLatestReferringParams\n];\n\n\n\n// first\n\n\nNSDictionary\n \n*\ninstallParams\n \n=\n \n[[\nBranch\n \ngetInstance\n]\n \ngetFirstReferringParams\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nNavigate to any ViewController based on data from a deep link\n\n\n\n\n\n\nSwift 3\n\n\n// within AppDelegate application.didFinishLaunchingWithOptions\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n)\n \n{\n \nparams\n \n,\n \nerror\n \nin\n\n  \n// read deep link data\n\n  \nguard\n \nlet\n \ndata\n \n=\n \nparams\n \nas\n?\n \n[\nString\n:\n \nAnyObject\n]\n \nelse\n \n{\n \nreturn\n \n}\n\n\n  \n// save deep link data to global model \n\n  \nBranchData\n.\nsharedInstance\n.\ndata\n \n=\n \ndata\n\n\n  \n// navigate to view controller based on deep link data[\ntype\n] (\ntype\n can be any custom key-value pair)\n\n  \nguard\n \nlet\n \nnav\n \n=\n \ndata\n[\ntype\n]\n \nas\n?\n \nString\n \nelse\n \n{\n \nreturn\n \n}\n\n  \nswitch\n \nnav\n \n{\n\n      \ncase\n \nlanding_page\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n      \ncase\n \ntutorial\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n      \ncase\n \ncontent\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n      \ndefault\n:\n \nbreak\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\nTODO\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nLists content on iOS Spotlight for local and cloud indexing\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nSwift 3\n\n\nbuo\n.\nautomaticallyListOnSpotlight\n \n=\n \ntrue\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\nbuo\n.\nautomaticallyListOnSpotlight\n \n=\n \nYES\n;\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nTrack content properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\nbuo\n.\nuserCompletedAction\n(\nBNCRegisterViewEvent\n)\n \n\n\n\n\n\n\n\n\nObjective-C\n\n\n[\nbuo\n \nuserCompletedAction\n:\nBNCRegisterViewEvent\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n  \n\n\n\n\n\n\nSwift 3\n\n\n// login\n\n\nBranch\n.\ngetInstance\n().\nsetIdentity\n(\nyour_user_id\n)\n \n\n\n// logout\n\n\nBranch\n.\ngetInstance\n().\nlogout\n()\n  \n\n\n\n\n\n\n\n\nObjective-C\n\n\n// login\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetIdentity\n:\n@\nyour_user_id\n];\n   \n\n\n// logout\n\n\n[[\nBranch\n \ngetInstance\n]\n \nlogout\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nTrack custom events\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\n63\n max event name length\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\n// option 1\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\nyour_custom_event\n)\n \n\n\n// option 2\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\nyour_custom_event\n,\n \nwithState\n:\n \n[\nString\n:\n \nString\n]())\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// option 1\n\n\n[[\nBranch\n \ngetInstance\n]\n \nuserCompletedAction\n:\n@\nyour_custom_event\n];\n\n\n\n// option 2\n\n\n[[\nBranch\n \ngetInstance\n]\n \nuserCompletedAction\n:\n@\nyour_custom_event\n \nwithState\n:(\nNSDictionary\n \n*\n)\nappState\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nRecommendations\n\n\n\n\n\n\nSample app\n\n\n\n\n\n\nSimulate an install\n\n\n\n\n\n\nApp not opening\n\n\n\n\n\n\nData not pass through\n\n\n\n\n\n\nDeep links are long\n\n\n\n\n\n\nTrack content properties\n\n\n\n\n\n\nUsed for \nTrack content\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nBNCRegisterViewEvent\n\n\nUser viewed the object\n\n\n\n\n\n\nBNCAddToWishlistEvent\n\n\nUser added the object to their wishlist\n\n\n\n\n\n\nBNCAddToCartEvent\n\n\nUser added object to cart\n\n\n\n\n\n\nBNCPurchaseInitiatedEvent\n\n\nUser started to check out\n\n\n\n\n\n\nBNCPurchasedEvent\n\n\nUser purchased the item\n\n\n\n\n\n\nBNCShareInitiatedEvent\n\n\nUser started to share the object\n\n\n\n\n\n\nBNCShareCompletedEvent\n\n\nUser completed a share\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeep link push notifications\n\n\n\n\n\n\nInclude the Branch push notification handler in \nInitialize Branch\n\n\n\n\n\n\nAdd a Branch deep link in your push notification  \npayload\n \n\n\n{\n\n  \naps\n:\n \n{\n\n    \nalert\n:\n \nPush notification with a Branch deep link\n,\n\n    \nbadge\n:\n \n1\n\n  \n},\n\n\n  \nbranch\n:\n \nhttps://s3z3.app.link/u3fzDwyyjF\n\n\n}\n\n\n\n\n\n\n\nReplace \nhttps://s3z3.app.link/u3fzDwyyjF\n with your deep link\n\n\n\n\n\n\n\n\nRead deep link data from \nBranch.getInstance().initSession\n \nInitialize Branch\n (\ndemo\n)\n\n\n\n\n\n\n\n\n\n\ntest", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/apps/ios/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/ios/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/ios/#configure-bundle-identifier", 
            "text": "Bundle Id matches  Branch Dashboard", 
            "title": "Configure bundle identifier"
        }, 
        {
            "location": "/pages/apps/ios/#configure-associated-domains", 
            "text": "Add  Branch Dashboard  values", 
            "title": "Configure associated domains"
        }, 
        {
            "location": "/pages/apps/ios/#configure-entitlements", 
            "text": "Confirm entitlements are within target", 
            "title": "Configure entitlements"
        }, 
        {
            "location": "/pages/apps/ios/#configure-infoplist", 
            "text": "Add  Branch Dashboard  values", 
            "title": "Configure info.pList"
        }, 
        {
            "location": "/pages/apps/ios/#confirm-app-prefix", 
            "text": "From your  Apple Developer Account", 
            "title": "Confirm app prefix"
        }, 
        {
            "location": "/pages/apps/ios/#install-branch", 
            "text": "Option 1:  CocoaPods  platform :ios,  8.0 \n\ntarget  APP_NAME   do \n   # if swift \n  use_frameworks!   pod  Branch  end    Option 2:  Carthage  github  BranchMetrics/ios-branch-deep-linking     Option 3: Manually install the  source code  with dependencies", 
            "title": "Install Branch"
        }, 
        {
            "location": "/pages/apps/ios/#initialize-branch", 
            "text": "Swift 3  import   UIKit  import   Branch   @UIApplicationMain  class   AppDelegate :   UIResponder ,   UIApplicationDelegate   {  var   window :   UIWindow ?  func   application ( _   application :   UIApplication ,   didFinishLaunchingWithOptions   launchOptions :   [ UIApplicationLaunchOptionsKey :   Any ]?)   -   Bool   {     // for debug and development only     Branch . getInstance (). setDebug ()     // listener for Branch Deep Link data     Branch . getInstance (). initSession ( launchOptions :   launchOptions )   {   ( params ,   error )   in       // do stuff with deep link data (nav to page, display content, etc)       print ( params   as ?   [ String :   AnyObject ]   ??   {})     }     return   true  }  func   application ( _   app :   UIApplication ,   open   url :   URL ,   options :   [ UIApplicationOpenURLOptionsKey   :   Any ]   =   [:])   -   Bool   {     // handler for URI Schemes (depreciated in iOS 9.2+, but still used by some Google apps)     Branch . getInstance (). application ( app ,   open :   url ,   options :   options )     return   true  }  func   application ( _   application :   UIApplication ,   continue   userActivity :   NSUserActivity ,   restorationHandler :   @ escaping   ([ Any ]?)   -   Void )   -   Bool   {     // handler for Universal Links     Branch . getInstance (). continue ( userActivity )     return   true  }  func   application ( _   application :   UIApplication ,   didReceiveRemoteNotification   userInfo :   [ AnyHashable   :   Any ],   fetchCompletionHandler   completionHandler :   @ escaping   ( UIBackgroundFetchResult )   -   Void )   {     // handler for Push Notifications     Branch . getInstance (). handlePushNotification ( userInfo )  }     Objective-C  #import  AppDelegate.h  #import  Branch/Branch.h   @interface   AppDelegate   ()  @end  @implementation   AppDelegate  -   ( BOOL ) application: ( UIApplication   * ) application   didFinishLaunchingWithOptions: ( NSDictionary   * ) launchOptions   {     // for debug and development only     [[ Branch   getInstance ]   setDebug ];      // listener for Branch Deep Link data     [[ Branch   getInstance ]   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   *   _Nonnull   params ,   NSError   *   _Nullable   error )   {       // do stuff with deep link data (nav to page, display content, etc)       NSLog ( @ %@ ,   params );     }];     return   YES ;  }  -   ( BOOL ) application: ( UIApplication   * ) app   openURL: ( NSURL   * ) url   options: ( NSDictionary UIApplicationOpenURLOptionsKey , id   * ) options   {     // handler for URI Schemes (depreciated in iOS 9.2+, but still used by some Google apps)     [[ Branch   getInstance ]   application : app   openURL : url   options : options ];     return   YES ;  }  -   ( BOOL ) application: ( UIApplication   * ) application   continueUserActivity: ( NSUserActivity   * ) userActivity   restorationHandler: ( void   ( ^ )( NSArray   *   _Nullable )) restorationHandler   {     // handler for Universal Links     [[ Branch   getInstance ]   continueUserActivity : userActivity ];     return   YES ;  }  -   ( void ) application: ( UIApplication   * ) application   didReceiveRemoteNotification: ( NSDictionary   * ) userInfo   {     // handler for Push Notifications     [[ Branch   getInstance ]   handlePushNotification : userInfo ];  }  @end", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/ios/#test-deep-link", 
            "text": "Create a deep link from the  Branch Marketing Dashboard    Delete your app from the device    Compile your app  ( cordova run ios   phonegap run ios   ionic run ios )    Paste deep link in  Apple Notes    Long press on the deep link  (not 3D Touch)    Click  Open in \"APP_NAME\"  to open your app  ( example )", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/ios/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/ios/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share     Uses  Universal Object properties    Swift 3  // only canonical identifier is required  let   buo   =   BranchUniversalObject ( canonicalIdentifier :   item/12345 )  buo . title   =   UUID . init (). uuidString  buo . contentDescription   =   My Content Description  buo . imageUrl   =   http://lorempixel.com/200/200/  buo . canonicalUrl   =   http://s3z3.app.link/rawr_rawr  buo . contentIndexMode   =   . public  buo . addMetadataKey ( property1 ,   value :   blue )     Objective-C  // only canonical identifier is required  BranchUniversalObject   * buo   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ item/12345 ];  buo . title   =   @ My Content Title ;  buo . contentDescription   =   @ My Content Description ;  buo . imageUrl   =   @ https://example.com/mycontent-12345.png ;  [ buo   addMetadataKey : @ property1   value : @ blue ];  [ buo   addMetadataKey : @ property2   value : @ red ];", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/ios/#create-deep-link", 
            "text": "Generates a deep link within your app    Needs a  Branch Universal Object    Validate with the  Branch Dashboard    Swift 3  let   lp :   BranchLinkProperties   =   BranchLinkProperties ()  lp . feature   =   sharing  lp . channel   =   facebook  lp . campaign   =   meow meow  lp . addControlParam ( $desktop_url ,   withValue :   http://example.com/home )  lp . addControlParam ( random ,   withValue :   UUID . init (). uuidString )  buo . getShortUrl ( with :   lp )   {   url ,   error   in \n   guard   let   url   =   url   else   {   return   } \n   print ( url )  }     Objective-C  BranchLinkProperties   * lp   =   [[ BranchLinkProperties   alloc ]   init ];  lp . feature   =   @ sharing ;  lp . channel   =   @ facebook ;  [ lp   addControlParam : @ $desktop_url   withValue : @ http://example.com/home ];  [ lp   addControlParam : @ $ios_url   withValue : @ http://example.com/ios ];  [ buo   getShortUrlWithLinkProperties : lp   andCallback : ^ ( NSString *   url ,   NSError *   error )   { \n     if   ( ! error )   { \n         NSLog ( @ @ ,   url ); \n     }  }];", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/ios/#share-deep-link", 
            "text": "Share a deep link between users and apps    Needs a  Branch Universal Object    Swift 3  // optional values  let   lp :   BranchLinkProperties   =   BranchLinkProperties ()  lp . feature   =   sharing  lp . channel   =   facebook  lp . campaign   =   meow meow  lp . addControlParam ( $desktop_url ,   withValue :   http://example.com/home )  lp . addControlParam ( random ,   withValue :   UUID . init (). uuidString )  // share link  buo . showShareSheet ( with :   lp ,   andShareText :   text   ,   from :   controller )   {   ( activity ,   success )   in \n   print ( activity   ??   none ,   success )  }     Objective-C  // optional values  BranchLinkProperties   * lp   =   [[ BranchLinkProperties   alloc ]   init ];  lp . feature   =   @ sharing ;  lp . channel   =   @ facebook ;  [ lp   addControlParam : @ $desktop_url   withValue : @ http://example.com/home ];  [ lp   addControlParam : @ $ios_url   withValue : @ http://example.com/ios ];  // share link  [ buo   showShareSheetWithLinkProperties : lp   andShareText : @ Super amazing thing I want to share!   fromViewController : self   completion : ^ ( NSString *   activityType ,   BOOL   completed )   { \n     NSLog ( @ finished presenting );  }];", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/ios/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Swift 3  // listener (within AppDelegate)  Branch . getInstance (). initSession ( launchOptions :   launchOptions )   {   params ,   error   in \n   print ( params   as ?   [ String :   AnyObject ]   ??   {})  }  // latest  let   sessionParams   =   Branch . getInstance (). getLatestReferringParams ()  // first  let   installParams   =   Branch . getInstance (). getFirstReferringParams ()     Objective-C  // listener (within AppDelegate.m)  [[ Branch   getInstance ]   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   *   _Nonnull   params ,   NSError   *   _Nullable   error )   { \n     NSLog ( @ %@ ,   params );    }];  // latest  NSDictionary   * sessionParams   =   [[ Branch   getInstance ]   getLatestReferringParams ];  // first  NSDictionary   * installParams   =   [[ Branch   getInstance ]   getFirstReferringParams ];", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/ios/#navigate-to-content", 
            "text": "Navigate to any ViewController based on data from a deep link    Swift 3  // within AppDelegate application.didFinishLaunchingWithOptions  Branch . getInstance (). initSession ( launchOptions :   launchOptions )   {   params   ,   error   in \n   // read deep link data \n   guard   let   data   =   params   as ?   [ String :   AnyObject ]   else   {   return   } \n\n   // save deep link data to global model  \n   BranchData . sharedInstance . data   =   data \n\n   // navigate to view controller based on deep link data[ type ] ( type  can be any custom key-value pair) \n   guard   let   nav   =   data [ type ]   as ?   String   else   {   return   } \n   switch   nav   { \n       case   landing_page :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n       case   tutorial :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n       case   content :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n       default :   break \n   }  }     Objective-C  TODO", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/ios/#display-content", 
            "text": "Lists content on iOS Spotlight for local and cloud indexing    Needs a  Branch Universal Object    Swift 3  buo . automaticallyListOnSpotlight   =   true     Objective-C  buo . automaticallyListOnSpotlight   =   YES ;", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/ios/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Branch Universal Object    Uses  Track content properties    Validate with the  Branch Dashboard    Swift 3  buo . userCompletedAction ( BNCRegisterViewEvent )      Objective-C  [ buo   userCompletedAction : BNCRegisterViewEvent ];", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/ios/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    Validate with the  Branch Dashboard       Swift 3  // login  Branch . getInstance (). setIdentity ( your_user_id )   // logout  Branch . getInstance (). logout ()       Objective-C  // login  [[ Branch   getInstance ]   setIdentity : @ your_user_id ];     // logout  [[ Branch   getInstance ]   logout ];", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/ios/#track-events", 
            "text": "Track custom events    Events named  open ,  close ,  install , and  referred session  are Branch restricted    63  max event name length    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard    Swift 3  // option 1  Branch . getInstance (). userCompletedAction ( your_custom_event )   // option 2  Branch . getInstance (). userCompletedAction ( your_custom_event ,   withState :   [ String :   String ]())     Objective-C  // option 1  [[ Branch   getInstance ]   userCompletedAction : @ your_custom_event ];  // option 2  [[ Branch   getInstance ]   userCompletedAction : @ your_custom_event   withState :( NSDictionary   * ) appState ];", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/ios/#handle-referrals", 
            "text": "", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/ios/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/ios/#recommendations", 
            "text": "", 
            "title": "Recommendations"
        }, 
        {
            "location": "/pages/apps/ios/#sample-app", 
            "text": "", 
            "title": "Sample app"
        }, 
        {
            "location": "/pages/apps/ios/#simulate-an-install", 
            "text": "", 
            "title": "Simulate an install"
        }, 
        {
            "location": "/pages/apps/ios/#app-not-opening", 
            "text": "", 
            "title": "App not opening"
        }, 
        {
            "location": "/pages/apps/ios/#data-not-pass-through", 
            "text": "", 
            "title": "Data not pass through"
        }, 
        {
            "location": "/pages/apps/ios/#deep-links-are-long", 
            "text": "", 
            "title": "Deep links are long"
        }, 
        {
            "location": "/pages/apps/ios/#track-content-properties", 
            "text": "Used for  Track content     Key  Value      BNCRegisterViewEvent  User viewed the object    BNCAddToWishlistEvent  User added the object to their wishlist    BNCAddToCartEvent  User added object to cart    BNCPurchaseInitiatedEvent  User started to check out    BNCPurchasedEvent  User purchased the item    BNCShareInitiatedEvent  User started to share the object    BNCShareCompletedEvent  User completed a share", 
            "title": "Track content properties"
        }, 
        {
            "location": "/pages/apps/ios/#deep-link-push-notifications", 
            "text": "Include the Branch push notification handler in  Initialize Branch    Add a Branch deep link in your push notification   payload    { \n   aps :   { \n     alert :   Push notification with a Branch deep link , \n     badge :   1 \n   },     branch :   https://s3z3.app.link/u3fzDwyyjF  }    Replace  https://s3z3.app.link/u3fzDwyyjF  with your deep link     Read deep link data from  Branch.getInstance().initSession   Initialize Branch  ( demo )      test", 
            "title": "Deep link push notifications"
        }, 
        {
            "location": "/pages/apps/android/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall Branch\n\n\n\n\n\n\nImport the Branch SDK to your \nbuild.gradle\n\n\napply\n \nplugin\n:\n \ncom\n.\nandroid\n.\napplication\n\n\n\nandroid\n \n{\n\n    \ncompileSdkVersion\n \n25\n\n    \nbuildToolsVersion\n \n25.0.2\n\n    \ndefaultConfig\n \n{\n\n        \napplicationId\n \ncom.eneff.branchandroid\n\n        \nminSdkVersion\n \n15\n\n        \ntargetSdkVersion\n \n25\n\n        \nversionCode\n \n1\n\n        \nversionName\n \n1.0\n\n        \ntestInstrumentationRunner\n \nandroid.support.test.runner.AndroidJUnitRunner\n\n    \n}\n\n    \nbuildTypes\n \n{\n\n        \nrelease\n \n{\n\n            \nminifyEnabled\n \nfalse\n\n            \nproguardFiles\n \ngetDefaultProguardFile\n(\nproguard\n-\nandroid\n.\ntxt\n),\n \nproguard\n-\nrules\n.\npro\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\ndependencies\n \n{\n\n    \ncompile\n \nfileTree\n(\ndir\n:\n \nlibs\n,\n \ninclude\n:\n \n[\n*.\njar\n])\n\n    \nandroidTestCompile\n(\ncom\n.\nandroid\n.\nsupport\n.\ntest\n.\nespresso\n:\nespresso\n-\ncore\n:\n2.2.2\n,\n \n{\n\n        \nexclude\n \ngroup\n:\n \ncom\n.\nandroid\n.\nsupport\n,\n \nmodule\n:\n \nsupport\n-\nannotations\n\n    \n})\n\n    \ncompile\n \ncom\n.\nandroid\n.\nsupport\n:\nappcompat\n-\nv7\n:\n25.2.0\n\n    \ncompile\n \ncom\n.\nandroid\n.\nsupport\n:\ndesign\n:\n25.2.0\n\n\n\n    \n// required\n\n\n    \ncompile\n \nio\n.\nbranch\n.\nsdk\n.\nandroid\n:\nlibrary\n:\n2.\n+\n\n\n\n\n    \n// optional \n\n\n    \ncompile\n \ncom\n.\nandroid\n.\nsupport\n:\ncustomtabs\n:\n23.3.0\n \n// Chrome Tab matching\n\n\n    \ncompile\n \ncom\n.\ngoogle\n.\nandroid\n.\ngms\n:\nplay\n-\nservices\n-\nads\n:\n9\n+\n \n// GAID matching\n\n\n    \ncompile\n \ncom\n.\ngoogle\n.\nandroid\n.\ngms\n:\nplay\n-\nservices\n-\nappindexing\n:\n9.\n+\n \n// App indexing\n\n\n\n    \ntestCompile\n \njunit\n:\njunit\n:\n4.12\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\nAdd Branch to your \nAndroidManifest.xml\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nmanifest\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \npackage=\ncom.eneff.branchandroid\n\n\n    \nuses-permission\n \nandroid:name=\nandroid.permission.INTERNET\n \n/\n\n\n    \napplication\n\n        \nandroid:allowBackup=\ntrue\n\n\n        \nandroid:name=\ncom.eneff.branchandroid.CustomApplicationClass\n\n\n        \nandroid:icon=\n@mipmap/ic_launcher\n\n        \nandroid:label=\n@string/app_name\n\n        \nandroid:supportsRtl=\ntrue\n\n        \nandroid:theme=\n@style/AppTheme\n\n\n        \nactivity\n\n            \nandroid:name=\n.MainActivity\n\n\n            \nandroid:launchMode=\nsingleTask\n\n\n            \nandroid:label=\n@string/app_name\n\n            \nandroid:theme=\n@style/AppTheme.NoActionBar\n\n\n            \nintent-filter\n\n                \naction\n \nandroid:name=\nandroid.intent.action.MAIN\n \n/\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.LAUNCHER\n \n/\n\n            \n/intent-filter\n\n\n\n            \n!-- Branch URI Scheme --\n\n\n            \nintent-filter\n\n\n                \ndata\n \nandroid:scheme=\nbranchandroid\n \n/\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n            \n/intent-filter\n\n\n\n\n            \n!-- Branch App Links (optional) --\n\n\n            \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n                \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nuobg.app.link\n \n/\n\n\n                \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nuobg-alternate.app.link\n \n/\n\n\n            \n/intent-filter\n\n        \n/activity\n\n\n\n        \n!-- Branch init --\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey\n \nandroid:value=\nkey_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa\n \n/\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey.test\n \nandroid:value=\nkey_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa\n \n/\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.TestMode\n \nandroid:value=\nfalse\n \n/\n\n\n\n\n        \n!-- Branch install referrer tracking (optional) --\n\n\n        \nreceiver\n \nandroid:name=\nio.branch.referral.InstallListener\n \nandroid:exported=\ntrue\n\n\n            \nintent-filter\n\n\n                \naction\n \nandroid:name=\ncom.android.vending.INSTALL_REFERRER\n \n/\n\n\n            \n/intent-filter\n\n\n        \n/receiver\n\n\n\n    \n/application\n\n\n\n/manifest\n\n\n\n\n\n\n\n\n\nReplace the following with values from your \nBranch Dashboard\n\n\n\n\nbranchandroid\n\n\nuobg.app.link\n\n\nkey_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa\n\n\nkey_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nAdd Branch to your \nMainActivity.java\n\n\n\n\n\n\nJava\n\n\npackage\n \ncom.eneff.branchandroid\n;\n\n\n\nimport\n \nandroid.content.Intent\n;\n\n\nimport\n \nandroid.os.Bundle\n;\n\n\nimport\n \nandroid.support.design.widget.FloatingActionButton\n;\n\n\nimport\n \nandroid.support.design.widget.Snackbar\n;\n\n\nimport\n \nandroid.support.v7.app.AppCompatActivity\n;\n\n\nimport\n \nandroid.support.v7.widget.Toolbar\n;\n\n\nimport\n \nandroid.util.Log\n;\n\n\nimport\n \nandroid.view.View\n;\n\n\nimport\n \nandroid.view.Menu\n;\n\n\nimport\n \nandroid.view.MenuItem\n;\n\n\n\nimport\n \norg.json.JSONObject\n;\n\n\n\n\nimport\n \nio.branch.referral.Branch\n;\n\n\nimport\n \nio.branch.referral.BranchError\n;\n\n\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n\n    \n@Override\n\n    \nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n        \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n        \nsetContentView\n(\nR\n.\nlayout\n.\nactivity_main\n);\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonStart\n()\n \n{\n\n        \nsuper\n.\nonStart\n();\n\n\n\n        \n// Branch init\n\n\n        \nBranch\n.\ngetInstance\n().\ninitSession\n(\nnew\n \nBranch\n.\nBranchReferralInitListener\n()\n \n{\n\n\n            \n@Override\n\n\n            \npublic\n \nvoid\n \nonInitFinished\n(\nJSONObject\n \nreferringParams\n,\n \nBranchError\n \nerror\n)\n \n{\n\n\n                \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n\n                    \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n());\n\n\n                \n}\n \nelse\n \n{\n\n\n                    \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nerror\n.\ngetMessage\n());\n\n\n                \n}\n\n\n            \n}\n\n\n        \n},\n \nthis\n.\ngetIntent\n().\ngetData\n(),\n \nthis\n);\n\n\n    \n}\n\n\n\n    \n@Override\n\n\n    \npublic\n \nvoid\n \nonNewIntent\n(\nIntent\n \nintent\n)\n \n{\n\n\n        \nthis\n.\nsetIntent\n(\nintent\n);\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\npackage\n \ncom.eneff.branchandroid\n\n\n\nimport\n \nandroid.content.Intent\n\n\nimport\n \nandroid.os.Bundle\n\n\nimport\n \nandroid.support.design.widget.FloatingActionButton\n\n\nimport\n \nandroid.support.design.widget.Snackbar\n\n\nimport\n \nandroid.support.v7.app.AppCompatActivity\n\n\nimport\n \nandroid.support.v7.widget.Toolbar\n\n\nimport\n \nandroid.util.Log\n\n\nimport\n \nandroid.view.View\n\n\nimport\n \nandroid.view.Menu\n\n\nimport\n \nandroid.view.MenuItem\n\n\n\nimport\n \norg.json.JSONObject\n\n\n\n\nimport\n \nio.branch.referral.Branch\n\n\nimport\n \nio.branch.referral.BranchError\n\n\n\n\nclass\n \nMainActivity\n \n:\n \nAppCompatActivity\n()\n \n{\n\n\n    \noverride\n \nfun\n \nonCreate\n(\nsavedInstanceState\n:\n \nBundle\n?)\n \n{\n\n        \nsuper\n.\nonCreate\n(\nsavedInstanceState\n)\n\n        \nsetContentView\n(\nR\n.\nlayout\n.\nactivity_main\n)\n\n    \n}\n\n\n    \noverride\n \nfun\n \nonStart\n()\n \n{\n\n        \nsuper\n.\nonStart\n()\n\n\n\n        \n// Branch init\n\n\n        \nBranch\n.\ngetInstance\n().\ninitSession\n(\nobject\n \n:\n \nBranchReferralInitListener\n \n{\n\n\n            \noverride\n \nfun\n \nonInitFinished\n(\nreferringParams\n:\n \nJSONObject\n,\n \nerror\n:\n \nBranchError\n?)\n \n{\n\n\n                \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n\n                    \nLog\n.\ne\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n)\n\n\n                \n}\n \nelse\n \n{\n\n\n                    \nLog\n.\ne\n(\nBRANCH SDK\n,\n \nerror\n.\nmessage\n)\n\n\n                \n}\n\n\n            \n}\n\n\n        \n},\n \nthis\n.\nintent\n.\ndata\n,\n \nthis\n)\n\n\n    \n}\n\n\n\n    \npublic\n \noverride\n \nfun\n \nonNewIntent\n(\nintent\n:\n \nIntent\n)\n \n{\n\n\n        \nthis\n.\nintent\n \n=\n \nintent\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoad Branch\n\n\n\n\n\n\nAdd Branch to your \nCustomApplicationClass.java\n\n\n\n\n\n\nJava\n\n\npackage\n \ncom.eneff.branchandroid\n;\n\n\n\nimport\n \nandroid.app.Application\n;\n\n\nimport\n \nio.branch.referral.Branch\n;\n\n\n\n\npublic\n \nclass\n \nCustomApplicationClass\n \nextends\n \nApplication\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonCreate\n()\n \n{\n\n        \nsuper\n.\nonCreate\n();\n\n\n\n        \n// Branch logging for debugging\n\n\n        \nBranch\n.\nenableLogging\n();\n\n\n\n\n        \n// Branch object initialization\n\n\n        \nBranch\n.\ngetAutoInstance\n(\nthis\n);\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\npackage\n \ncom.eneff.branchandroid\n\n\n\nimport\n \nandroid.app.Application\n\n\nimport\n \nio.branch.referral.Branch\n\n\n\n\nclass\n \nCustomApplicationClass\n \n:\n \nApplication\n()\n \n{\n\n    \noverride\n \nfun\n \nonCreate\n()\n \n{\n\n        \nsuper\n.\nonCreate\n()\n\n\n\n        \n// Branch logging for debugging\n\n\n        \nBranch\n.\nenableLogging\n()\n\n\n\n\n        \n// Branch object initialization\n\n\n        \nBranch\n.\ngetAutoInstance\n(\nthis\n)\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link\n\n\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app to your device\n\n\n\n\n\n\nPaste deep link in \nGoogle Hangouts\n\n\n\n\n\n\nClick on the deep link to open your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share (content or user)\n\n\n\n\n\n\nUses the \nUniversal Object Properties\n\n\n\n\n\n\nJava\n\n\nBranchUniversalObject\n \nbuo\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n    \n.\nsetCanonicalIdentifier\n(\ncontent/12345\n)\n\n    \n.\nsetTitle\n(\nMy Content Title\n)\n\n    \n.\nsetContentDescription\n(\nMy Content Description\n)\n\n    \n.\nsetContentImageUrl\n(\nhttps://lorempixel.com/400/400\n)\n\n    \n.\nsetContentIndexingMode\n(\nBranchUniversalObject\n.\nCONTENT_INDEX_MODE\n.\nPUBLIC\n)\n\n    \n.\naddContentMetadata\n(\ncustom_data\n,\n \n123\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nval\n \nbuo\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n    \n.\nsetCanonicalIdentifier\n(\ncontent/12345\n)\n\n    \n.\nsetTitle\n(\nMy Content Title\n)\n\n    \n.\nsetContentDescription\n(\nMy Content Description\n)\n\n    \n.\nsetContentImageUrl\n(\nhttps://lorempixel.com/400/400\n)\n\n    \n.\nsetContentIndexingMode\n(\nBranchUniversalObject\n.\nCONTENT_INDEX_MODE\n.\nPUBLIC\n)\n\n    \n.\naddContentMetadata\n(\ncustom_data\n,\n \n123\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nCreates a deep link URL with encapsulated data\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nJava\n\n\nLinkProperties\n \nlp\n \n=\n \nnew\n \nLinkProperties\n()\n\n    \n.\nsetChannel\n(\nfacebook\n)\n\n    \n.\nsetFeature\n(\nsharing\n)\n\n    \n.\nsetCampaign\n(\ncontent 123 launch\n)\n\n    \n.\nsetStage\n(\nnew user\n)\n\n    \n.\naddControlParameter\n(\n\\$deeplink_path\n,\n \ncontent/123\n)\n\n    \n.\naddControlParameter\n(\n\\$desktop_url\n,\n \nhttp://example.com/home\n)\n\n    \n.\naddControlParameter\n(\ncustom\n,\n \ndata\n)\n\n    \n.\naddControlParameter\n(\ncustom_random\n,\n \nLong\n.\ntoString\n(\nCalendar\n.\ngetInstance\n().\ngetTimeInMillis\n()));\n\n\n\nbuo\n.\ngenerateShortUrl\n(\nthis\n,\n \nlp\n,\n \nnew\n \nBranch\n.\nBranchLinkCreateListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonLinkCreate\n(\nString\n \nurl\n,\n \nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \ngot my Branch link to share: \n \n+\n \nurl\n);\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nval\n \nlp\n \n=\n \nnew\n \nLinkProperties\n()\n\n    \n.\nsetChannel\n(\nfacebook\n)\n\n    \n.\nsetFeature\n(\nsharing\n)\n\n    \n.\nsetCampaign\n(\ncontent 123 launch\n)\n\n    \n.\nsetStage\n(\nnew user\n)\n\n    \n.\naddControlParameter\n(\n$deeplink_path\n,\n \ncontent/123\n)\n\n    \n.\naddControlParameter\n(\n$desktop_url\n,\n \nhttp://example.com/home\n)\n\n    \n.\naddControlParameter\n(\ncustom\n,\n \ndata\n)\n\n    \n.\naddControlParameter\n(\ncustom_random\n,\n \nLong\n.\ntoString\n(\nCalendar\n.\ngetInstance\n().\ngetTimeInMillis\n()))\n\n\n\nbuo\n.\ngenerateShortUrl\n(\nthis\n,\n \nlp\n,\n \nBranchLinkCreateListener\n \n{\n \nurl\n,\n \nerror\n \n-\n\n    \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n        \nLog\n.\ni\n(\nBRANCH SDK\n,\n \ngot my Branch link to share: \n \n+\n \nurl\n)\n\n    \n}\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nJava\n\n\nLinkProperties\n \nlp\n \n=\n \nnew\n \nLinkProperties\n()\n\n    \n.\nsetChannel\n(\nfacebook\n)\n\n    \n.\nsetFeature\n(\nsharing\n)\n\n    \n.\nsetCampaign\n(\ncontent 123 launch\n)\n\n    \n.\nsetStage\n(\nnew user\n)\n\n    \n.\naddControlParameter\n(\n\\$deeplink_path\n,\n \ncontent/123\n)\n\n    \n.\naddControlParameter\n(\n\\$desktop_url\n,\n \nhttp://example.com/home\n)\n\n    \n.\naddControlParameter\n(\ncustom\n,\n \ndata\n)\n\n    \n.\naddControlParameter\n(\ncustom_random\n,\n \nLong\n.\ntoString\n(\nCalendar\n.\ngetInstance\n().\ngetTimeInMillis\n()));\n\n\n\nShareSheetStyle\n \nss\n \n=\n \nnew\n \nShareSheetStyle\n(\nMainActivity\n.\nthis\n,\n \nCheck this out!\n,\n \nThis stuff is awesome: \n)\n\n    \n.\nsetCopyUrlStyle\n(\nContextCompat\n.\ngetDrawable\n(\nthis\n,\n \nandroid\n.\nR\n.\ndrawable\n.\nic_menu_send\n),\n \nCopy\n,\n \nAdded to clipboard\n)\n\n    \n.\nsetMoreOptionStyle\n(\nContextCompat\n.\ngetDrawable\n(\nthis\n,\n \nandroid\n.\nR\n.\ndrawable\n.\nic_menu_search\n),\n \nShow more\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nFACEBOOK\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nEMAIL\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nMESSAGE\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nHANGOUT\n)\n\n    \n.\nsetAsFullWidthStyle\n(\ntrue\n)\n\n    \n.\nsetSharingTitle\n(\nShare With\n);\n\n\n\nbuo\n.\nshowShareSheet\n(\nthis\n,\n \nlp\n,\n  \nss\n,\n  \nnew\n \nBranch\n.\nBranchLinkShareListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonShareLinkDialogLaunched\n()\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonShareLinkDialogDismissed\n()\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonLinkShareResponse\n(\nString\n \nsharedLink\n,\n \nString\n \nsharedChannel\n,\n \nBranchError\n \nerror\n)\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonChannelSelected\n(\nString\n \nchannelName\n)\n \n{\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nvar\n \nlp\n \n=\n \nnew\n \nLinkProperties\n()\n\n    \n.\nsetChannel\n(\nfacebook\n)\n\n    \n.\nsetFeature\n(\nsharing\n)\n\n    \n.\nsetCampaign\n(\ncontent 123 launch\n)\n\n    \n.\nsetStage\n(\nnew user\n)\n\n    \n.\naddControlParameter\n(\n$deeplink_path\n,\n \ncontent/123\n)\n\n    \n.\naddControlParameter\n(\n$desktop_url\n,\n \nhttp://example.com/home\n)\n\n    \n.\naddControlParameter\n(\ncustom\n,\n \ndata\n)\n\n    \n.\naddControlParameter\n(\ncustom_random\n,\n \nLong\n.\ntoString\n(\nCalendar\n.\ngetInstance\n().\ngetTimeInMillis\n()))\n\n\n\nvar\n \nss\n \n=\n \nnew\n \nShareSheetStyle\n(\nthis\n@MainActivity\n,\n \nCheck this out!\n,\n \nThis stuff is awesome: \n)\n\n    \n.\nsetCopyUrlStyle\n(\nresources\n.\ngetDrawable\n(\nthis\n,\n \nandroid\n.\nR\n.\ndrawable\n.\nic_menu_send\n),\n \nCopy\n,\n \nAdded to clipboard\n)\n\n    \n.\nsetMoreOptionStyle\n(\nresources\n.\ngetDrawable\n(\nthis\n,\n \nandroid\n.\nR\n.\ndrawable\n.\nic_menu_search\n),\n \nShow more\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nFACEBOOK\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nEMAIL\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nMESSAGE\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nHANGOUT\n)\n\n    \n.\nsetAsFullWidthStyle\n(\ntrue\n)\n\n    \n.\nsetSharingTitle\n(\nShare With\n)\n\n\n\nbuo\n.\nshowShareSheet\n(\nthis\n,\n \nlp\n,\n \nss\n,\n \nobject\n \n:\n \nBranch\n.\nBranchLinkShareListener\n \n{\n\n    \noverride\n \nfun\n \nonShareLinkDialogLaunched\n()\n \n{}\n\n    \noverride\n \nfun\n \nonShareLinkDialogDismissed\n()\n \n{}\n\n    \noverride\n \nfun\n \nonLinkShareResponse\n(\nsharedLink\n:\n \nString\n,\n \nsharedChannel\n:\n \nString\n,\n \nerror\n:\n \nBranchError\n)\n \n{}\n\n    \noverride\n \nfun\n \nonChannelSelected\n(\nchannelName\n:\n \nString\n)\n \n{}\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nJava\n\n\n// listener (within Main Activity\ns onStart)\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nnew\n \nBranch\n.\nBranchReferralInitListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonInitFinished\n(\nJSONObject\n \nreferringParams\n,\n \nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n());\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nerror\n.\ngetMessage\n());\n\n        \n}\n\n    \n}\n\n\n},\n \nthis\n.\ngetIntent\n().\ngetData\n(),\n \nthis\n);\n\n\n\n// latest\n\n\nJSONObject\n \nsessionParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetLatestReferringParams\n();\n\n\n\n// first\n\n\nJSONObject\n \ninstallParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetFirstReferringParams\n();\n\n\n\n\n\n\n\n\n\nKotlin\n\n\n// listener (within Main Activity\ns onStart)\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nobject\n \n:\n \nBranchReferralInitListener\n \n{\n\n    \noverride\n \nfun\n \nonInitFinished\n(\nreferringParams\n:\n \nJSONObject\n,\n \nerror\n:\n \nBranchError\n?)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \nLog\n.\ne\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n)\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ne\n(\nBRANCH SDK\n,\n \nerror\n.\nmessage\n)\n\n        \n}\n\n    \n}\n\n\n},\n \nthis\n.\nintent\n.\ndata\n,\n \nthis\n)\n\n\n\n// latest\n\n\nval\n \nsessionParams\n \n=\n \nBranch\n.\ngetInstance\n().\nlatestReferringParams\n\n\n\n// first\n\n\nval\n \ninstallParams\n \n=\n \nBranch\n.\ngetInstance\n().\nfirstReferringParams\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nDo stuff with the Branch deep link data\n\n\n\n\n\n\nJava\n\n\n// listener (within Main Activity\ns onStart)\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nnew\n \nBranch\n.\nBranchReferralInitListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonInitFinished\n(\nJSONObject\n \nreferringParams\n,\n \nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \n// option 1: log data\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n());\n\n\n            \n// option 2: save data to be used later\n\n            \nSharedPreferences\n \npreferences\n \n=\n \n.\ngetSharedPreferences\n(\nMyPreferences\n,\n \nContext\n.\nMODE_PRIVATE\n);\n\n            \nSharedPreferences\n.\nEditor\n \neditor\n \n=\n \npreferences\n.\nedit\n();\n\n            \neditor\n.\nputString\n(\nbranchData\n,\n \nreferringParams\n.\ntoString\n(\n2\n));\n\n            \neditor\n.\ncommit\n();\n\n\n            \n// option 3: navigate to page\n\n            \nIntent\n \nintent\n \n=\n \nnew\n \nIntent\n(,\n \nOtherActivity\n.\nclass\n);\n\n            \nintent\n.\nputExtra\n(\nbranchData\n,\n \nreferringParams\n.\ntoString\n(\n2\n));\n\n            \nstartActivity\n(\nintent\n);\n\n\n            \n// option 4: display data\n\n            \nToast\n.\nmakeText\n(\nthis\n,\n \nreferringParams\n.\ntoString\n(\n2\n),\n \nToast\n.\nLENGTH_LONG\n).\nshow\n();\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nerror\n.\ngetMessage\n());\n\n        \n}\n\n    \n}\n\n\n},\n \nthis\n.\ngetIntent\n().\ngetData\n(),\n \nthis\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\n// listener (within Main Activity\ns onStart)\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nobject\n \n:\n \nBranchReferralInitListener\n \n{\n\n    \noverride\n \nfun\n \nonInitFinished\n(\nreferringParams\n:\n \nJSONObject\n,\n \nerror\n:\n \nBranchError\n?)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \n// option 1: log data\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n())\n\n\n            \n// option 2: save data to be used later\n\n            \nval\n \npreferences\n \n=\n  \ngetSharedPreferences\n(\nMyPreferences\n,\n \nContext\n.\nMODE_PRIVATE\n)\n\n            \nval\n \neditor\n \n=\n \npreferences\n.\nedit\n()\n\n            \neditor\n.\nputString\n(\nbranchData\n,\n \nreferringParams\n.\ntoString\n(\n2\n))\n\n            \neditor\n.\ncommit\n()\n\n\n            \n// option 3: navigate to page\n\n            \nval\n \nintent\n \n=\n \nIntent\n(\nthis\n,\n \nMainActivity2\n::\nclass\n.\njava\n)\n\n            \nintent\n.\nputExtra\n(\nbranchData\n,\n \nreferringParams\n.\ntoString\n(\n2\n))\n\n            \nstartActivity\n(\nintent\n)\n\n\n            \n// option 4: display data\n\n            \nToast\n.\nmakeText\n(\nthis\n,\n \nreferringParams\n.\ntoString\n(\n2\n),\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n()\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ne\n(\nBRANCH SDK\n,\n \nerror\n.\nmessage\n)\n\n        \n}\n\n    \n}\n\n\n},\n \nthis\n.\nintent\n.\ndata\n,\n \nthis\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nList content on \nGoogle Search\n with \nApp Indexing\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nNeeds \nbuild.gradle\n library\n\n\ncompile\n \ncom\n.\ngoogle\n.\nandroid\n.\ngms\n:\nplay\n-\nservices\n-\nappindexing\n:\n9.\n+\n\n\n\n\n\n\n\n\n\nJava\n\n\nbuo\n.\nlistOnGoogleSearch\n(\nthis\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nbuo\n.\nlistOnGoogleSearch\n(\nthis\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nTrack content properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nJava\n\n\nbuo\n.\nuserCompletedAction\n(\nBranchEvent\n.\nVIEW\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nbuo\n.\nuserCompletedAction\n(\nBranchEvent\n.\nVIEW\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\n127\n character max for user id\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n  \n\n\n\n\n\n\nJava\n\n\n// login\n\n\nBranch\n.\ngetInstance\n().\nsetIdentity\n(\nyour_user_id\n);\n\n\n\n// logout\n\n\nBranch\n.\ngetInstance\n().\nlogout\n();\n\n\n\n\n\n\n\n\n\nKotlin\n\n\n// login\n\n\nBranch\n.\ngetInstance\n().\nsetIdentity\n(\nyour_user_id\n)\n\n\n\n// logout\n\n\nBranch\n.\ngetInstance\n().\nlogout\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\n63\n character max for event name\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nJava\n\n\n// option 1:\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\nyour_custom_event\n);\n\n\n\n// option 2: with metadata\n\n\nJSONObject\n \nmetadata\n \n=\n \nnew\n \nJSONObject\n();\n\n\ntry\n \n{\n\n    \nmetadata\n.\nput\n(\nkey\n,\n \nvalue\n);\n\n\n}\n \ncatch\n \n(\n \nJSONException\n \ne\n \n)\n \n{\n\n\n}\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\nyour_custom_event\n,\n \nmetadata\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\n// option 1:\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\nyour_custom_event\n)\n\n\n\n// option 2: with metadata\n\n\nval\n \nmetadata\n \n=\n \nJSONObject\n()\n\n\nmetadata\n.\nput\n(\nkey\n,\n \nvalue\n)\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\nyour_custom_event\n,\n \nmetadata\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nRegisters a custom commerce event\n\n\n\n\n\n\nUses \nTrack commerce properties\n for \nCurrency\n and \nCategory\n \n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nJava\n\n\nTODO:\n \nall\n\n\nCommerceEvent\n \ncommerceEvent\n \n=\n \nnew\n \nCommerceEvent\n();\n\n\ncommerceEvent\n.\nsetRevenue\n(\n1101.99\n);\n\n\nBranch\n.\ngetInstance\n().\nsendCommerceEvent\n(\ncommerceEvent\n,\n \nnull\n,\n \nnull\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nTODO:\n \nall\n \nvalues\n\n\nval\n \ncommerceEvent\n \n=\n \nCommerceEvent\n()\n\n\ncommerceEvent\n.\nrevenue\n \n=\n \n1101.99\n\n\nBranch\n.\ngetInstance\n().\nsendCommerceEvent\n(\ncommerceEvent\n,\n \nnull\n,\n \nnull\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral points are obtained from events triggered by users from rules created on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits with the \nReferral guide\n\n\n\n\n\n\nRedeem credits\n\n\n\n\n\n\nJava\n\n\nBranch\n.\ngetInstance\n().\nredeemRewards\n(\n5\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nBranch\n.\ngetInstance\n().\nredeemRewards\n(\n5\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoad credits\n\n\n\n\n\n\nJava\n\n\nBranch\n.\ngetInstance\n().\nloadRewards\n(\nnew\n \nBranchReferralStateChangedListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonStateChanged\n(\nboolean\n \nchanged\n,\n \nBranch\n.\nBranchError\n \nerror\n)\n \n{\n\n        \nint\n \ncredits\n \n=\n \nbranch\n.\ngetCredits\n();\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nBranch\n.\ngetInstance\n().\nloadRewards\n \n{\n \nchanged\n,\n \nerror\n \n-\n\n    \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n        \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nbranch load rewards failed. Caused by -\n \n+\n \nerror\n.\nmessage\n)\n\n    \n}\n \nelse\n \n{\n\n        \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nchanged = \n \n+\n \nchanged\n)\n\n        \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nrewards = \n \n+\n \nbranch\n.\ncredits\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoad history\n\n\n\n\n\n\nJava\n \n\n\nBranch\n.\ngetInstance\n().\ngetCreditHistory\n(\nnew\n \nBranchListResponseListener\n()\n \n{\n\n    \npublic\n \nvoid\n \nonReceivingResponse\n(\nJSONArray\n \nlist\n,\n \nBranch\n.\nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nbranch load rewards failed. Caused by -\n \n+\n \nerror\n.\nmessage\n)\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nlist\n);\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nBranch\n.\ngetInstance\n().\ngetCreditHistory\n \n{\n \nhistory\n,\n \nerror\n \n-\n\n    \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n        \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nbranch load credit history failed. Caused by -\n \n+\n \nerror\n.\nmessage\n)\n\n    \n}\n \nelse\n \n{\n\n        \nif\n \n(\nhistory\n.\nlength\n()\n \n \n0\n)\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nhistory\n.\ntoString\n(\n2\n))\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nno history found\n)\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nSample testing apps\n\n\n\n\n\n\nBranchsters\n\n\n\n\n\n\nTestbed\n\n\n\n\n\n\n\n\n\n\nSimulate an install\n\n\n\n\n\n\nNeed to bypass the device's hardware_id\n\n\n\n\n\n\nSet \ntrue\n in your \nAndroidManifest.xml\n\n\nmeta-data\n \nandroid:name=\nio.branch.sdk.TestMode\n \nandroid:value=\ntrue\n \n/\n\n\n\n\n\n\n\n\n\nDo not use \nTestMode\n in production or in the Google Play Store\n\n\n\n\n\n\n\n\n\n\nUninstall your app from the device\n\n\n\n\n\n\nClick on any Branch deep link (will navigate to the fallback URL since the app is not installed)\n\n\n\n\n\n\nReinstall your app\n\n\n\n\n\n\nRead deep link data from \nBranch.initSession()\n for \n+is_first_session=true\n\n\n\n\n\n\n\n\n\n\nUniversal Object best practices\n\n\n\n\nTo make sure your analytics are correct, and your content is ranking on Spotlight effectively.\n\n\nDo\n\n\nSet the \ncanonicalIdentifier\n to a unique, de-duped value across instances of the app\n\n\nEnsure that the \ntitle\n, \ncontentDescription\n and \nimageUrl\n properly represent the object\n\n\nInitialize the Branch Universal Object and call userCompletedAction with the \nBranchEvent.VIEW\n on page load\n\n\nCall showShareSheet and createShortLink later in the life cycle, when the user takes an action that needs a link\n\n\nCall the additional object events (purchase, share completed, etc) when the corresponding user action is taken\n\n\n\n\n\n\nDo not\n\n\nDo not set the same \ntitle\n, \ncontentDescription\n and \nimageUrl\n across all objects\n\n\nDo not wait to initialize the object and register views until the user goes to share\n\n\nDo not wait to initialize the object until you conveniently need a link\n\n\nDo not create many objects at once and register views in a \nfor\n loop.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack content properties\n\n\n\n\n\n\nUsed for \nTrack content\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nBNCRegisterViewEvent\n\n\nUser viewed the object\n\n\n\n\n\n\nBNCAddToWishlistEvent\n\n\nUser added the object to their wishlist\n\n\n\n\n\n\nBNCAddToCartEvent\n\n\nUser added object to cart\n\n\n\n\n\n\nBNCPurchaseInitiatedEvent\n\n\nUser started to check out\n\n\n\n\n\n\nBNCPurchasedEvent\n\n\nUser purchased the item\n\n\n\n\n\n\nBNCShareInitiatedEvent\n\n\nUser started to share the object\n\n\n\n\n\n\nBNCShareCompletedEvent\n\n\nUser completed a share\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing bnc.lt or a custom link domain\n\n\n\n\n\n\nbnc.lt link domain\n\n\nactivity\n \nandroid:name=\ncom.yourapp.your_activity\n\n    \n!-- App Link your activity to Branch links--\n\n    \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n        \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nbnc.lt\n \nandroid:pathPrefix=\n/LVeu\n \n/\n \n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nbnc.lt\n \nandroid:pathPrefix=\n/eVeu\n \n/\n \n    \n/intent-filter\n\n\n/activity\n\n\n\n\n\n\n\n\n\ncustom link domain\n\n\nactivity\n \nandroid:name=\ncom.yourapp.your_activity\n\n    \n!-- App Link your activity to Branch links--\n\n    \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n        \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nyour.app.com\n \nandroid:pathPrefix=\n/LVeu\n \n/\n \n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nyour.app.com\n \nandroid:pathPrefix=\n/eVeu\n \n/\n \n    \n/intent-filter\n\n\n/activity\n\n\n\n\n\n\n\n\n\nChange the following values to match your \nBranch Dashboard\n\n\n\n\n/LVeu\n (live)\n\n\n/eVeu\n (test)\n\n\nyour.app.com\n\n\n\n\n\n\n\n\n\n\n\n\nBranch with Fabric Answers\n\n\n\n\n\n\nIf you do not want to import \nanswers-shim\n\n\ncompile (\nio.branch.sdk.android:library:2.+\n) {\n  exclude module: \nanswers-shim\n\n}   \n\n\n\n\n\n\n\n\n\n\n\n\nDeep link routes\n\n\n\n\n\n\nLoads a specific URI path from \n$deeplink_path\n or \n$android_deeplink_path\n\n\n\n\n\n\nNot recommend (better to route within your \nBranch.initSession()\n)\n\n\nmeta-data\n \nandroid:name=\nio.branch.sdk.auto_link_path\n \nandroid:value=\ncustom/path/*,another/path/\n \n/\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeep link activity finishes\n\n\n\n\n\n\nBe notified when the deep link Activity finishes\n\n\nmeta-data\n \nandroid:name=\nio.branch.sdk.auto_link_request_code\n \nandroid:value=\n@integer/AutoDeeplinkRequestCode\n \n/\n\n\n\n\n\n\n\n\n\nJava\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonActivityResult\n(\nint\n \nrequestCode\n,\n \nint\n \nresultCode\n,\n \nIntent\n \ndata\n)\n \n{\n\n    \nsuper\n.\nonActivityResult\n(\nrequestCode\n,\n \nresultCode\n,\n \ndata\n);\n\n\n    \n// Checking if the previous activity is launched on branch Auto deep link.\n\n    \nif\n(\nrequestCode\n \n==\n \ngetResources\n().\ngetInteger\n(\nR\n.\ninteger\n.\nAutoDeeplinkRequestCode\n)){\n\n        \n//Decide here where  to navigate  when an auto deep linked activity finishes.\n\n        \n//For e.g. Go to HomeActivity or a  SignUp Activity.\n\n        \nIntent\n \ni\n \n=\n \nnew\n \nIntent\n(\ngetApplicationContext\n(),\n \nCreditHistoryActivity\n.\nclass\n);\n\n        \nstartActivity\n(\ni\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\noverride\n \nfun\n \nonActivityResult\n(\nrequestCode\n:\n \nInt\n,\n \nresultCode\n:\n \nInt\n,\n \ndata\n:\n \nIntent\n?)\n \n{\n\n    \nsuper\n.\nonActivityResult\n(\nrequestCode\n,\n \nresultCode\n,\n \ndata\n)\n\n\n    \n// Checking if the previous activity is launched on branch Auto deep link.\n\n    \nif\n \n(\nrequestCode\n \n===\n \nresources\n.\ngetInteger\n(\nR\n.\ninteger\n.\nAutoDeeplinkRequestCode\n))\n \n{\n\n        \n//Decide here where  to navigate  when an auto deep linked activity finishes.\n\n        \n//For e.g. Go to HomeActivity or a  SignUp Activity.\n\n        \nval\n \ni\n \n=\n \nIntent\n(\napplicationContext\n,\n \nCreditHistoryActivity\n::\nclass\n.\njava\n)\n\n        \nstartActivity\n(\ni\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeep link from push notification\n\n\n\n\n\n\nDeep link to content from push notifications just by adding a Branch link to your result intent\n\n\n\n\n\n\nJava\n\n\nIntent\n \nresultIntent\n \n=\n \nnew\n \nIntent\n(\nthis\n,\n \nTargetClass\n.\nclass\n);\n\n\nintent\n.\nputExtra\n(\nbranch\n,\nhttp://xxxx.app.link/testlink\n);\n\n\nPendingIntent\n \nresultPendingIntent\n \n=\n  \nPendingIntent\n.\ngetActivity\n(\nthis\n,\n \n0\n,\n \nresultIntent\n,\n \nPendingIntent\n.\nFLAG_UPDATE_CURRENT\n);\n\n\nintent\n.\nputExtra\n(\nbranch_force_new_session\n,\ntrue\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nval\n \nresultIntent\n \n=\n \nIntent\n(\nthis\n,\n \nTargetClass\n::\nclass\n.\njava\n)\n\n\nintent\n.\nputExtra\n(\nbranch\n,\n \nhttp://xxxx.app.link/testlink\n)\n\n\nval\n \nresultPendingIntent\n \n=\n \nPendingIntent\n.\ngetActivity\n(\nthis\n,\n \n0\n,\n \nresultIntent\n,\n \nPendingIntent\n.\nFLAG_UPDATE_CURRENT\n)\n\n\nintent\n.\nputExtra\n(\nbranch_force_new_session\n,\n \ntrue\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nPre Android 15 support\n\n\n\n\n\n\nUse \nBranch SDK 1.14.5\n\n\n\n\n\n\nAdd to \nonStart()\n and \nonStop()\n\n\n\n\n\n\nJava\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonStart\n()\n \n{\n\n    \nsuper\n.\nonStart\n();\n\n    \nBranch\n.\ngetInstance\n(\ngetApplicationContext\n()).\ninitSession\n();\n\n\n}\n\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonStop\n()\n \n{\n\n    \nsuper\n.\nonStop\n();\n\n    \nbranch\n.\ncloseSession\n();\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\noverride\n \nfun\n \nonStart\n()\n \n{\n\n    \nsuper\n.\nonStart\n()\n\n    \nBranch\n.\ngetInstance\n().\ninitSession\n()\n\n\n}\n\n\n\noverride\n \nfun\n \nonStop\n()\n \n{\n\n    \nsuper\n.\nonStop\n()\n\n    \nBranch\n.\ngetInstance\n().\ncloseSession\n()\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the default application class\n\n\n\n\n\n\nIf your app does not have an application class\n\n\napplication\n \nandroid:name=\nio.branch.referral.BranchApp\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom install referrer class\n\n\n\n\n\n\nGoogle only allows one \nBroadcastReceiver\n per application\n\n\n\n\n\n\nAdd to your \nAndroidManifest.xml\n\n\nreceiver\n \nandroid:name=\ncom.BRANCH SDK.CustomInstallListener\n \nandroid:exported=\ntrue\n\n  \nintent-filter\n\n    \naction\n \nandroid:name=\ncom.android.vending.INSTALL_REFERRER\n \n/\n\n  \n/intent-filter\n\n\n/receiver\n\n\n\n\n\n\n\n\n\nCreate an instance of \nio.branch.referral.InstallListener\n in \nonReceive()\n\n\n\n\n\n\nJava\n\n\nInstallListener\n \nlistener\n \n=\n \nnew\n \nInstallListener\n();\n\n\nlistener\n.\nonReceive\n(\ncontext\n,\n \nintent\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nval\n \nlistener\n \n=\n \nInstallListener\n()\n\n\nlistener\n.\nonReceive\n(\ncontext\n,\n \nintent\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nGuaranteed matching\n\n\n\n\n\n\nCookie based matching using \nCustom Chrome Tabs\n\n\ncompile \ncom.android.support:customtabs:23.3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nMatching through install listener\n\n\n\n\n\n\nEnable to pass \nlink_click_id\n from Google Play to Branch through your Install Listener. As broadcasts can arrive at different times, you can set the amount of time Branch should wait for the install listener broadcast before posting\n\n\n\n\n\n\nAdd to your application class before \ngetAutoInstance\n\n\n\n\n\n\nJava\n\n\nBranch\n.\nsetPlayStoreReferrerCheckTimeout\n(\n5\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nBranch\n.\nsetPlayStoreReferrerCheckTimeout\n(\n5\n)\n\n\n\n\n\n\n\n\n\nTest\n\n\nadb shell am broadcast -a com.android.vending.INSTALL_REFERRER -n io.branch.branchandroiddemo/io.branch.referral.InstallListener --es \nreferrer\n \nlink_click_id=123\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnable multidexing\n\n\n\n\n\n\nAdding additional dependencies may overrun the dex limit and lead to \nNoClassDefFoundError\n or \nClassNotFoundException\n\n\n\n\n\n\nAdd to your \nbuild.gradle\n\n\ndefaultConfig\n \n{\n\n    \nmultiDexEnabled\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\n\nAdd to your \nApplication class\n and make sure it extends \nMultiDexApplication\n\n\n\n\n\n\nJava\n\n\n@Override\n\n\nprotected\n \nvoid\n \nattachBaseContext\n(\nContext\n \nbase\n)\n \n{\n\n    \nsuper\n.\nattachBaseContext\n(\nbase\n);\n\n    \nMultiDex\n.\ninstall\n(\nthis\n);\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\noverride\n \nfun\n \nattachBaseContext\n(\nbase\n:\n \nContext\n?)\n \n{\n\n    \nsuper\n.\nattachBaseContext\n(\nbase\n)\n\n    \nMultiDex\n.\ninstall\n(\nthis\n)\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nInvalidClassException, ClassLoadingError or VerificationError\n\n\n\n\nOften caused by a \nProguard\n bug. Try the latest Proguard version or disable Proguard optimization by setting \n-dontoptimize\n\n\n\n\n\n\n\n\nProguard warning or errors with answers-shim module\n\n\n\n\nOften caused when you exclude the \nanswers-shim\n. Try adding -dontwarn com.crashlytics.android.answers.shim\nto your\nProguard` file\n\n\n\n\n\n\n\n\nUnable to open this link error\n\n\n\n\nHappens whenever URI Scheme redirection fails.\n\n\nMake sure you do not have \n$deeplink_path\n or you have a \n$deeplink_path\n which your \nAndroidManfiest.xml\n can accept", 
            "title": "Android"
        }, 
        {
            "location": "/pages/apps/android/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/android/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/android/#install-branch", 
            "text": "Import the Branch SDK to your  build.gradle  apply   plugin :   com . android . application  android   { \n     compileSdkVersion   25 \n     buildToolsVersion   25.0.2 \n     defaultConfig   { \n         applicationId   com.eneff.branchandroid \n         minSdkVersion   15 \n         targetSdkVersion   25 \n         versionCode   1 \n         versionName   1.0 \n         testInstrumentationRunner   android.support.test.runner.AndroidJUnitRunner \n     } \n     buildTypes   { \n         release   { \n             minifyEnabled   false \n             proguardFiles   getDefaultProguardFile ( proguard - android . txt ),   proguard - rules . pro \n         } \n     }  }  dependencies   { \n     compile   fileTree ( dir :   libs ,   include :   [ *. jar ]) \n     androidTestCompile ( com . android . support . test . espresso : espresso - core : 2.2.2 ,   { \n         exclude   group :   com . android . support ,   module :   support - annotations \n     }) \n     compile   com . android . support : appcompat - v7 : 25.2.0 \n     compile   com . android . support : design : 25.2.0       // required       compile   io . branch . sdk . android : library : 2. +        // optional        compile   com . android . support : customtabs : 23.3.0   // Chrome Tab matching       compile   com . google . android . gms : play - services - ads : 9 +   // GAID matching       compile   com . google . android . gms : play - services - appindexing : 9. +   // App indexing  \n     testCompile   junit : junit : 4.12  }", 
            "title": "Install Branch"
        }, 
        {
            "location": "/pages/apps/android/#configure-app", 
            "text": "Add Branch to your  AndroidManifest.xml  ?xml version= 1.0  encoding= utf-8 ?  manifest   xmlns:android= http://schemas.android.com/apk/res/android \n     package= com.eneff.branchandroid \n\n     uses-permission   android:name= android.permission.INTERNET   / \n\n     application \n         android:allowBackup= true           android:name= com.eneff.branchandroid.CustomApplicationClass           android:icon= @mipmap/ic_launcher \n         android:label= @string/app_name \n         android:supportsRtl= true \n         android:theme= @style/AppTheme \n\n         activity \n             android:name= .MainActivity               android:launchMode= singleTask               android:label= @string/app_name \n             android:theme= @style/AppTheme.NoActionBar \n\n             intent-filter \n                 action   android:name= android.intent.action.MAIN   / \n                 category   android:name= android.intent.category.LAUNCHER   / \n             /intent-filter               !-- Branch URI Scheme --               intent-filter                   data   android:scheme= branchandroid   /                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /               /intent-filter                !-- Branch App Links (optional) --               intent-filter   android:autoVerify= true                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /                   data   android:scheme= https   android:host= uobg.app.link   /                   data   android:scheme= https   android:host= uobg-alternate.app.link   /               /intent-filter \n         /activity           !-- Branch init --           meta-data   android:name= io.branch.sdk.BranchKey   android:value= key_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa   /           meta-data   android:name= io.branch.sdk.BranchKey.test   android:value= key_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa   /           meta-data   android:name= io.branch.sdk.TestMode   android:value= false   /            !-- Branch install referrer tracking (optional) --           receiver   android:name= io.branch.referral.InstallListener   android:exported= true               intent-filter                   action   android:name= com.android.vending.INSTALL_REFERRER   /               /intent-filter           /receiver  \n     /application  /manifest     Replace the following with values from your  Branch Dashboard   branchandroid  uobg.app.link  key_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa  key_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/android/#initialize-branch", 
            "text": "Add Branch to your  MainActivity.java    Java  package   com.eneff.branchandroid ;  import   android.content.Intent ;  import   android.os.Bundle ;  import   android.support.design.widget.FloatingActionButton ;  import   android.support.design.widget.Snackbar ;  import   android.support.v7.app.AppCompatActivity ;  import   android.support.v7.widget.Toolbar ;  import   android.util.Log ;  import   android.view.View ;  import   android.view.Menu ;  import   android.view.MenuItem ;  import   org.json.JSONObject ;   import   io.branch.referral.Branch ;  import   io.branch.referral.BranchError ;   public   class   MainActivity   extends   AppCompatActivity   { \n\n     @Override \n     protected   void   onCreate ( Bundle   savedInstanceState )   { \n         super . onCreate ( savedInstanceState ); \n         setContentView ( R . layout . activity_main ); \n     } \n\n     @Override \n     public   void   onStart ()   { \n         super . onStart ();           // Branch init           Branch . getInstance (). initSession ( new   Branch . BranchReferralInitListener ()   {               @Override               public   void   onInitFinished ( JSONObject   referringParams ,   BranchError   error )   {                   if   ( error   ==   null )   {                       Log . i ( BRANCH SDK ,   referringParams . toString ());                   }   else   {                       Log . i ( BRANCH SDK ,   error . getMessage ());                   }               }           },   this . getIntent (). getData (),   this );       }       @Override       public   void   onNewIntent ( Intent   intent )   {           this . setIntent ( intent );       }  }     Kotlin  package   com.eneff.branchandroid  import   android.content.Intent  import   android.os.Bundle  import   android.support.design.widget.FloatingActionButton  import   android.support.design.widget.Snackbar  import   android.support.v7.app.AppCompatActivity  import   android.support.v7.widget.Toolbar  import   android.util.Log  import   android.view.View  import   android.view.Menu  import   android.view.MenuItem  import   org.json.JSONObject   import   io.branch.referral.Branch  import   io.branch.referral.BranchError   class   MainActivity   :   AppCompatActivity ()   { \n\n     override   fun   onCreate ( savedInstanceState :   Bundle ?)   { \n         super . onCreate ( savedInstanceState ) \n         setContentView ( R . layout . activity_main ) \n     } \n\n     override   fun   onStart ()   { \n         super . onStart ()           // Branch init           Branch . getInstance (). initSession ( object   :   BranchReferralInitListener   {               override   fun   onInitFinished ( referringParams :   JSONObject ,   error :   BranchError ?)   {                   if   ( error   ==   null )   {                       Log . e ( BRANCH SDK ,   referringParams . toString )                   }   else   {                       Log . e ( BRANCH SDK ,   error . message )                   }               }           },   this . intent . data ,   this )       }       public   override   fun   onNewIntent ( intent :   Intent )   {           this . intent   =   intent       }  }", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/android/#load-branch", 
            "text": "Add Branch to your  CustomApplicationClass.java    Java  package   com.eneff.branchandroid ;  import   android.app.Application ;  import   io.branch.referral.Branch ;   public   class   CustomApplicationClass   extends   Application   { \n     @Override \n     public   void   onCreate ()   { \n         super . onCreate ();           // Branch logging for debugging           Branch . enableLogging ();            // Branch object initialization           Branch . getAutoInstance ( this );       }  }     Kotlin  package   com.eneff.branchandroid  import   android.app.Application  import   io.branch.referral.Branch   class   CustomApplicationClass   :   Application ()   { \n     override   fun   onCreate ()   { \n         super . onCreate ()           // Branch logging for debugging           Branch . enableLogging ()            // Branch object initialization           Branch . getAutoInstance ( this )       }  }", 
            "title": "Load Branch"
        }, 
        {
            "location": "/pages/apps/android/#test-deep-link", 
            "text": "Create a deep link from the  Branch Dashboard    Delete your app from the device    Compile your app to your device    Paste deep link in  Google Hangouts    Click on the deep link to open your app", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/android/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/android/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share (content or user)    Uses the  Universal Object Properties    Java  BranchUniversalObject   buo   =   new   BranchUniversalObject () \n     . setCanonicalIdentifier ( content/12345 ) \n     . setTitle ( My Content Title ) \n     . setContentDescription ( My Content Description ) \n     . setContentImageUrl ( https://lorempixel.com/400/400 ) \n     . setContentIndexingMode ( BranchUniversalObject . CONTENT_INDEX_MODE . PUBLIC ) \n     . addContentMetadata ( custom_data ,   123 );     Kotlin  val   buo   =   new   BranchUniversalObject () \n     . setCanonicalIdentifier ( content/12345 ) \n     . setTitle ( My Content Title ) \n     . setContentDescription ( My Content Description ) \n     . setContentImageUrl ( https://lorempixel.com/400/400 ) \n     . setContentIndexingMode ( BranchUniversalObject . CONTENT_INDEX_MODE . PUBLIC ) \n     . addContentMetadata ( custom_data ,   123 )", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/android/#create-deep-link", 
            "text": "Creates a deep link URL with encapsulated data    Needs a  Branch Universal Object    Uses  Deep Link Properties    Validate with the  Branch Dashboard    Java  LinkProperties   lp   =   new   LinkProperties () \n     . setChannel ( facebook ) \n     . setFeature ( sharing ) \n     . setCampaign ( content 123 launch ) \n     . setStage ( new user ) \n     . addControlParameter ( \\$deeplink_path ,   content/123 ) \n     . addControlParameter ( \\$desktop_url ,   http://example.com/home ) \n     . addControlParameter ( custom ,   data ) \n     . addControlParameter ( custom_random ,   Long . toString ( Calendar . getInstance (). getTimeInMillis ()));  buo . generateShortUrl ( this ,   lp ,   new   Branch . BranchLinkCreateListener ()   { \n     @Override \n     public   void   onLinkCreate ( String   url ,   BranchError   error )   { \n         if   ( error   ==   null )   { \n             Log . i ( BRANCH SDK ,   got my Branch link to share:    +   url ); \n         } \n     }  });     Kotlin  val   lp   =   new   LinkProperties () \n     . setChannel ( facebook ) \n     . setFeature ( sharing ) \n     . setCampaign ( content 123 launch ) \n     . setStage ( new user ) \n     . addControlParameter ( $deeplink_path ,   content/123 ) \n     . addControlParameter ( $desktop_url ,   http://example.com/home ) \n     . addControlParameter ( custom ,   data ) \n     . addControlParameter ( custom_random ,   Long . toString ( Calendar . getInstance (). getTimeInMillis ()))  buo . generateShortUrl ( this ,   lp ,   BranchLinkCreateListener   {   url ,   error   - \n     if   ( error   ==   null )   { \n         Log . i ( BRANCH SDK ,   got my Branch link to share:    +   url ) \n     }  })", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/android/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Needs a  Branch Universal Object    Uses  Deep Link Properties    Java  LinkProperties   lp   =   new   LinkProperties () \n     . setChannel ( facebook ) \n     . setFeature ( sharing ) \n     . setCampaign ( content 123 launch ) \n     . setStage ( new user ) \n     . addControlParameter ( \\$deeplink_path ,   content/123 ) \n     . addControlParameter ( \\$desktop_url ,   http://example.com/home ) \n     . addControlParameter ( custom ,   data ) \n     . addControlParameter ( custom_random ,   Long . toString ( Calendar . getInstance (). getTimeInMillis ()));  ShareSheetStyle   ss   =   new   ShareSheetStyle ( MainActivity . this ,   Check this out! ,   This stuff is awesome:  ) \n     . setCopyUrlStyle ( ContextCompat . getDrawable ( this ,   android . R . drawable . ic_menu_send ),   Copy ,   Added to clipboard ) \n     . setMoreOptionStyle ( ContextCompat . getDrawable ( this ,   android . R . drawable . ic_menu_search ),   Show more ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . FACEBOOK ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . EMAIL ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . MESSAGE ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . HANGOUT ) \n     . setAsFullWidthStyle ( true ) \n     . setSharingTitle ( Share With );  buo . showShareSheet ( this ,   lp ,    ss ,    new   Branch . BranchLinkShareListener ()   { \n     @Override \n     public   void   onShareLinkDialogLaunched ()   { \n     } \n     @Override \n     public   void   onShareLinkDialogDismissed ()   { \n     } \n     @Override \n     public   void   onLinkShareResponse ( String   sharedLink ,   String   sharedChannel ,   BranchError   error )   { \n     } \n     @Override \n     public   void   onChannelSelected ( String   channelName )   { \n     }  });     Kotlin  var   lp   =   new   LinkProperties () \n     . setChannel ( facebook ) \n     . setFeature ( sharing ) \n     . setCampaign ( content 123 launch ) \n     . setStage ( new user ) \n     . addControlParameter ( $deeplink_path ,   content/123 ) \n     . addControlParameter ( $desktop_url ,   http://example.com/home ) \n     . addControlParameter ( custom ,   data ) \n     . addControlParameter ( custom_random ,   Long . toString ( Calendar . getInstance (). getTimeInMillis ()))  var   ss   =   new   ShareSheetStyle ( this @MainActivity ,   Check this out! ,   This stuff is awesome:  ) \n     . setCopyUrlStyle ( resources . getDrawable ( this ,   android . R . drawable . ic_menu_send ),   Copy ,   Added to clipboard ) \n     . setMoreOptionStyle ( resources . getDrawable ( this ,   android . R . drawable . ic_menu_search ),   Show more ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . FACEBOOK ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . EMAIL ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . MESSAGE ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . HANGOUT ) \n     . setAsFullWidthStyle ( true ) \n     . setSharingTitle ( Share With )  buo . showShareSheet ( this ,   lp ,   ss ,   object   :   Branch . BranchLinkShareListener   { \n     override   fun   onShareLinkDialogLaunched ()   {} \n     override   fun   onShareLinkDialogDismissed ()   {} \n     override   fun   onLinkShareResponse ( sharedLink :   String ,   sharedChannel :   String ,   error :   BranchError )   {} \n     override   fun   onChannelSelected ( channelName :   String )   {}  })", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/android/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Java  // listener (within Main Activity s onStart)  Branch . getInstance (). initSession ( new   Branch . BranchReferralInitListener ()   { \n     @Override \n     public   void   onInitFinished ( JSONObject   referringParams ,   BranchError   error )   { \n         if   ( error   ==   null )   { \n             Log . i ( BRANCH SDK ,   referringParams . toString ()); \n         }   else   { \n             Log . i ( BRANCH SDK ,   error . getMessage ()); \n         } \n     }  },   this . getIntent (). getData (),   this );  // latest  JSONObject   sessionParams   =   Branch . getInstance (). getLatestReferringParams ();  // first  JSONObject   installParams   =   Branch . getInstance (). getFirstReferringParams ();     Kotlin  // listener (within Main Activity s onStart)  Branch . getInstance (). initSession ( object   :   BranchReferralInitListener   { \n     override   fun   onInitFinished ( referringParams :   JSONObject ,   error :   BranchError ?)   { \n         if   ( error   ==   null )   { \n             Log . e ( BRANCH SDK ,   referringParams . toString ) \n         }   else   { \n             Log . e ( BRANCH SDK ,   error . message ) \n         } \n     }  },   this . intent . data ,   this )  // latest  val   sessionParams   =   Branch . getInstance (). latestReferringParams  // first  val   installParams   =   Branch . getInstance (). firstReferringParams", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/android/#navigate-to-content", 
            "text": "Do stuff with the Branch deep link data    Java  // listener (within Main Activity s onStart)  Branch . getInstance (). initSession ( new   Branch . BranchReferralInitListener ()   { \n     @Override \n     public   void   onInitFinished ( JSONObject   referringParams ,   BranchError   error )   { \n         if   ( error   ==   null )   { \n             // option 1: log data \n             Log . i ( BRANCH SDK ,   referringParams . toString ()); \n\n             // option 2: save data to be used later \n             SharedPreferences   preferences   =   . getSharedPreferences ( MyPreferences ,   Context . MODE_PRIVATE ); \n             SharedPreferences . Editor   editor   =   preferences . edit (); \n             editor . putString ( branchData ,   referringParams . toString ( 2 )); \n             editor . commit (); \n\n             // option 3: navigate to page \n             Intent   intent   =   new   Intent (,   OtherActivity . class ); \n             intent . putExtra ( branchData ,   referringParams . toString ( 2 )); \n             startActivity ( intent ); \n\n             // option 4: display data \n             Toast . makeText ( this ,   referringParams . toString ( 2 ),   Toast . LENGTH_LONG ). show (); \n         }   else   { \n             Log . i ( BRANCH SDK ,   error . getMessage ()); \n         } \n     }  },   this . getIntent (). getData (),   this );     Kotlin  // listener (within Main Activity s onStart)  Branch . getInstance (). initSession ( object   :   BranchReferralInitListener   { \n     override   fun   onInitFinished ( referringParams :   JSONObject ,   error :   BranchError ?)   { \n         if   ( error   ==   null )   { \n             // option 1: log data \n             Log . i ( BRANCH SDK ,   referringParams . toString ()) \n\n             // option 2: save data to be used later \n             val   preferences   =    getSharedPreferences ( MyPreferences ,   Context . MODE_PRIVATE ) \n             val   editor   =   preferences . edit () \n             editor . putString ( branchData ,   referringParams . toString ( 2 )) \n             editor . commit () \n\n             // option 3: navigate to page \n             val   intent   =   Intent ( this ,   MainActivity2 :: class . java ) \n             intent . putExtra ( branchData ,   referringParams . toString ( 2 )) \n             startActivity ( intent ) \n\n             // option 4: display data \n             Toast . makeText ( this ,   referringParams . toString ( 2 ),   Toast . LENGTH_SHORT ). show () \n         }   else   { \n             Log . e ( BRANCH SDK ,   error . message ) \n         } \n     }  },   this . intent . data ,   this )", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/android/#display-content", 
            "text": "List content on  Google Search  with  App Indexing    Needs a  Branch Universal Object    Needs  build.gradle  library  compile   com . google . android . gms : play - services - appindexing : 9. +     Java  buo . listOnGoogleSearch ( this );     Kotlin  buo . listOnGoogleSearch ( this )", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/android/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Branch Universal Object    Uses  Track content properties    Validate with the  Branch Dashboard    Java  buo . userCompletedAction ( BranchEvent . VIEW );     Kotlin  buo . userCompletedAction ( BranchEvent . VIEW )", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/android/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    127  character max for user id    Validate with the  Branch Dashboard       Java  // login  Branch . getInstance (). setIdentity ( your_user_id );  // logout  Branch . getInstance (). logout ();     Kotlin  // login  Branch . getInstance (). setIdentity ( your_user_id )  // logout  Branch . getInstance (). logout ()", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/android/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    63  character max for event name    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard    Java  // option 1:  Branch . getInstance (). userCompletedAction ( your_custom_event );  // option 2: with metadata  JSONObject   metadata   =   new   JSONObject ();  try   { \n     metadata . put ( key ,   value );  }   catch   (   JSONException   e   )   {  }  Branch . getInstance (). userCompletedAction ( your_custom_event ,   metadata );     Kotlin  // option 1:  Branch . getInstance (). userCompletedAction ( your_custom_event )  // option 2: with metadata  val   metadata   =   JSONObject ()  metadata . put ( key ,   value )  Branch . getInstance (). userCompletedAction ( your_custom_event ,   metadata )", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/android/#track-commerce", 
            "text": "Registers a custom commerce event    Uses  Track commerce properties  for  Currency  and  Category      Validate with the  Branch Dashboard    Java  TODO:   all  CommerceEvent   commerceEvent   =   new   CommerceEvent ();  commerceEvent . setRevenue ( 1101.99 );  Branch . getInstance (). sendCommerceEvent ( commerceEvent ,   null ,   null );     Kotlin  TODO:   all   values  val   commerceEvent   =   CommerceEvent ()  commerceEvent . revenue   =   1101.99  Branch . getInstance (). sendCommerceEvent ( commerceEvent ,   null ,   null )", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/android/#handle-referrals", 
            "text": "Referral points are obtained from events triggered by users from rules created on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits with the  Referral guide    Redeem credits    Java  Branch . getInstance (). redeemRewards ( 5 );     Kotlin  Branch . getInstance (). redeemRewards ( 5 )       Load credits    Java  Branch . getInstance (). loadRewards ( new   BranchReferralStateChangedListener ()   { \n     @Override \n     public   void   onStateChanged ( boolean   changed ,   Branch . BranchError   error )   { \n         int   credits   =   branch . getCredits (); \n     }  });     Kotlin  Branch . getInstance (). loadRewards   {   changed ,   error   - \n     if   ( error   !=   null )   { \n         Log . i ( BRANCH SDK ,   branch load rewards failed. Caused by -   +   error . message ) \n     }   else   { \n         Log . i ( BRANCH SDK ,   changed =    +   changed ) \n         Log . i ( BRANCH SDK ,   rewards =    +   branch . credits ) \n     }  }       Load history    Java    Branch . getInstance (). getCreditHistory ( new   BranchListResponseListener ()   { \n     public   void   onReceivingResponse ( JSONArray   list ,   Branch . BranchError   error )   { \n         if   ( error   !=   null )   { \n             Log . i ( BRANCH SDK ,   branch load rewards failed. Caused by -   +   error . message ) \n         }   else   { \n             Log . i ( BRANCH SDK ,   list ); \n         } \n     }  });     Kotlin  Branch . getInstance (). getCreditHistory   {   history ,   error   - \n     if   ( error   !=   null )   { \n         Log . i ( BRANCH SDK ,   branch load credit history failed. Caused by -   +   error . message ) \n     }   else   { \n         if   ( history . length ()     0 )   { \n             Log . i ( BRANCH SDK ,   history . toString ( 2 )) \n         }   else   { \n             Log . i ( BRANCH SDK ,   no history found ) \n         } \n     }  }", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/android/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/android/#sample-testing-apps", 
            "text": "Branchsters    Testbed", 
            "title": "Sample testing apps"
        }, 
        {
            "location": "/pages/apps/android/#simulate-an-install", 
            "text": "Need to bypass the device's hardware_id    Set  true  in your  AndroidManifest.xml  meta-data   android:name= io.branch.sdk.TestMode   android:value= true   /     Do not use  TestMode  in production or in the Google Play Store      Uninstall your app from the device    Click on any Branch deep link (will navigate to the fallback URL since the app is not installed)    Reinstall your app    Read deep link data from  Branch.initSession()  for  +is_first_session=true", 
            "title": "Simulate an install"
        }, 
        {
            "location": "/pages/apps/android/#universal-object-best-practices", 
            "text": "To make sure your analytics are correct, and your content is ranking on Spotlight effectively.  Do  Set the  canonicalIdentifier  to a unique, de-duped value across instances of the app  Ensure that the  title ,  contentDescription  and  imageUrl  properly represent the object  Initialize the Branch Universal Object and call userCompletedAction with the  BranchEvent.VIEW  on page load  Call showShareSheet and createShortLink later in the life cycle, when the user takes an action that needs a link  Call the additional object events (purchase, share completed, etc) when the corresponding user action is taken    Do not  Do not set the same  title ,  contentDescription  and  imageUrl  across all objects  Do not wait to initialize the object and register views until the user goes to share  Do not wait to initialize the object until you conveniently need a link  Do not create many objects at once and register views in a  for  loop.", 
            "title": "Universal Object best practices"
        }, 
        {
            "location": "/pages/apps/android/#track-content-properties", 
            "text": "Used for  Track content     Key  Value      BNCRegisterViewEvent  User viewed the object    BNCAddToWishlistEvent  User added the object to their wishlist    BNCAddToCartEvent  User added object to cart    BNCPurchaseInitiatedEvent  User started to check out    BNCPurchasedEvent  User purchased the item    BNCShareInitiatedEvent  User started to share the object    BNCShareCompletedEvent  User completed a share", 
            "title": "Track content properties"
        }, 
        {
            "location": "/pages/apps/android/#using-bnclt-or-a-custom-link-domain", 
            "text": "bnc.lt link domain  activity   android:name= com.yourapp.your_activity \n     !-- App Link your activity to Branch links-- \n     intent-filter   android:autoVerify= true \n         action   android:name= android.intent.action.VIEW   / \n         category   android:name= android.intent.category.DEFAULT   / \n         category   android:name= android.intent.category.BROWSABLE   / \n          data   android:scheme= https   android:host= bnc.lt   android:pathPrefix= /LVeu   /  \n          data   android:scheme= https   android:host= bnc.lt   android:pathPrefix= /eVeu   /  \n     /intent-filter  /activity     custom link domain  activity   android:name= com.yourapp.your_activity \n     !-- App Link your activity to Branch links-- \n     intent-filter   android:autoVerify= true \n         action   android:name= android.intent.action.VIEW   / \n         category   android:name= android.intent.category.DEFAULT   / \n         category   android:name= android.intent.category.BROWSABLE   / \n          data   android:scheme= https   android:host= your.app.com   android:pathPrefix= /LVeu   /  \n          data   android:scheme= https   android:host= your.app.com   android:pathPrefix= /eVeu   /  \n     /intent-filter  /activity     Change the following values to match your  Branch Dashboard   /LVeu  (live)  /eVeu  (test)  your.app.com", 
            "title": "Using bnc.lt or a custom link domain"
        }, 
        {
            "location": "/pages/apps/android/#branch-with-fabric-answers", 
            "text": "If you do not want to import  answers-shim  compile ( io.branch.sdk.android:library:2.+ ) {\n  exclude module:  answers-shim \n}", 
            "title": "Branch with Fabric Answers"
        }, 
        {
            "location": "/pages/apps/android/#deep-link-routes", 
            "text": "Loads a specific URI path from  $deeplink_path  or  $android_deeplink_path    Not recommend (better to route within your  Branch.initSession() )  meta-data   android:name= io.branch.sdk.auto_link_path   android:value= custom/path/*,another/path/   /", 
            "title": "Deep link routes"
        }, 
        {
            "location": "/pages/apps/android/#deep-link-activity-finishes", 
            "text": "Be notified when the deep link Activity finishes  meta-data   android:name= io.branch.sdk.auto_link_request_code   android:value= @integer/AutoDeeplinkRequestCode   /     Java  @Override  protected   void   onActivityResult ( int   requestCode ,   int   resultCode ,   Intent   data )   { \n     super . onActivityResult ( requestCode ,   resultCode ,   data ); \n\n     // Checking if the previous activity is launched on branch Auto deep link. \n     if ( requestCode   ==   getResources (). getInteger ( R . integer . AutoDeeplinkRequestCode )){ \n         //Decide here where  to navigate  when an auto deep linked activity finishes. \n         //For e.g. Go to HomeActivity or a  SignUp Activity. \n         Intent   i   =   new   Intent ( getApplicationContext (),   CreditHistoryActivity . class ); \n         startActivity ( i ); \n     }  }     Kotlin  override   fun   onActivityResult ( requestCode :   Int ,   resultCode :   Int ,   data :   Intent ?)   { \n     super . onActivityResult ( requestCode ,   resultCode ,   data ) \n\n     // Checking if the previous activity is launched on branch Auto deep link. \n     if   ( requestCode   ===   resources . getInteger ( R . integer . AutoDeeplinkRequestCode ))   { \n         //Decide here where  to navigate  when an auto deep linked activity finishes. \n         //For e.g. Go to HomeActivity or a  SignUp Activity. \n         val   i   =   Intent ( applicationContext ,   CreditHistoryActivity :: class . java ) \n         startActivity ( i ) \n     }  }", 
            "title": "Deep link activity finishes"
        }, 
        {
            "location": "/pages/apps/android/#deep-link-from-push-notification", 
            "text": "Deep link to content from push notifications just by adding a Branch link to your result intent    Java  Intent   resultIntent   =   new   Intent ( this ,   TargetClass . class );  intent . putExtra ( branch , http://xxxx.app.link/testlink );  PendingIntent   resultPendingIntent   =    PendingIntent . getActivity ( this ,   0 ,   resultIntent ,   PendingIntent . FLAG_UPDATE_CURRENT );  intent . putExtra ( branch_force_new_session , true );     Kotlin  val   resultIntent   =   Intent ( this ,   TargetClass :: class . java )  intent . putExtra ( branch ,   http://xxxx.app.link/testlink )  val   resultPendingIntent   =   PendingIntent . getActivity ( this ,   0 ,   resultIntent ,   PendingIntent . FLAG_UPDATE_CURRENT )  intent . putExtra ( branch_force_new_session ,   true )", 
            "title": "Deep link from push notification"
        }, 
        {
            "location": "/pages/apps/android/#pre-android-15-support", 
            "text": "Use  Branch SDK 1.14.5    Add to  onStart()  and  onStop()    Java  @Override  protected   void   onStart ()   { \n     super . onStart (); \n     Branch . getInstance ( getApplicationContext ()). initSession ();  }  @Override  protected   void   onStop ()   { \n     super . onStop (); \n     branch . closeSession ();  }     Kotlin  override   fun   onStart ()   { \n     super . onStart () \n     Branch . getInstance (). initSession ()  }  override   fun   onStop ()   { \n     super . onStop () \n     Branch . getInstance (). closeSession ()  }", 
            "title": "Pre Android 15 support"
        }, 
        {
            "location": "/pages/apps/android/#using-the-default-application-class", 
            "text": "If your app does not have an application class  application   android:name= io.branch.referral.BranchApp", 
            "title": "Using the default application class"
        }, 
        {
            "location": "/pages/apps/android/#custom-install-referrer-class", 
            "text": "Google only allows one  BroadcastReceiver  per application    Add to your  AndroidManifest.xml  receiver   android:name= com.BRANCH SDK.CustomInstallListener   android:exported= true \n   intent-filter \n     action   android:name= com.android.vending.INSTALL_REFERRER   / \n   /intent-filter  /receiver     Create an instance of  io.branch.referral.InstallListener  in  onReceive()    Java  InstallListener   listener   =   new   InstallListener ();  listener . onReceive ( context ,   intent );     Kotlin  val   listener   =   InstallListener ()  listener . onReceive ( context ,   intent )", 
            "title": "Custom install referrer class"
        }, 
        {
            "location": "/pages/apps/android/#guaranteed-matching", 
            "text": "Cookie based matching using  Custom Chrome Tabs  compile  com.android.support:customtabs:23.3.0", 
            "title": "Guaranteed matching"
        }, 
        {
            "location": "/pages/apps/android/#matching-through-install-listener", 
            "text": "Enable to pass  link_click_id  from Google Play to Branch through your Install Listener. As broadcasts can arrive at different times, you can set the amount of time Branch should wait for the install listener broadcast before posting    Add to your application class before  getAutoInstance    Java  Branch . setPlayStoreReferrerCheckTimeout ( 5 );     Kotlin  Branch . setPlayStoreReferrerCheckTimeout ( 5 )     Test  adb shell am broadcast -a com.android.vending.INSTALL_REFERRER -n io.branch.branchandroiddemo/io.branch.referral.InstallListener --es  referrer   link_click_id=123", 
            "title": "Matching through install listener"
        }, 
        {
            "location": "/pages/apps/android/#enable-multidexing", 
            "text": "Adding additional dependencies may overrun the dex limit and lead to  NoClassDefFoundError  or  ClassNotFoundException    Add to your  build.gradle  defaultConfig   { \n     multiDexEnabled   true  }     Add to your  Application class  and make sure it extends  MultiDexApplication    Java  @Override  protected   void   attachBaseContext ( Context   base )   { \n     super . attachBaseContext ( base ); \n     MultiDex . install ( this );  }     Kotlin  override   fun   attachBaseContext ( base :   Context ?)   { \n     super . attachBaseContext ( base ) \n     MultiDex . install ( this )  }", 
            "title": "Enable multidexing"
        }, 
        {
            "location": "/pages/apps/android/#invalidclassexception-classloadingerror-or-verificationerror", 
            "text": "Often caused by a  Proguard  bug. Try the latest Proguard version or disable Proguard optimization by setting  -dontoptimize", 
            "title": "InvalidClassException, ClassLoadingError or VerificationError"
        }, 
        {
            "location": "/pages/apps/android/#proguard-warning-or-errors-with-answers-shim-module", 
            "text": "Often caused when you exclude the  answers-shim . Try adding -dontwarn com.crashlytics.android.answers.shim to your Proguard` file", 
            "title": "Proguard warning or errors with answers-shim module"
        }, 
        {
            "location": "/pages/apps/android/#unable-to-open-this-link-error", 
            "text": "Happens whenever URI Scheme redirection fails.  Make sure you do not have  $deeplink_path  or you have a  $deeplink_path  which your  AndroidManfiest.xml  can accept", 
            "title": "Unable to open this link error"
        }, 
        {
            "location": "/pages/apps/adobe-air/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nTest deep link\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nRecommendations\n\n\n\n\n\n\nSample app", 
            "title": "Adobe AIR"
        }, 
        {
            "location": "/pages/apps/adobe-air/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/adobe-air/#configure-branch", 
            "text": "", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/adobe-air/#configure-app", 
            "text": "", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/adobe-air/#initialize-branch", 
            "text": "", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/adobe-air/#test-deep-link", 
            "text": "", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/adobe-air/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/adobe-air/#create-content-reference", 
            "text": "", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/adobe-air/#create-deep-link", 
            "text": "", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/adobe-air/#share-deep-link", 
            "text": "", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/adobe-air/#read-deep-link", 
            "text": "", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/adobe-air/#navigate-to-content", 
            "text": "", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/adobe-air/#display-content", 
            "text": "", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/adobe-air/#track-content", 
            "text": "", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/adobe-air/#track-users", 
            "text": "", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/adobe-air/#track-events", 
            "text": "", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/adobe-air/#track-commerce", 
            "text": "", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/adobe-air/#handle-referrals", 
            "text": "", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/adobe-air/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/adobe-air/#recommendations", 
            "text": "", 
            "title": "Recommendations"
        }, 
        {
            "location": "/pages/apps/adobe-air/#sample-app", 
            "text": "", 
            "title": "Sample app"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\nCordova and Ionic\n\n\n!-- sample config.xml --\n\n\nwidget\n \nid=\ncom.eneff.branch.cordovatestbed\n \nversion=\n0.0.1\n \nxmlns=\nhttp://www.w3.org/ns/widgets\n \nxmlns:cdv=\nhttp://cordova.apache.org/ns/1.0\n\n  \n!-- Branch --\n\n  \nplugin\n \nname=\nbranch-cordova-sdk\n \nspec=\n^2.5.0\n \n/\n\n  \nbranch-config\n\n    \nbranch-key\n \nvalue=\nkey_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3\n \n/\n\n    \nuri-scheme\n \nvalue=\nbranchcordova\n \n/\n\n    \nlink-domain\n \nvalue=\ncordova.app.link\n \n/\n\n    \nios-team-release\n \nvalue=\nPW4Q8885U7\n \n/\n\n  \n/branch-config\n\n\n\n\n\n\n\n\n\nPhoneGap\n\n\n!-- sample config.xml --\n\n\nwidget\n \nid=\ncom.eneff.branch.cordovatestbed\n \nversion=\n1.0.0\n \nxmlns=\nhttp://www.w3.org/ns/widgets\n \nxmlns:gap=\nhttp://phonegap.com/ns/1.0\n\n  \n!-- Branch --\n\n  \nplugin\n \nname=\nbranch-cordova-sdk\n \nspec=\n^2.5.0\n \n/\n\n  \nbranch-config\n\n    \nbranch-key\n \nvalue=\nkey_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3\n \n/\n\n    \nuri-scheme\n \nvalue=\nbranchcordova\n \n/\n\n    \nlink-domain\n \nvalue=\ncordova.app.link\n \n/\n\n    \nios-team-release\n \nvalue=\nPW4Q8885U7\n \n/\n\n  \n/branch-config\n\n\n\n\n\n\n\n\n\nChange the following values to match your \nBranch Dashboard\n\n\n\n\ncom.eneff.branch.cordovatestbed\n\n\nkey_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3\n\n\nbranchcordova\n\n\ncordova.app.link\n\n\nPW4Q8885U7\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nCordova and PhoneGap\n\n\n// sample index.js\n\n\nvar\n \napp\n \n=\n \n{\n\n  \ninitialize\n:\n \nfunction\n()\n \n{\n\n    \nthis\n.\nbindEvents\n();\n\n  \n},\n\n  \nbindEvents\n:\n \nfunction\n()\n \n{\n\n    \ndocument\n.\naddEventListener\n(\ndeviceready\n,\n \nthis\n.\nonDeviceReady\n,\n \nfalse\n);\n\n    \ndocument\n.\naddEventListener\n(\nresume\n,\n \nthis\n.\nonDeviceResume\n,\n \nfalse\n);\n\n  \n},\n\n  \nonDeviceReady\n:\n \nfunction\n()\n \n{\n\n\n    \napp\n.\nbranchInit\n();\n\n\n  \n},\n\n  \nonDeviceResume\n:\n \nfunction\n()\n \n{\n\n\n    \napp\n.\nbranchInit\n();\n\n\n  \n},\n\n\n  \nbranchInit\n:\n \nfunction\n()\n \n{\n\n\n    \n// Branch initialization\n\n\n    \nBranch\n.\ninitSession\n(\nfunction\n(\ndata\n)\n \n{\n\n\n      \n// read deep link data on click\n\n\n      \nalert\n(\nDeep Link Data: \n \n+\n \nJSON\n.\nstringify\n(\ndata\n));\n\n\n    \n});\n\n\n  \n}\n\n\n};\n\n\n\napp\n.\ninitialize\n();\n\n\n\n\n\n\n\n\n\nIonic 1\n\n\n// sample app.js\n\n\nangular\n.\nmodule\n(\nstarter\n,\n \n[\nionic\n,\n \nstarter.controllers\n,\n \nstarter.services\n])\n\n\n\n.\nrun\n(\nfunction\n(\n$ionicPlatform\n)\n \n{\n\n  \n$ionicPlatform\n.\nready\n(\nfunction\n()\n \n{\n\n    \nif\n \n(\nwindow\n.\ncordova\n \n \nwindow\n.\ncordova\n.\nplugins\n \n \nwindow\n.\ncordova\n.\nplugins\n.\nKeyboard\n)\n \n{\n\n      \ncordova\n.\nplugins\n.\nKeyboard\n.\nhideKeyboardAccessoryBar\n(\ntrue\n);\n\n      \ncordova\n.\nplugins\n.\nKeyboard\n.\ndisableScroll\n(\ntrue\n);\n\n    \n}\n\n    \nif\n \n(\nwindow\n.\nStatusBar\n)\n \n{\n\n      \nStatusBar\n.\nstyleDefault\n();\n\n    \n}\n\n\n    \n// Branch\n\n    \n$ionicPlatform\n.\non\n(\ndeviceready\n,\n \nfunction\n()\n \n{\n\n\n      \nbranchInit\n();\n\n\n    \n});\n\n\n    \n$ionicPlatform\n.\non\n(\nresume\n,\n \nfunction\n()\n \n{\n\n\n      \nbranchInit\n();\n\n\n    \n});\n\n\n\n    \nfunction\n \nbranchInit\n()\n \n{\n\n\n      \n// Branch initialization\n\n\n      \nBranch\n.\ninitSession\n(\nfunction\n(\ndata\n)\n \n{\n\n\n        \n// read deep link data on click\n\n\n        \nalert\n(\nDeep Link Data: \n \n+\n \nJSON\n.\nstringify\n(\ndata\n));\n\n\n      \n});\n\n\n    \n}\n\n\n  \n});\n\n\n})\n\n\n// ...\n\n\n\n\n\n\n\n\n\nIonic 2 and 3\n\n\n// sample app.component.js\n\n\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n@angular/core\n;\n\n\nimport\n \n{\n \nPlatform\n \n}\n \nfrom\n \nionic-angular\n;\n\n\nimport\n \n{\n \nStatusBar\n,\n \nSplashscreen\n \n}\n \nfrom\n \nionic-native\n;\n\n\n\nimport\n \n{\n \nTabsPage\n \n}\n \nfrom\n \n../pages/tabs/tabs\n;\n\n\n\n// Branch import\n\n\ndeclare\n \nvar\n \nBranch\n;\n\n\n\n\n@Component\n({\n\n  \ntemplate\n:\n \n`\nion-nav [root]=\nrootPage\n/ion-nav\n`\n\n\n})\n\n\nexport\n \nclass\n \nMyApp\n \n{\n\n  \nrootPage\n \n=\n \nTabsPage\n;\n\n\n  \nconstructor\n(\nplatform\n: \nPlatform\n)\n \n{\n\n    \nplatform\n.\nready\n().\nthen\n(()\n \n=\n \n{\n\n      \nStatusBar\n.\nstyleDefault\n();\n\n      \nSplashscreen\n.\nhide\n();\n\n\n      \nbranchInit\n();\n\n\n    \n});\n\n\n    \nplatform\n.\nresume\n.\nsubscribe\n(()\n \n=\n \n{\n\n\n      \nbranchInit\n();\n\n\n    \n});\n\n\n    \n// Branch initialization\n\n\n    \nconst\n \nbranchInit\n \n=\n \n()\n \n=\n \n{\n\n\n      \n// only on devices\n\n\n      \nif\n \n(\n!\nplatform\n.\nis\n(\ncordova\n))\n \n{\n \nreturn\n \n}\n\n\n      \nBranch\n.\ninitSession\n(\ndata\n \n=\n \n{\n\n\n        \n// read deep link data on click\n\n\n        \nalert\n(\nDeep Link Data: \n \n+\n \nJSON\n.\nstringify\n(\ndata\n));\n\n\n      \n});\n\n\n    \n}\n\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link iOS\n\n\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app \n(\ncordova run ios\n \nphonegap run ios\n \nionic run ios\n)\n\n\n\n\n\n\nPaste deep link in \nApple Notes\n\n\n\n\n\n\nLong press on the deep link \n(not 3D Touch)\n\n\n\n\n\n\nClick \nOpen in \"APP_NAME\"\n to open your app \n(\nexample\n)\n\n\n\n\n\n\n\n\n\n\nTest deep link Android\n\n\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app \n(\ncordova run android\n \nphonegap run android\n \nionic run android\n)\n\n\n\n\n\n\nPaste deep link in \nGoogle Hangouts\n\n\n\n\n\n\nClick on the deep link to open your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nInitialize Branch features\n\n\n\n\n\n\nLoads Branch into your app\n\n\n\n\n\n\nMust be called on \ndeviceready\n and \nresume\n\n\n// for development and debugging only\n\n\nBranch\n.\nsetDebug\n(\ntrue\n)\n\n\n\n// Branch initialization\n\n\nBranch\n.\ninitSession\n(\nfunction\n(\ndata\n)\n \n{\n\n  \n// read deep link data on click\n\n  \nalert\n(\nDeep Link Data: \n \n+\n \nJSON\n.\nstringify\n(\ndata\n))\n\n\n}).\nthen\n(\nfunction\n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share (content or user)\n\n\n\n\n\n\nUses the \nUniversal Object Properties\n\n\n// only canonicalIdentifier is required\n\n\nvar\n \nproperties\n \n=\n \n{\n\n  \ncanonicalIdentifier\n:\n \ncontent/123\n,\n\n  \ncanonicalUrl\n:\n \nhttps://example.com/content/123\n,\n\n  \ntitle\n:\n \nContent 123 Title\n,\n\n  \ncontentDescription\n:\n \nContent 123 Description \n \n+\n \nDate\n.\nnow\n(),\n\n  \ncontentImageUrl\n:\n \nhttp://lorempixel.com/400/400/\n,\n\n  \nprice\n:\n \n12.12\n,\n\n  \ncurrency\n:\n \nGBD\n,\n\n  \ncontentIndexingMode\n:\n \nprivate\n,\n\n  \ncontentMetadata\n:\n \n{\n\n    \ncustom\n:\n \ndata\n,\n\n    \ntesting\n:\n \n123\n,\n\n    \nthis_is\n:\n \ntrue\n\n  \n}\n\n\n}\n\n\n\n// create a branchUniversalObj variable to reference with other Branch methods\n\n\nvar\n \nbranchUniversalObj\n \n=\n \nnull\n\n\nBranch\n.\ncreateBranchUniversalObject\n(\nproperties\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nbranchUniversalObj\n \n=\n \nres\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nCreates a deep link URL with encapsulated data\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n// optional fields\n\n\nvar\n \nanalytics\n \n=\n \n{\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \nfeature\n:\n \nonboarding\n,\n\n  \ncampaign\n:\n \ncontent 123 launch\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\none\n,\n \ntwo\n,\n \nthree\n]\n\n\n}\n\n\n\n// optional fields\n\n\nvar\n \nproperties\n \n=\n \n{\n\n  \n$desktop_url\n:\n \nhttp://www.example.com/desktop\n,\n\n  \n$android_url\n:\n \nhttp://www.example.com/android\n,\n\n  \n$ios_url\n:\n \nhttp://www.example.com/ios\n,\n\n  \n$ipad_url\n:\n \nhttp://www.example.com/ipad\n,\n\n  \n$deeplink_path\n:\n \ncontent/123\n,\n\n  \n$match_duration\n:\n \n2000\n,\n\n  \ncustom_string\n:\n \ndata\n,\n\n  \ncustom_integer\n:\n \nDate\n.\nnow\n(),\n\n  \ncustom_boolean\n:\n \ntrue\n,\n\n  \ncustom_array\n:\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n],\n\n  \ncustom_object\n:\n \n{\n \nrandom\n:\n \ndictionary\n \n}\n\n\n}\n\n\n\nbranchUniversalObj\n.\ngenerateShortUrl\n(\nanalytics\n,\n \nproperties\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n.\nurl\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n// optional fields\n\n\nvar\n \nanalytics\n \n=\n \n{\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \nfeature\n:\n \nonboarding\n,\n\n  \ncampaign\n:\n \ncontent 123 launch\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\none\n,\n \ntwo\n,\n \nthree\n]\n\n\n}\n\n\n\n// optional fields\n\n\nvar\n \nproperties\n \n=\n \n{\n\n  \n$desktop_url\n:\n \nhttp://www.example.com/desktop\n,\n\n  \ncustom_string\n:\n \ndata\n,\n\n  \ncustom_integer\n:\n \nDate\n.\nnow\n(),\n\n  \ncustom_boolean\n:\n \ntrue\n,\n\n  \ncustom_array\n:\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n],\n\n  \ncustom_object\n:\n \n{\n \nrandom\n:\n \ndictionary\n \n}\n\n\n}\n\n\n\nvar\n \nmessage\n \n=\n \nCheck out this link\n\n\n\n// optional listeners (must be called before showShareSheet)\n\n\nbranchUniversalObj\n.\nonShareSheetLaunched\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \n// android only\n\n  \nconsole\n.\nlog\n(\nres\n)\n\n\n})\n\n\nbranchUniversalObj\n.\nonShareSheetDismissed\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nres\n)\n\n\n})\n\n\nbranchUniversalObj\n.\nonLinkShareResponse\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nres\n)\n\n\n})\n\n\nbranchUniversalObj\n.\nonChannelSelected\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \n// android only\n\n  \nconsole\n.\nlog\n(\nres\n)\n\n\n})\n\n\n\n// share sheet\n\n\nbranchUniversalObj\n.\nshowShareSheet\n(\nanalytics\n,\n \nproperties\n,\n \nmessage\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nListener\n\n\n// Branch initialization within your deviceready and resume\n\n\nBranch\n.\ninitSession\n(\nfunction\n(\ndeepLinkData\n)\n \n{\n\n  \n// handler for deep link data on click\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\ndeepLinkData\n))\n\n\n})\n\n\n\n\n\n\n\n\n\nLatest data\n\n\nBranch\n.\ngetLatestReferringParams\n().\nthen\n(\nfunction\n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\nFirst data\n\n\nBranch\n.\ngetFirstReferringParams\n().\nthen\n(\nfunction\n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nHandled within \nBranch.initSession()\n\n\n\n\n\n\nBranch allows you to pass any custom key-value from URLs to your app. Use this data to navigate to content, display a personalized welcome screen, login a user, offer a promotion, etc.\n\n\nBranch\n.\ninitSession\n(\nfunction\n(\ndata\n)\n \n{\n\n  \n// option 1: save to model to be used later\n\n  \nwindow\n.\nlocalStorage\n[\nbranchData\n]\n \n=\n \ndata\n;\n\n\n  \n// option 2: navigate to page\n\n  \nwindow\n.\nlocation\n.\nhref\n \n=\n \n#/content/123\n\n\n  \n// option 3: display data\n\n  \nalert\n(\nJSON\n.\nstringify\n(\ndata\n));\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nList content on \niOS Spotlight\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\nbranchUniversalObj\n.\nlistOnSpotlight\n().\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\nbranchUniversalObj\n.\nregisterView\n().\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n  \n\n\nvar\n \nuserId\n \n=\n \n123456\n\n\nBranch\n.\nsetIdentity\n(\nuserId\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n.\nmessage\n))\n\n\n})\n\n\n\n\n\n\n\n\n\nRemoves the identity of a user\n\n\nBranch\n.\nlogout\n().\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n.\nmessage\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\nvar\n \neventName\n \n=\n \nclicked_on_this\n\n\nvar\n \nmetadata\n \n=\n \n{\n \ncustom_dictionary\n:\n \n123\n,\n \nanything\n:\n \neverything\n \n}\n\n\nBranch\n.\nuserCompletedAction\n(\neventName\n,\n \nmetaData\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n.\nmessage\n))\n\n\n})\n\n\n\n\n\nvar\n \neventName\n \n=\n \nclicked_on_this\n\n\nBranch\n.\nuserCompletedAction\n(\neventName\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n.\nmessage\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nRegisters a custom commerce event\n\n\n\n\n\n\nUses \nTrack commerce properties\n for \nCurrency\n and \nCategory\n \n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n// only revenue is required\n\n\nvar\n \nevent\n \n=\n \n{\n\n  \nrevenue\n:\n \n50.29\n,\n\n  \ncurrency\n:\n \n148\n,\n \n// USD\n\n  \ntransactionID\n:\n \ntransaction id\n,\n\n  \ncoupon\n:\n \ncoupon\n,\n\n  \nshipping\n:\n \n2.22\n,\n\n  \ntax\n:\n \n5.11\n,\n\n  \naffiliation\n:\n \naffiliation\n,\n\n  \nproducts\n:\n \n[\n\n    \n{\n\n      \nsku\n:\n \nu123\n,\n\n      \nname\n:\n \ncactus\n,\n\n      \nprice\n:\n \n4.99\n,\n\n      \nquantity\n:\n \n2\n,\n\n      \nbrand\n:\n \nbrand\n,\n\n      \ncategory\n:\n \n17\n,\n \n// Software\n\n      \nvariant\n:\n \nvariant\n\n    \n},\n\n    \n{\n\n      \nsku\n:\n \nu456\n,\n\n      \nname\n:\n \ngrass\n,\n\n      \nprice\n:\n \n0.00\n,\n\n      \nquantity\n:\n \n1\n\n    \n}\n\n  \n]\n\n\n}\n\n\n\n// optional fields\n\n\nvar\n \nmetadata\n \n=\n \n{\n\n  \ncustom_dictionary\n:\n \n123\n,\n\n  \nanything\n:\n \neverything\n\n\n}\n\n\n\nBranch\n.\nsendCommerceEvent\n(\nevent\n,\n \nmetadata\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nres\n)\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nconsole\n.\nerror\n(\nerr\n)\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n.\nmessage\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral points are obtained from events triggered by users from rules created on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits with the \nReferral guide\n\n\n\n\n\n\nRedeem credits\n\n\nvar\n \namount\n \n=\n \n10\n\n\nvar\n \nbucket\n \n=\n \nthis_bucket\n\n\nBranch\n.\nredeemRewards\n(\namount\n,\n \nbucket\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\nvar\n \namount\n \n=\n \n10\n\n\nBranch\n.\nredeemRewards\n(\namount\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\nLoad credits\n\n\nvar\n \nbucket\n \n=\n \nthis_bucket\n\n\nBranch\n.\nloadRewards\n(\nbucket\n).\nthen\n(\nfunction\n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\nBranch\n.\nloadRewards\n().\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\nLoad history\n\n\nBranch\n.\ncreditHistory\n().\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nRecommendations\n\n\n\n\n\n\nNeed to select \n\"app uses IDFA or GAID\"\n when publishing your app\n\n\n\n\n\n\nBest to enable \nDeep views\n (\nSupported platforms\n)\n\n\n\n\n\n\n\n\n\n\nOptional app config\n\n\n\n\n\n\nAdditional configuration for custom link domains, simulating installs, unique bundle identifiers, etc\n\n\n!-- sample config.xml --\n\n\nwidget\n \nid=\ncom.eneff.branch.cordovatestbed\n \nversion=\n1.0.0\n \nxmlns=\nhttp://www.w3.org/ns/widgets\n \nxmlns:cdv=\nhttp://cordova.apache.org/ns/1.0\n\n  \n!-- Branch --\n\n  \nplugin\n \nname=\nbranch-cordova-sdk\n \nspec=\n~2.4.2\n \n/\n \n!-- optional spec --\n\n  \nbranch-config\n\n    \nbranch-key\n \nvalue=\nkey_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3\n \n/\n\n    \nuri-scheme\n \nvalue=\nbranchcordova\n \n/\n\n    \nlink-domain\n \nvalue=\nyourcustomdomain.com\n \n/\n\n    \nlink-domain\n \nvalue=\ncordova.app.link\n \n/\n  \n!-- optional previous link domain --\n\n    \nlink-domain\n \nvalue=\nbnc.lt\n \n/\n  \n!-- optional previous link domain --\n\n    \nios-team-release\n \nvalue=\nPW4Q8885U7\n \n/\n \n!-- required if iOS app --\n\n    \nios-team-debug\n \nvalue=\nFG35JLLMXX\n \n/\n \n!-- optional --\n\n    \nandroid-prefix\n \nvalue=\n/WSuf\n \n/\n \n!-- optional (for bnc.lt and custom domains) --\n\n    \nandroid-testmode\n \nvalue=\ntrue\n \n/\n \n!-- optional (simulate installs) --\n\n  \n/branch-config\n\n\n\n\n\nwidget\n \nios-CFBundleIdentifier=\ncom.eneff.branch.cordovatestbedios\n \nandroid-packageName=\ncom.eneff.branch.cordovatestbedandroid\n \nversion=\n1.0.0\n \nxmlns=\nhttp://www.w3.org/ns/widgets\n \nxmlns:cdv=\nhttp://cordova.apache.org/ns/1.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimulate an install\n\n\n\n\n\n\nDelete your app\n\n\n\n\n\n\n[iOS]\n iPhone Device -\n Settings -\n Privacy -\n Advertising -\n Reset Advertising Identifier -\n Reset Identifier\n\n\n\n\n\n\n[Android]\n Add \nandroid-testmode value=\"true\" /\n to your \nConfig.xml\n (\nTesting: Optional App Config\n)\n\n\n\n\n\n\nAdd \nBranch.setDebug(true);\n before \nBranch.initSession();\n (\nInitialize Branch Features\n)   \n\n\n\n\n\n\nClick on a deep link to navigate to your \n$fallback_url\n because your app is not installed\n\n\n\n\n\n\nInstall your app\n\n\n\n\n\n\nOpen your app\n\n\n\n\n\n\nRead from \nBranch.initSession(data)\n for \n+is_first_session = true\n \n\n\n\n\n\n\n\n\n\n\nSample app\n\n\n\n\nBranch testbed app\n\n\n\n\n\n\n\n\nUniversal Object properties\n\n\n\n\n\n\nFor \nCreate content reference\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\nLink Property\n\n\n\n\n\n\n\n\n\n\ncanonicalIdentifier\n\n\n\n\n(Required)\n This is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities\n\n\n$canonical_identifier\n\n\n\n\n\n\ncanonicalUrl\n\n\n\n\nThe canonical URL, used for SEO purposes\n\n\n$canonical_url\n\n\n\n\n\n\ntitle\n\n\n\n\nThe name for the piece of content\n\n\n$og_title\n\n\n\n\n\n\ncontentDescription\n\n\n\n\nA description for the content\n\n\n$og_description\n\n\n\n\n\n\ncontentImageUrl\n\n\n\n\nThe image URL for the content. Must be an absolute path\n\n\n$og_image_url\n\n\n\n\n\n\nprice\n\n\n\n\nThe price of the item\n\n\n$amount\n\n\n\n\n\n\ncurrency\n\n\n\n\nThe currency representing the price in ISO 4217 currency code\n\n\n$currency\n\n\n\n\n\n\ncontentIndexingMode\n\n\n\"public\"\n\n\nCan be set to either \n\"public\"\n or \n\"private\"\n. Public indicates that you\u2019d like this content to be discovered by other apps.\n\n\n$publicly_indexable\n\n\n\n\n\n\ncontentMetadata\n\n\n\n\nAny custom key-value data e.g. \n{ \"custom\": \"data\" }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommerce properties\n\n\n\n\n\n\nFor \nTrack commerce\n\n\n\n\n\n\nCategories\n\n\n\n\n\n\n\n\nValue\n\n\nCategory\n\n\nValue\n\n\nCategory\n\n\n\n\n\n\n\n\n\n\n0\n\n\nAnimals \n Pet Supplies\n\n\n11\n\n\nHome \n Garden\n\n\n\n\n\n\n1\n\n\nApparel \n Accessories\n\n\n12\n\n\nLuggage \n Bags\n\n\n\n\n\n\n2\n\n\nArts \n Entertainment\n\n\n13\n\n\nMature\n\n\n\n\n\n\n3\n\n\nBaby \n Toddler\n\n\n14\n\n\nMedia\n\n\n\n\n\n\n4\n\n\nBusiness \n Industrial\n\n\n15\n\n\nOffice Supplies\n\n\n\n\n\n\n5\n\n\nCamera \n Optics\n\n\n16\n\n\nReligious \n Ceremonial\n\n\n\n\n\n\n6\n\n\nElectronics\n\n\n17\n\n\nSoftware\n\n\n\n\n\n\n7\n\n\nFood, Beverage \n Tobacco\n\n\n18\n\n\nSporting Goods\n\n\n\n\n\n\n8\n\n\nFurniture\n\n\n19\n\n\nToys \n Games\n\n\n\n\n\n\n9\n\n\nHardware\n\n\n20\n\n\nVehicles \n Parts\n\n\n\n\n\n\n10\n\n\nHealth \n Beauty\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCurrencies\n\n\n\n\n\n\n\n\nValue\n\n\nCurrency\n\n\nValue\n\n\nCurrency\n\n\nValue\n\n\nCurrency\n\n\n\n\n\n\n\n\n\n\n0\n\n\nAED\n\n\n60\n\n\nHKD\n\n\n120\n\n\nRSD\n\n\n\n\n\n\n1\n\n\nAFN\n\n\n61\n\n\nHNL\n\n\n121\n\n\nRUB\n\n\n\n\n\n\n2\n\n\nALL\n\n\n62\n\n\nHRK\n\n\n122\n\n\nRWF\n\n\n\n\n\n\n3\n\n\nAMD\n\n\n63\n\n\nHTG\n\n\n123\n\n\nSAR\n\n\n\n\n\n\n4\n\n\nANG\n\n\n64\n\n\nHUF\n\n\n124\n\n\nSBD\n\n\n\n\n\n\n5\n\n\nAOA\n\n\n65\n\n\nIDR\n\n\n125\n\n\nSCR\n\n\n\n\n\n\n6\n\n\nARS\n\n\n66\n\n\nILS\n\n\n126\n\n\nSDG\n\n\n\n\n\n\n7\n\n\nAUD\n\n\n67\n\n\nINR\n\n\n127\n\n\nSEK\n\n\n\n\n\n\n8\n\n\nAWG\n\n\n68\n\n\nIQD\n\n\n128\n\n\nSGD\n\n\n\n\n\n\n9\n\n\nAZN\n\n\n69\n\n\nIRR\n\n\n129\n\n\nSHP\n\n\n\n\n\n\n10\n\n\nBAM\n\n\n70\n\n\nISK\n\n\n130\n\n\nSLL\n\n\n\n\n\n\n11\n\n\nBBD\n\n\n71\n\n\nJMD\n\n\n131\n\n\nSOS\n\n\n\n\n\n\n12\n\n\nBDT\n\n\n72\n\n\nJOD\n\n\n132\n\n\nSRD\n\n\n\n\n\n\n13\n\n\nBGN\n\n\n73\n\n\nJPY\n\n\n133\n\n\nSSP\n\n\n\n\n\n\n14\n\n\nBHD\n\n\n74\n\n\nKES\n\n\n134\n\n\nSTD\n\n\n\n\n\n\n15\n\n\nBIF\n\n\n75\n\n\nKGS\n\n\n135\n\n\nSYP\n\n\n\n\n\n\n16\n\n\nBMD\n\n\n76\n\n\nKHR\n\n\n136\n\n\nSZL\n\n\n\n\n\n\n17\n\n\nBND\n\n\n77\n\n\nKMF\n\n\n137\n\n\nTHB\n\n\n\n\n\n\n18\n\n\nBOB\n\n\n78\n\n\nKPW\n\n\n138\n\n\nTJS\n\n\n\n\n\n\n19\n\n\nBOV\n\n\n79\n\n\nKRW\n\n\n139\n\n\nTMT\n\n\n\n\n\n\n20\n\n\nBRL\n\n\n80\n\n\nKWD\n\n\n140\n\n\nTND\n\n\n\n\n\n\n21\n\n\nBSD\n\n\n81\n\n\nKYD\n\n\n141\n\n\nTOP\n\n\n\n\n\n\n22\n\n\nBTN\n\n\n82\n\n\nKZT\n\n\n142\n\n\nTRY\n\n\n\n\n\n\n23\n\n\nBWP\n\n\n83\n\n\nLAK\n\n\n143\n\n\nTTD\n\n\n\n\n\n\n24\n\n\nBYN\n\n\n84\n\n\nLBP\n\n\n144\n\n\nTWD\n\n\n\n\n\n\n25\n\n\nBYR\n\n\n85\n\n\nLKR\n\n\n145\n\n\nTZS\n\n\n\n\n\n\n26\n\n\nBZD\n\n\n86\n\n\nLRD\n\n\n146\n\n\nUAH\n\n\n\n\n\n\n27\n\n\nCAD\n\n\n87\n\n\nLSL\n\n\n147\n\n\nUGX\n\n\n\n\n\n\n28\n\n\nCDF\n\n\n88\n\n\nLYD\n\n\n148\n\n\nUSD\n\n\n\n\n\n\n29\n\n\nCHE\n\n\n89\n\n\nMAD\n\n\n149\n\n\nUSN\n\n\n\n\n\n\n30\n\n\nCHF\n\n\n90\n\n\nMDL\n\n\n150\n\n\nUYI\n\n\n\n\n\n\n31\n\n\nCHW\n\n\n91\n\n\nMGA\n\n\n151\n\n\nUYU\n\n\n\n\n\n\n32\n\n\nCLF\n\n\n92\n\n\nMKD\n\n\n152\n\n\nUZS\n\n\n\n\n\n\n33\n\n\nCLP\n\n\n93\n\n\nMMK\n\n\n153\n\n\nVEF\n\n\n\n\n\n\n34\n\n\nCNY\n\n\n94\n\n\nMNT\n\n\n154\n\n\nVND\n\n\n\n\n\n\n35\n\n\nCOP\n\n\n95\n\n\nMOP\n\n\n155\n\n\nVUV\n\n\n\n\n\n\n36\n\n\nCOU\n\n\n96\n\n\nMRO\n\n\n156\n\n\nWST\n\n\n\n\n\n\n37\n\n\nCRC\n\n\n97\n\n\nMUR\n\n\n157\n\n\nXAF\n\n\n\n\n\n\n38\n\n\nCUC\n\n\n98\n\n\nMVR\n\n\n158\n\n\nXAG\n\n\n\n\n\n\n39\n\n\nCUP\n\n\n99\n\n\nMWK\n\n\n159\n\n\nXAU\n\n\n\n\n\n\n40\n\n\nCVE\n\n\n100\n\n\nMXN\n\n\n160\n\n\nXBA\n\n\n\n\n\n\n41\n\n\nCZK\n\n\n101\n\n\nMXV\n\n\n161\n\n\nXBB\n\n\n\n\n\n\n42\n\n\nDJF\n\n\n102\n\n\nMYR\n\n\n162\n\n\nXBC\n\n\n\n\n\n\n43\n\n\nDKK\n\n\n103\n\n\nMZN\n\n\n163\n\n\nXBD\n\n\n\n\n\n\n44\n\n\nDOP\n\n\n104\n\n\nNAD\n\n\n164\n\n\nXCD\n\n\n\n\n\n\n45\n\n\nDZD\n\n\n105\n\n\nNGN\n\n\n165\n\n\nXDR\n\n\n\n\n\n\n46\n\n\nEGP\n\n\n106\n\n\nNIO\n\n\n166\n\n\nXFU\n\n\n\n\n\n\n47\n\n\nERN\n\n\n107\n\n\nNOK\n\n\n167\n\n\nXOF\n\n\n\n\n\n\n48\n\n\nETB\n\n\n108\n\n\nNPR\n\n\n168\n\n\nXPD\n\n\n\n\n\n\n49\n\n\nEUR\n\n\n109\n\n\nNZD\n\n\n169\n\n\nXPF\n\n\n\n\n\n\n50\n\n\nFJD\n\n\n110\n\n\nOMR\n\n\n170\n\n\nXPT\n\n\n\n\n\n\n51\n\n\nFKP\n\n\n111\n\n\nPAB\n\n\n171\n\n\nXSU\n\n\n\n\n\n\n52\n\n\nGBP\n\n\n112\n\n\nPEN\n\n\n172\n\n\nXTS\n\n\n\n\n\n\n53\n\n\nGEL\n\n\n113\n\n\nPGK\n\n\n173\n\n\nXUA\n\n\n\n\n\n\n54\n\n\nGHS\n\n\n114\n\n\nPHP\n\n\n174\n\n\nXXX\n\n\n\n\n\n\n55\n\n\nGIP\n\n\n115\n\n\nPKR\n\n\n175\n\n\nYER\n\n\n\n\n\n\n56\n\n\nGMD\n\n\n116\n\n\nPLN\n\n\n176\n\n\nZAR\n\n\n\n\n\n\n57\n\n\nGNF\n\n\n117\n\n\nPYG\n\n\n177\n\n\nZMW\n\n\n\n\n\n\n58\n\n\nGTQ\n\n\n118\n\n\nQAR\n\n\n\n\n\n\n\n\n\n\n59\n\n\nGYD\n\n\n119\n\n\nRON\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCordova dependencies\n\n\n\n\n\n\nNode\n\n\n/usr/bin/ruby -e \n$(\ncurl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install\n)\n;\n\nbrew update\n;\n\nbrew install node\n;\n\n\n\n\n\n\n\n\n\nXcode\n\n\n\n\n\n\nInstall \nXcode\n\n\n\n\n\n\nOpen Xcode -\n agree to SDK license agreement\n\n\n\n\n\n\nOpen Xcode -\n Create new Xcode project -\n Run simulator -\n Agree to developer mode on mac\n\n\n\n\n\n\n\n\n\n\nAndroid Studio\n\n\n\n\n\n\nRead \ninstructions\n\n\n\n\n\n\nInstall \nJVM\n\n\n\n\n\n\nInstall \nAndroid Studio\n\n\n\n\n\n\nOpen Android Studio -\n configure -\n appearance/system settings/android sdk -\n android 6.0 -\n Okay\n\n\n\n\n\n\nOpen Android Studio -\n New project -\n ... -\n Run -\n Create new emulator -\n Nexus 6p 23 -\n Finish\n\n\n# add to ~/.bash_profile\n\n\nexport\n \nANDROID_HOME\n=\n$HOME\n/Library/Android/sdk\n\nexport\n \nPATH\n=\n$ANDROID_HOME\n/tools:\n$PATH\n\n\nexport\n \nPATH\n=\n$ANDROID_HOME\n/platform-tools:\n$PATH\n\n\n\n\n\nsource\n ~/.bash_profile\n;\n\n\n\n\n\nandroid update sdk\n;\n\n\n\n\n\n\n\n\n\nInstall Android SDK build-tools 24.0.1\n\n\n\n\n\n\nGenerate Android Keystore\n\n\nkeytool -genkeypair -dname \ncn=Full Name, ou=Business Unit, o=Company, c=US\n -alias release -keypass aaa111 -keystore release.keystore -storepass aaa111 -validity \n10000\n \nkeytool -list -v -keystore release.keystore\n\n\n\n\n\n\n\n\n\n\n\n\nGenymotion \n[optional]\n\n\n\n\n\n\nInstall \nVirtual Box\n\n\n\n\n\n\nInstall \nGenymotion\n\n\n\n\n\n\nGenymotion -\n Add virtual device -\n Google Nexus 6P - 6.0.0 - API 23 -\n Next\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay console logs\n\n\n\n\n\n\niOS Simulator\n\n\n\n\n\n\ncordova run ios;\n\n\n\n\n\n\nSafari -\n Preferences -\n Advance -\n Show Develop menu in menu bar\n\n\n\n\n\n\nSafari -\n Develop -\n Simulator -\n index.html -\n Console\n\n\n\n\n\n\nMay need to unplug and replug device\n\n\n\n\n\n\nMay need to open Xcode and update provisioning profile\n\n\n\n\n\n\n\n\n\n\niOS Xcode\n\n\n\n\n\n\ncordova plugin add cordova-plugin-console;\n\n\n\n\n\n\ncordova build ios;\n\n\n\n\n\n\nXcode -\n APP_LOCATION/platforms/ios/APP_NAME.Xcodeproj\n\n\n\n\n\n\nXcode -\n App -\n General -\n Signing -\n Team\n\n\n\n\n\n\nXcode -\n Product -\n Run\n\n\n\n\n\n\nXcode -\n View -\n Debug Area -\n Activate Console\n\n\n\n\n\n\n\n\n\n\nAndroid Device\n\n\n\n\n\n\nPlug device in\n\n\n\n\n\n\ncordova run android;\n\n\n\n\n\n\nChrome -\n \nchrome://inspect/#devices\n -\n Console\n\n\n\n\n\n\n\n\n\n\nAndroid Genymotion\n\n\n\n\n\n\nGenymotion -\n Start\n\n\n\n\n\n\ncordova run android;\n\n\n\n\n\n\nChrome -\n \nchrome://inspect/#devices\n -\n Console\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpdate the Branch SDK\n\n\n\n\n\n\nTo get the latest improvements and capabilities\n\n\n# terminal\n\ncordova plugin remove io.branch.sdk\ncordova plugin remove branch-cordova-sdk\n\n\n\n\n!-- config.xml --\n\n\nplugin\n \nname=\nbranch-cordova-sdk\n \nspec=\n^2.5.0\n \n/\n\n\n\n\n\n\n\n\n\n\n\n\n\nIncompatible plugins\n\n\n\n\n\n\nThe following plugins will not work with the Branch SDK\n\n\n\n\n\n\nPhoneGap NFC Plugin\n\n\n\n\n\n\nCustom URL scheme\n\n\n\n\n\n\nCordova Universal Links Plugin\n\n\n\n\n\n\nIonic Deeplinks Plugin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCordova errors\n\n\n\n\n\n\nBranch opens and installs your app, so you cannot simulate Branch in the desktop browser\n\n\n\n\n\n\nError\n\n\nORIGINAL EXCEPTION: Branch is not defined\n\n\n\n\nReferenceError: Branch is not defined\n\n\n\n\n\n\n\n\nSolution \n\n\n// Ionic 2/3 - running on browser instead of device\n\n\nif\n \n(\n!\nplatform\n.\nis\n(\ncordova\n))\n \n{\n \nreturn\n \n}\n\n\nBranch\n.\nuserCompletedAction\n(\ndid_this\n)\n\n\n\n\n\n// Ionic 2/3 - missing Branch import\n\n\ndeclare\n \nvar\n \nBranch\n\n\n\n\n\n\n\n\n\n\n\n\n\nProvisioning Profile missing\n\n\n\n\n\n\nError\n\n\n** ARCHIVE FAILED **\n\nThe following build commands failed:\n  Check dependencies\n\n(\n1\n failure\n)\n\nError: Error code \n65\n \nfor\n command: xcodebuild with args: -xcconfig,cordova/build-debug.xcconfig,-workspace,Branch Testing.xcworkspace,-scheme,Branch Testing,-configuration,Debug,-destination,generic/platform\n=\niOS,-archivePath,Branch Testing.xcarchive,archive,CONFIGURATION_BUILD_DIR\n=\nbuild/device,SHARED_PRECOMPS_DIR\n=\nbuild/sharedpch\n\n\n\n\nNo profiles \nfor\n \ncom.eneff.branch.cordova_testbed\n were found\n\n\n\n\n\n\n\n\nSolution  \n\n\n\n\nFix by opening your app in \nXcode\n and launch from there (to select a \nProvisioning Profile\n)\n\n\n\n\n\n\n\n\n\n\n\n\nInvalid bundle id\n\n\n\n\n\n\nError\n\n\nAn invalid value \nXC com eneff branch cordova_testbed\n was provided \nfor\n the parameter \nappIdName\n.\n\n\n\n\nError: Error code \n1\n \nfor\n command: /gradlew with args: cdvBuildDebug,-b,/build.gradle,-Dorg.gradle.daemon\n=\ntrue,-Pandroid.useDeprecatedNdk\n=\ntrue\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\nDon't use \ncordova\n, \nhyphens\n (Android), or \nunderscores\n (iOS) in your bundle id (widget id)", 
            "title": "Cordova PhoneGap Ionic"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#configure-app", 
            "text": "Cordova and Ionic  !-- sample config.xml --  widget   id= com.eneff.branch.cordovatestbed   version= 0.0.1   xmlns= http://www.w3.org/ns/widgets   xmlns:cdv= http://cordova.apache.org/ns/1.0 \n   !-- Branch -- \n   plugin   name= branch-cordova-sdk   spec= ^2.5.0   / \n   branch-config \n     branch-key   value= key_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3   / \n     uri-scheme   value= branchcordova   / \n     link-domain   value= cordova.app.link   / \n     ios-team-release   value= PW4Q8885U7   / \n   /branch-config     PhoneGap  !-- sample config.xml --  widget   id= com.eneff.branch.cordovatestbed   version= 1.0.0   xmlns= http://www.w3.org/ns/widgets   xmlns:gap= http://phonegap.com/ns/1.0 \n   !-- Branch -- \n   plugin   name= branch-cordova-sdk   spec= ^2.5.0   / \n   branch-config \n     branch-key   value= key_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3   / \n     uri-scheme   value= branchcordova   / \n     link-domain   value= cordova.app.link   / \n     ios-team-release   value= PW4Q8885U7   / \n   /branch-config     Change the following values to match your  Branch Dashboard   com.eneff.branch.cordovatestbed  key_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3  branchcordova  cordova.app.link  PW4Q8885U7", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#initialize-branch", 
            "text": "Cordova and PhoneGap  // sample index.js  var   app   =   { \n   initialize :   function ()   { \n     this . bindEvents (); \n   }, \n   bindEvents :   function ()   { \n     document . addEventListener ( deviceready ,   this . onDeviceReady ,   false ); \n     document . addEventListener ( resume ,   this . onDeviceResume ,   false ); \n   }, \n   onDeviceReady :   function ()   {       app . branchInit ();     }, \n   onDeviceResume :   function ()   {       app . branchInit ();     },     branchInit :   function ()   {       // Branch initialization       Branch . initSession ( function ( data )   {         // read deep link data on click         alert ( Deep Link Data:    +   JSON . stringify ( data ));       });     }  };  app . initialize ();     Ionic 1  // sample app.js  angular . module ( starter ,   [ ionic ,   starter.controllers ,   starter.services ])  . run ( function ( $ionicPlatform )   { \n   $ionicPlatform . ready ( function ()   { \n     if   ( window . cordova     window . cordova . plugins     window . cordova . plugins . Keyboard )   { \n       cordova . plugins . Keyboard . hideKeyboardAccessoryBar ( true ); \n       cordova . plugins . Keyboard . disableScroll ( true ); \n     } \n     if   ( window . StatusBar )   { \n       StatusBar . styleDefault (); \n     } \n\n     // Branch \n     $ionicPlatform . on ( deviceready ,   function ()   {         branchInit ();       }); \n\n     $ionicPlatform . on ( resume ,   function ()   {         branchInit ();       });       function   branchInit ()   {         // Branch initialization         Branch . initSession ( function ( data )   {           // read deep link data on click           alert ( Deep Link Data:    +   JSON . stringify ( data ));         });       }     });  })  // ...     Ionic 2 and 3  // sample app.component.js  import   {   Component   }   from   @angular/core ;  import   {   Platform   }   from   ionic-angular ;  import   {   StatusBar ,   Splashscreen   }   from   ionic-native ;  import   {   TabsPage   }   from   ../pages/tabs/tabs ;  // Branch import  declare   var   Branch ;   @Component ({ \n   template :   ` ion-nav [root]= rootPage /ion-nav `  })  export   class   MyApp   { \n   rootPage   =   TabsPage ; \n\n   constructor ( platform :  Platform )   { \n     platform . ready (). then (()   =   { \n       StatusBar . styleDefault (); \n       Splashscreen . hide ();         branchInit ();       }); \n\n     platform . resume . subscribe (()   =   {         branchInit ();       }); \n\n     // Branch initialization       const   branchInit   =   ()   =   {         // only on devices         if   ( ! platform . is ( cordova ))   {   return   }         Branch . initSession ( data   =   {           // read deep link data on click           alert ( Deep Link Data:    +   JSON . stringify ( data ));         });       }     }  }", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#test-deep-link-ios", 
            "text": "Create a deep link from the  Branch Dashboard    Delete your app from the device    Compile your app  ( cordova run ios   phonegap run ios   ionic run ios )    Paste deep link in  Apple Notes    Long press on the deep link  (not 3D Touch)    Click  Open in \"APP_NAME\"  to open your app  ( example )", 
            "title": "Test deep link iOS"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#test-deep-link-android", 
            "text": "Create a deep link from the  Branch Dashboard    Delete your app from the device    Compile your app  ( cordova run android   phonegap run android   ionic run android )    Paste deep link in  Google Hangouts    Click on the deep link to open your app", 
            "title": "Test deep link Android"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#initialize-branch-features", 
            "text": "Loads Branch into your app    Must be called on  deviceready  and  resume  // for development and debugging only  Branch . setDebug ( true )  // Branch initialization  Branch . initSession ( function ( data )   { \n   // read deep link data on click \n   alert ( Deep Link Data:    +   JSON . stringify ( data ))  }). then ( function ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Initialize Branch features"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share (content or user)    Uses the  Universal Object Properties  // only canonicalIdentifier is required  var   properties   =   { \n   canonicalIdentifier :   content/123 , \n   canonicalUrl :   https://example.com/content/123 , \n   title :   Content 123 Title , \n   contentDescription :   Content 123 Description    +   Date . now (), \n   contentImageUrl :   http://lorempixel.com/400/400/ , \n   price :   12.12 , \n   currency :   GBD , \n   contentIndexingMode :   private , \n   contentMetadata :   { \n     custom :   data , \n     testing :   123 , \n     this_is :   true \n   }  }  // create a branchUniversalObj variable to reference with other Branch methods  var   branchUniversalObj   =   null  Branch . createBranchUniversalObject ( properties ). then ( function   ( res )   { \n   branchUniversalObj   =   res \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#create-deep-link", 
            "text": "Creates a deep link URL with encapsulated data    Needs a  Branch Universal Object    Uses  Deep Link Properties    Validate with the  Branch Dashboard  // optional fields  var   analytics   =   { \n   channel :   facebook , \n   feature :   onboarding , \n   campaign :   content 123 launch , \n   stage :   new user , \n   tags :   [ one ,   two ,   three ]  }  // optional fields  var   properties   =   { \n   $desktop_url :   http://www.example.com/desktop , \n   $android_url :   http://www.example.com/android , \n   $ios_url :   http://www.example.com/ios , \n   $ipad_url :   http://www.example.com/ipad , \n   $deeplink_path :   content/123 , \n   $match_duration :   2000 , \n   custom_string :   data , \n   custom_integer :   Date . now (), \n   custom_boolean :   true , \n   custom_array :   [ 1 ,   2 ,   3 ,   4 ,   5 ], \n   custom_object :   {   random :   dictionary   }  }  branchUniversalObj . generateShortUrl ( analytics ,   properties ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res . url ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Needs a  Branch Universal Object    Uses  Deep Link Properties  // optional fields  var   analytics   =   { \n   channel :   facebook , \n   feature :   onboarding , \n   campaign :   content 123 launch , \n   stage :   new user , \n   tags :   [ one ,   two ,   three ]  }  // optional fields  var   properties   =   { \n   $desktop_url :   http://www.example.com/desktop , \n   custom_string :   data , \n   custom_integer :   Date . now (), \n   custom_boolean :   true , \n   custom_array :   [ 1 ,   2 ,   3 ,   4 ,   5 ], \n   custom_object :   {   random :   dictionary   }  }  var   message   =   Check out this link  // optional listeners (must be called before showShareSheet)  branchUniversalObj . onShareSheetLaunched ( function   ( res )   { \n   // android only \n   console . log ( res )  })  branchUniversalObj . onShareSheetDismissed ( function   ( res )   { \n   console . log ( res )  })  branchUniversalObj . onLinkShareResponse ( function   ( res )   { \n   console . log ( res )  })  branchUniversalObj . onChannelSelected ( function   ( res )   { \n   // android only \n   console . log ( res )  })  // share sheet  branchUniversalObj . showShareSheet ( analytics ,   properties ,   message )", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Listener  // Branch initialization within your deviceready and resume  Branch . initSession ( function ( deepLinkData )   { \n   // handler for deep link data on click \n   alert ( Response:    +   JSON . stringify ( deepLinkData ))  })     Latest data  Branch . getLatestReferringParams (). then ( function ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })     First data  Branch . getFirstReferringParams (). then ( function ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#navigate-to-content", 
            "text": "Handled within  Branch.initSession()    Branch allows you to pass any custom key-value from URLs to your app. Use this data to navigate to content, display a personalized welcome screen, login a user, offer a promotion, etc.  Branch . initSession ( function ( data )   { \n   // option 1: save to model to be used later \n   window . localStorage [ branchData ]   =   data ; \n\n   // option 2: navigate to page \n   window . location . href   =   #/content/123 \n\n   // option 3: display data \n   alert ( JSON . stringify ( data ));  });", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#display-content", 
            "text": "List content on  iOS Spotlight    Needs a  Branch Universal Object  branchUniversalObj . listOnSpotlight (). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Branch Universal Object    Validate with the  Branch Dashboard  branchUniversalObj . registerView (). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    Validate with the  Branch Dashboard     var   userId   =   123456  Branch . setIdentity ( userId ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err . message ))  })     Removes the identity of a user  Branch . logout (). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err . message ))  })", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard  var   eventName   =   clicked_on_this  var   metadata   =   {   custom_dictionary :   123 ,   anything :   everything   }  Branch . userCompletedAction ( eventName ,   metaData ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err . message ))  })   var   eventName   =   clicked_on_this  Branch . userCompletedAction ( eventName ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err . message ))  })", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#track-commerce", 
            "text": "Registers a custom commerce event    Uses  Track commerce properties  for  Currency  and  Category      Validate with the  Branch Dashboard  // only revenue is required  var   event   =   { \n   revenue :   50.29 , \n   currency :   148 ,   // USD \n   transactionID :   transaction id , \n   coupon :   coupon , \n   shipping :   2.22 , \n   tax :   5.11 , \n   affiliation :   affiliation , \n   products :   [ \n     { \n       sku :   u123 , \n       name :   cactus , \n       price :   4.99 , \n       quantity :   2 , \n       brand :   brand , \n       category :   17 ,   // Software \n       variant :   variant \n     }, \n     { \n       sku :   u456 , \n       name :   grass , \n       price :   0.00 , \n       quantity :   1 \n     } \n   ]  }  // optional fields  var   metadata   =   { \n   custom_dictionary :   123 , \n   anything :   everything  }  Branch . sendCommerceEvent ( event ,   metadata ). then ( function   ( res )   { \n   console . log ( res ) \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   console . error ( err ) \n   alert ( Error:    +   JSON . stringify ( err . message ))  })", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#handle-referrals", 
            "text": "Referral points are obtained from events triggered by users from rules created on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits with the  Referral guide    Redeem credits  var   amount   =   10  var   bucket   =   this_bucket  Branch . redeemRewards ( amount ,   bucket ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })   var   amount   =   10  Branch . redeemRewards ( amount ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })     Load credits  var   bucket   =   this_bucket  Branch . loadRewards ( bucket ). then ( function ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })   Branch . loadRewards (). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })     Load history  Branch . creditHistory (). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#recommendations", 
            "text": "Need to select  \"app uses IDFA or GAID\"  when publishing your app    Best to enable  Deep views  ( Supported platforms )", 
            "title": "Recommendations"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#optional-app-config", 
            "text": "Additional configuration for custom link domains, simulating installs, unique bundle identifiers, etc  !-- sample config.xml --  widget   id= com.eneff.branch.cordovatestbed   version= 1.0.0   xmlns= http://www.w3.org/ns/widgets   xmlns:cdv= http://cordova.apache.org/ns/1.0 \n   !-- Branch -- \n   plugin   name= branch-cordova-sdk   spec= ~2.4.2   /   !-- optional spec -- \n   branch-config \n     branch-key   value= key_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3   / \n     uri-scheme   value= branchcordova   / \n     link-domain   value= yourcustomdomain.com   / \n     link-domain   value= cordova.app.link   /    !-- optional previous link domain -- \n     link-domain   value= bnc.lt   /    !-- optional previous link domain -- \n     ios-team-release   value= PW4Q8885U7   /   !-- required if iOS app -- \n     ios-team-debug   value= FG35JLLMXX   /   !-- optional -- \n     android-prefix   value= /WSuf   /   !-- optional (for bnc.lt and custom domains) -- \n     android-testmode   value= true   /   !-- optional (simulate installs) -- \n   /branch-config   widget   ios-CFBundleIdentifier= com.eneff.branch.cordovatestbedios   android-packageName= com.eneff.branch.cordovatestbedandroid   version= 1.0.0   xmlns= http://www.w3.org/ns/widgets   xmlns:cdv= http://cordova.apache.org/ns/1.0", 
            "title": "Optional app config"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#simulate-an-install", 
            "text": "Delete your app    [iOS]  iPhone Device -  Settings -  Privacy -  Advertising -  Reset Advertising Identifier -  Reset Identifier    [Android]  Add  android-testmode value=\"true\" /  to your  Config.xml  ( Testing: Optional App Config )    Add  Branch.setDebug(true);  before  Branch.initSession();  ( Initialize Branch Features )       Click on a deep link to navigate to your  $fallback_url  because your app is not installed    Install your app    Open your app    Read from  Branch.initSession(data)  for  +is_first_session = true", 
            "title": "Simulate an install"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#sample-app", 
            "text": "Branch testbed app", 
            "title": "Sample app"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#universal-object-properties", 
            "text": "For  Create content reference     Key  Default  Usage  Link Property      canonicalIdentifier   (Required)  This is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities  $canonical_identifier    canonicalUrl   The canonical URL, used for SEO purposes  $canonical_url    title   The name for the piece of content  $og_title    contentDescription   A description for the content  $og_description    contentImageUrl   The image URL for the content. Must be an absolute path  $og_image_url    price   The price of the item  $amount    currency   The currency representing the price in ISO 4217 currency code  $currency    contentIndexingMode  \"public\"  Can be set to either  \"public\"  or  \"private\" . Public indicates that you\u2019d like this content to be discovered by other apps.  $publicly_indexable    contentMetadata   Any custom key-value data e.g.  { \"custom\": \"data\" }", 
            "title": "Universal Object properties"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#commerce-properties", 
            "text": "For  Track commerce    Categories     Value  Category  Value  Category      0  Animals   Pet Supplies  11  Home   Garden    1  Apparel   Accessories  12  Luggage   Bags    2  Arts   Entertainment  13  Mature    3  Baby   Toddler  14  Media    4  Business   Industrial  15  Office Supplies    5  Camera   Optics  16  Religious   Ceremonial    6  Electronics  17  Software    7  Food, Beverage   Tobacco  18  Sporting Goods    8  Furniture  19  Toys   Games    9  Hardware  20  Vehicles   Parts    10  Health   Beauty         Currencies     Value  Currency  Value  Currency  Value  Currency      0  AED  60  HKD  120  RSD    1  AFN  61  HNL  121  RUB    2  ALL  62  HRK  122  RWF    3  AMD  63  HTG  123  SAR    4  ANG  64  HUF  124  SBD    5  AOA  65  IDR  125  SCR    6  ARS  66  ILS  126  SDG    7  AUD  67  INR  127  SEK    8  AWG  68  IQD  128  SGD    9  AZN  69  IRR  129  SHP    10  BAM  70  ISK  130  SLL    11  BBD  71  JMD  131  SOS    12  BDT  72  JOD  132  SRD    13  BGN  73  JPY  133  SSP    14  BHD  74  KES  134  STD    15  BIF  75  KGS  135  SYP    16  BMD  76  KHR  136  SZL    17  BND  77  KMF  137  THB    18  BOB  78  KPW  138  TJS    19  BOV  79  KRW  139  TMT    20  BRL  80  KWD  140  TND    21  BSD  81  KYD  141  TOP    22  BTN  82  KZT  142  TRY    23  BWP  83  LAK  143  TTD    24  BYN  84  LBP  144  TWD    25  BYR  85  LKR  145  TZS    26  BZD  86  LRD  146  UAH    27  CAD  87  LSL  147  UGX    28  CDF  88  LYD  148  USD    29  CHE  89  MAD  149  USN    30  CHF  90  MDL  150  UYI    31  CHW  91  MGA  151  UYU    32  CLF  92  MKD  152  UZS    33  CLP  93  MMK  153  VEF    34  CNY  94  MNT  154  VND    35  COP  95  MOP  155  VUV    36  COU  96  MRO  156  WST    37  CRC  97  MUR  157  XAF    38  CUC  98  MVR  158  XAG    39  CUP  99  MWK  159  XAU    40  CVE  100  MXN  160  XBA    41  CZK  101  MXV  161  XBB    42  DJF  102  MYR  162  XBC    43  DKK  103  MZN  163  XBD    44  DOP  104  NAD  164  XCD    45  DZD  105  NGN  165  XDR    46  EGP  106  NIO  166  XFU    47  ERN  107  NOK  167  XOF    48  ETB  108  NPR  168  XPD    49  EUR  109  NZD  169  XPF    50  FJD  110  OMR  170  XPT    51  FKP  111  PAB  171  XSU    52  GBP  112  PEN  172  XTS    53  GEL  113  PGK  173  XUA    54  GHS  114  PHP  174  XXX    55  GIP  115  PKR  175  YER    56  GMD  116  PLN  176  ZAR    57  GNF  117  PYG  177  ZMW    58  GTQ  118  QAR      59  GYD  119  RON", 
            "title": "Commerce properties"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#cordova-dependencies", 
            "text": "Node  /usr/bin/ruby -e  $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install ) ; \nbrew update ; \nbrew install node ;     Xcode    Install  Xcode    Open Xcode -  agree to SDK license agreement    Open Xcode -  Create new Xcode project -  Run simulator -  Agree to developer mode on mac      Android Studio    Read  instructions    Install  JVM    Install  Android Studio    Open Android Studio -  configure -  appearance/system settings/android sdk -  android 6.0 -  Okay    Open Android Studio -  New project -  ... -  Run -  Create new emulator -  Nexus 6p 23 -  Finish  # add to ~/.bash_profile  export   ANDROID_HOME = $HOME /Library/Android/sdk export   PATH = $ANDROID_HOME /tools: $PATH  export   PATH = $ANDROID_HOME /platform-tools: $PATH   source  ~/.bash_profile ;   android update sdk ;     Install Android SDK build-tools 24.0.1    Generate Android Keystore  keytool -genkeypair -dname  cn=Full Name, ou=Business Unit, o=Company, c=US  -alias release -keypass aaa111 -keystore release.keystore -storepass aaa111 -validity  10000  \nkeytool -list -v -keystore release.keystore      Genymotion  [optional]    Install  Virtual Box    Install  Genymotion    Genymotion -  Add virtual device -  Google Nexus 6P - 6.0.0 - API 23 -  Next", 
            "title": "Cordova dependencies"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#display-console-logs", 
            "text": "iOS Simulator    cordova run ios;    Safari -  Preferences -  Advance -  Show Develop menu in menu bar    Safari -  Develop -  Simulator -  index.html -  Console    May need to unplug and replug device    May need to open Xcode and update provisioning profile      iOS Xcode    cordova plugin add cordova-plugin-console;    cordova build ios;    Xcode -  APP_LOCATION/platforms/ios/APP_NAME.Xcodeproj    Xcode -  App -  General -  Signing -  Team    Xcode -  Product -  Run    Xcode -  View -  Debug Area -  Activate Console      Android Device    Plug device in    cordova run android;    Chrome -   chrome://inspect/#devices  -  Console      Android Genymotion    Genymotion -  Start    cordova run android;    Chrome -   chrome://inspect/#devices  -  Console", 
            "title": "Display console logs"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#update-the-branch-sdk", 
            "text": "To get the latest improvements and capabilities  # terminal \ncordova plugin remove io.branch.sdk\ncordova plugin remove branch-cordova-sdk  !-- config.xml --  plugin   name= branch-cordova-sdk   spec= ^2.5.0   /", 
            "title": "Update the Branch SDK"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#incompatible-plugins", 
            "text": "The following plugins will not work with the Branch SDK    PhoneGap NFC Plugin    Custom URL scheme    Cordova Universal Links Plugin    Ionic Deeplinks Plugin", 
            "title": "Incompatible plugins"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#cordova-errors", 
            "text": "Branch opens and installs your app, so you cannot simulate Branch in the desktop browser    Error  ORIGINAL EXCEPTION: Branch is not defined  ReferenceError: Branch is not defined    Solution   // Ionic 2/3 - running on browser instead of device  if   ( ! platform . is ( cordova ))   {   return   }  Branch . userCompletedAction ( did_this )   // Ionic 2/3 - missing Branch import  declare   var   Branch       Provisioning Profile missing    Error  ** ARCHIVE FAILED **\n\nThe following build commands failed:\n  Check dependencies ( 1  failure ) \nError: Error code  65   for  command: xcodebuild with args: -xcconfig,cordova/build-debug.xcconfig,-workspace,Branch Testing.xcworkspace,-scheme,Branch Testing,-configuration,Debug,-destination,generic/platform = iOS,-archivePath,Branch Testing.xcarchive,archive,CONFIGURATION_BUILD_DIR = build/device,SHARED_PRECOMPS_DIR = build/sharedpch  No profiles  for   com.eneff.branch.cordova_testbed  were found    Solution     Fix by opening your app in  Xcode  and launch from there (to select a  Provisioning Profile )       Invalid bundle id    Error  An invalid value  XC com eneff branch cordova_testbed  was provided  for  the parameter  appIdName .  Error: Error code  1   for  command: /gradlew with args: cdvBuildDebug,-b,/build.gradle,-Dorg.gradle.daemon = true,-Pandroid.useDeprecatedNdk = true     Solution   Don't use  cordova ,  hyphens  (Android), or  underscores  (iOS) in your bundle id (widget id)", 
            "title": "Cordova errors"
        }, 
        {
            "location": "/pages/apps/mparticle-android/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall Branch\n\n\n\n\n\n\nImport the Branch SDK to your \nbuild.gradle\n\n\napply\n \nplugin\n:\n \ncom\n.\nandroid\n.\napplication\n\n\n\nandroid\n \n{\n\n    \ncompileSdkVersion\n \n25\n\n    \nbuildToolsVersion\n \n25.0.2\n\n    \ndefaultConfig\n \n{\n\n        \napplicationId\n \ncom.eneff.branchandroid\n\n        \nminSdkVersion\n \n15\n\n        \ntargetSdkVersion\n \n25\n\n        \nversionCode\n \n1\n\n        \nversionName\n \n1.0\n\n        \ntestInstrumentationRunner\n \nandroid.support.test.runner.AndroidJUnitRunner\n\n    \n}\n\n    \nbuildTypes\n \n{\n\n        \nrelease\n \n{\n\n            \nminifyEnabled\n \nfalse\n\n            \nproguardFiles\n \ngetDefaultProguardFile\n(\nproguard\n-\nandroid\n.\ntxt\n),\n \nproguard\n-\nrules\n.\npro\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\ndependencies\n \n{\n\n    \ncompile\n \nfileTree\n(\ndir\n:\n \nlibs\n,\n \ninclude\n:\n \n[\n*.\njar\n])\n\n    \nandroidTestCompile\n(\ncom\n.\nandroid\n.\nsupport\n.\ntest\n.\nespresso\n:\nespresso\n-\ncore\n:\n2.2.2\n,\n \n{\n\n        \nexclude\n \ngroup\n:\n \ncom\n.\nandroid\n.\nsupport\n,\n \nmodule\n:\n \nsupport\n-\nannotations\n\n    \n})\n\n    \ncompile\n \ncom\n.\nandroid\n.\nsupport\n:\nappcompat\n-\nv7\n:\n25.2.0\n\n    \ncompile\n \ncom\n.\nandroid\n.\nsupport\n:\ndesign\n:\n25.2.0\n\n\n    \ncompile\n \ncom\n.\nmparticle\n:\nandroid\n-\ncore\n:\n4.\n+\n\n\n\n    \ncompile\n \ncom\n.\nmparticle\n:\nandroid\n-\nbranch\n-\nkit\n:\n4\n+\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnable Branch on mParticle\n\n\n\n\nRetrieve your Branch Key on the \nLink Settings\n page of the Branch dashboard.\n\n\nFrom your \nmParticle dashboard\n navigate to the Services page. (The paper airplane icon on the left side)\n\n\nScroll down to the Branch tile, or enter Branch in the search bar.\n\n\nClick on the Branch tile and then select \"Activate a Platform\".\n\n\nClick on the Android icon, then toggle the status ON.\n\n\nEnter your Branch key in the marked field and click \"Save\".\n\n\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\nAdd Branch to your \nAndroidManifest.xml\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nmanifest\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \npackage=\ncom.eneff.branchandroid\n\n\n    \nuses-permission\n \nandroid:name=\nandroid.permission.INTERNET\n \n/\n\n\n    \napplication\n\n        \nandroid:allowBackup=\ntrue\n\n\n        \nandroid:name=\ncom.eneff.branchandroid.CustomApplicationClass\n\n\n        \nandroid:icon=\n@mipmap/ic_launcher\n\n        \nandroid:label=\n@string/app_name\n\n        \nandroid:supportsRtl=\ntrue\n\n        \nandroid:theme=\n@style/AppTheme\n\n\n        \nactivity\n\n            \nandroid:name=\n.MainActivity\n\n\n            \nandroid:launchMode=\nsingleTask\n\n\n            \nandroid:label=\n@string/app_name\n\n            \nandroid:theme=\n@style/AppTheme.NoActionBar\n\n\n            \nintent-filter\n\n                \naction\n \nandroid:name=\nandroid.intent.action.MAIN\n \n/\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.LAUNCHER\n \n/\n\n            \n/intent-filter\n\n\n\n            \n!-- Branch URI Scheme --\n\n\n            \nintent-filter\n\n\n                \ndata\n \nandroid:scheme=\nbranchandroid\n \n/\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n            \n/intent-filter\n\n\n\n\n            \n!-- Branch App Links (optional) --\n\n\n            \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n                \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nuobg.app.link\n \n/\n\n\n            \n/intent-filter\n\n\n        \n/activity\n\n\n    \n/application\n\n\n\n/manifest\n\n\n\n\n\n\n\n\n\nReplace the following with values from your \nBranch Dashboard\n\n\n\n\nbranchandroid\n\n\nuobg.app.link\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\nAs with any kit, mParticle will automatically handle initializing Branch sessions. At this point you should start seeing your Branch session data - including installs, re-opens, and any custom events - in your Branch dashboard.\n\n\n\n\n\n\nHandle Incoming Links\n\n\nOpen the \nActivity\n for which you registered the \nIntent Filter\n in the previous section, and hook into the \nonStart\n lifecycle method by adding this override:\n\n\n@Override\n\n\npublic\n \nvoid\n \nonStart\n()\n \n{\n\n\n  \nMParticle\n.\ngetInstance\n().\ncheckForDeepLink\n(\nnew\n \nDeepLinkListener\n()\n \n{\n\n\n    \n@Override\n\n\n    \npublic\n \nvoid\n \nonResult\n(\nDeepLinkResult\n \nresult\n)\n \n{\n\n\n      \n// Check for the existence of a given key in the link data and route accordingly.\n\n\n      \ntry\n \n{\n\n\n        \nif\n \n((\nresult\n.\ngetParameters\n().\nhas\n(\nmy_custom_key\n))\n \n \n(\nresult\n.\ngetParameters\n().\nget\n(\nmy_custom_key\n).\nequals\n(\ncustom value\n)))\n \n{\n\n\n          \n// Send user to intended path\n\n\n        \n}\n\n\n      \n}\n \ncatch\n \n(\nJSONException\n \ne\n)\n \n{\n\n\n      \n}\n\n\n    \n}\n\n\n\n\n    \n@Override\n\n\n    \npublic\n \nvoid\n \nonError\n(\nDeepLinkError\n \nerror\n)\n \n{\n\n\n      \n// If an error occurred, it will be surfaced via a DeepLinkError.\n\n\n      \nLog\n.\nd\n(\nmy log tag\n,\n \nerror\n.\ntoString\n());\n\n\n    \n}\n\n\n  \n});\n\n\n}\n\n\n\n\n\n\n\n\n\nTest deep link\n\n\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app to your device\n\n\n\n\n\n\nPaste deep link in \nGoogle Hangouts\n\n\n\n\n\n\nClick on the deep link to open your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n    \n// The identifier is what Branch will use to de-dupe the content across many different Universal Objects\n\n   \n.\nsetCanonicalIdentifier\n(\nitem/12345\n)\n\n\n   \n// The canonical URL for SEO purposes (optional)\n\n   \n.\nsetCanonicalUrl\n(\nhttps://branch.io/deepviews\n)\n\n\n   \n// This is where you define the open graph structure and how the object will appear on Facebook or in a deepview\n\n   \n.\nsetTitle\n(\nMy Content Title\n)\n\n   \n.\nsetContentDescription\n(\nMy Content Description\n)\n\n   \n.\nsetContentImageUrl\n(\nhttps://example.com/mycontent-12345.png\n)\n\n\n   \n// You use this to specify whether this content can be discovered publicly - default is public\n\n   \n.\nsetContentIndexingMode\n(\nBranchUniversalObject\n.\nCONTENT_INDEX_MODE\n.\nPUBLIC\n)\n\n\n    \n// Here is where you can add custom keys/values to the deep link data\n\n   \n.\naddContentMetadata\n(\nproperty1\n,\n \nblue\n)\n\n   \n.\naddContentMetadata\n(\nproperty2\n,\n \nred\n);\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\nLinkProperties\n \nlinkProperties\n \n=\n \nnew\n \nLinkProperties\n()\n\n   \n.\nsetChannel\n(\nfacebook\n)\n\n   \n.\nsetFeature\n(\nsharing\n)\n\n   \n.\naddControlParameter\n(\n$desktop_url\n,\n \nhttp://example.com/home\n)\n\n   \n.\naddControlParameter\n(\n$ios_url\n,\n \nhttp://example.com/ios\n);\n\n\n\nbranchUniversalObject\n.\ngenerateShortUrl\n(\nthis\n,\n \nlinkProperties\n,\n \nnew\n     \nBranchLinkCreateListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonLinkCreate\n(\nString\n \nurl\n,\n \nBranchError\n \nerror\n)\n \n{\n\n       \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n           \nLog\n.\ni\n(\nMyApp\n,\n \ngot my Branch link to share: \n \n+\n \nurl\n);\n\n       \n}\n\n    \n}\n\n\n});\n                   \n\n\n\n\n\n\n\n\nShare deep link\n\n\nShareSheetStyle\n \nshareSheetStyle\n \n=\n \nnew\n \nShareSheetStyle\n(\nMainActivity\n.\nthis\n,\n \nCheck this out!\n,\n \nThis stuff is awesome: \n)\n\n    \n.\nsetCopyUrlStyle\n(\ngetResources\n().\ngetDrawable\n(\nandroid\n.\nR\n.\ndrawable\n.\nic_menu_send\n),\n \nCopy\n,\n \nAdded to clipboard\n)\n\n    \n.\nsetMoreOptionStyle\n(\ngetResources\n().\ngetDrawable\n(\nandroid\n.\nR\n.\ndrawable\n.\nic_menu_search\n),\n \nShow more\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nFACEBOOK\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nEMAIL\n)\n\n    \n.\nsetAsFullWidthStyle\n(\ntrue\n)\n\n    \n.\nsetSharingTitle\n(\nShare With\n);\n\n\n\nbranchUniversalObject\n.\nshowShareSheet\n(\nthis\n,\n \n                                      \nlinkProperties\n,\n\n                                      \nshareSheetStyle\n,\n\n                                       \nnew\n \nBranch\n.\nBranchLinkShareListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonShareLinkDialogLaunched\n()\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonShareLinkDialogDismissed\n()\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonLinkShareResponse\n(\nString\n \nsharedLink\n,\n \nString\n \nsharedChannel\n,\n \nBranchError\n \nerror\n)\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonChannelSelected\n(\nString\n \nchannelName\n)\n \n{\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack users\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n(\ngetApplicationContext\n());\n\n\nbranch\n.\nsetIdentity\n(\nyour\n \nuser\n \nid\n);\n \n// your user id should not exceed 127 characters\n\n\n\n\n\nBranch\n.\ngetInstance\n(\ngetApplicationContext\n()).\nlogout\n();\n\n\n\n\n\n\n\n\n\nTrack events\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n(\ngetApplicationContext\n());\n\n\nbranch\n.\nuserCompletedAction\n(\nyour_custom_event\n);\n\n\n\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n(\ngetApplicationContext\n());\n\n\nbranch\n.\nuserCompletedAction\n(\nyour_custom_event\n,\n \n(\nJSONObject\n)\nappState\n);\n \n// same 63 characters max limit\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nRecommendations\n\n\n\n\n\n\nSimulate an install\n\n\n\n\n\n\nSample app\n\n\n\n\n\n\nAndroid instant app", 
            "title": "mParticle Android"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#install-branch", 
            "text": "Import the Branch SDK to your  build.gradle  apply   plugin :   com . android . application  android   { \n     compileSdkVersion   25 \n     buildToolsVersion   25.0.2 \n     defaultConfig   { \n         applicationId   com.eneff.branchandroid \n         minSdkVersion   15 \n         targetSdkVersion   25 \n         versionCode   1 \n         versionName   1.0 \n         testInstrumentationRunner   android.support.test.runner.AndroidJUnitRunner \n     } \n     buildTypes   { \n         release   { \n             minifyEnabled   false \n             proguardFiles   getDefaultProguardFile ( proguard - android . txt ),   proguard - rules . pro \n         } \n     }  }  dependencies   { \n     compile   fileTree ( dir :   libs ,   include :   [ *. jar ]) \n     androidTestCompile ( com . android . support . test . espresso : espresso - core : 2.2.2 ,   { \n         exclude   group :   com . android . support ,   module :   support - annotations \n     }) \n     compile   com . android . support : appcompat - v7 : 25.2.0 \n     compile   com . android . support : design : 25.2.0 \n\n     compile   com . mparticle : android - core : 4. +       compile   com . mparticle : android - branch - kit : 4 +  }", 
            "title": "Install Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#enable-branch-on-mparticle", 
            "text": "Retrieve your Branch Key on the  Link Settings  page of the Branch dashboard.  From your  mParticle dashboard  navigate to the Services page. (The paper airplane icon on the left side)  Scroll down to the Branch tile, or enter Branch in the search bar.  Click on the Branch tile and then select \"Activate a Platform\".  Click on the Android icon, then toggle the status ON.  Enter your Branch key in the marked field and click \"Save\".", 
            "title": "Enable Branch on mParticle"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#configure-app", 
            "text": "Add Branch to your  AndroidManifest.xml  ?xml version= 1.0  encoding= utf-8 ?  manifest   xmlns:android= http://schemas.android.com/apk/res/android \n     package= com.eneff.branchandroid \n\n     uses-permission   android:name= android.permission.INTERNET   / \n\n     application \n         android:allowBackup= true           android:name= com.eneff.branchandroid.CustomApplicationClass           android:icon= @mipmap/ic_launcher \n         android:label= @string/app_name \n         android:supportsRtl= true \n         android:theme= @style/AppTheme \n\n         activity \n             android:name= .MainActivity               android:launchMode= singleTask               android:label= @string/app_name \n             android:theme= @style/AppTheme.NoActionBar \n\n             intent-filter \n                 action   android:name= android.intent.action.MAIN   / \n                 category   android:name= android.intent.category.LAUNCHER   / \n             /intent-filter               !-- Branch URI Scheme --               intent-filter                   data   android:scheme= branchandroid   /                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /               /intent-filter                !-- Branch App Links (optional) --               intent-filter   android:autoVerify= true                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /                   data   android:scheme= https   android:host= uobg.app.link   /               /intent-filter           /activity \n\n     /application  /manifest     Replace the following with values from your  Branch Dashboard   branchandroid  uobg.app.link", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#initialize-branch", 
            "text": "As with any kit, mParticle will automatically handle initializing Branch sessions. At this point you should start seeing your Branch session data - including installs, re-opens, and any custom events - in your Branch dashboard.", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#handle-incoming-links", 
            "text": "Open the  Activity  for which you registered the  Intent Filter  in the previous section, and hook into the  onStart  lifecycle method by adding this override:  @Override  public   void   onStart ()   {     MParticle . getInstance (). checkForDeepLink ( new   DeepLinkListener ()   {       @Override       public   void   onResult ( DeepLinkResult   result )   {         // Check for the existence of a given key in the link data and route accordingly.         try   {           if   (( result . getParameters (). has ( my_custom_key ))     ( result . getParameters (). get ( my_custom_key ). equals ( custom value )))   {             // Send user to intended path           }         }   catch   ( JSONException   e )   {         }       }        @Override       public   void   onError ( DeepLinkError   error )   {         // If an error occurred, it will be surfaced via a DeepLinkError.         Log . d ( my log tag ,   error . toString ());       }     });  }", 
            "title": "Handle Incoming Links"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#test-deep-link", 
            "text": "Create a deep link from the  Branch Dashboard    Delete your app from the device    Compile your app to your device    Paste deep link in  Google Hangouts    Click on the deep link to open your app", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#create-content-reference", 
            "text": "BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n     // The identifier is what Branch will use to de-dupe the content across many different Universal Objects \n    . setCanonicalIdentifier ( item/12345 ) \n\n    // The canonical URL for SEO purposes (optional) \n    . setCanonicalUrl ( https://branch.io/deepviews ) \n\n    // This is where you define the open graph structure and how the object will appear on Facebook or in a deepview \n    . setTitle ( My Content Title ) \n    . setContentDescription ( My Content Description ) \n    . setContentImageUrl ( https://example.com/mycontent-12345.png ) \n\n    // You use this to specify whether this content can be discovered publicly - default is public \n    . setContentIndexingMode ( BranchUniversalObject . CONTENT_INDEX_MODE . PUBLIC ) \n\n     // Here is where you can add custom keys/values to the deep link data \n    . addContentMetadata ( property1 ,   blue ) \n    . addContentMetadata ( property2 ,   red );", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#create-deep-link", 
            "text": "LinkProperties   linkProperties   =   new   LinkProperties () \n    . setChannel ( facebook ) \n    . setFeature ( sharing ) \n    . addControlParameter ( $desktop_url ,   http://example.com/home ) \n    . addControlParameter ( $ios_url ,   http://example.com/ios );  branchUniversalObject . generateShortUrl ( this ,   linkProperties ,   new       BranchLinkCreateListener ()   { \n     @Override \n     public   void   onLinkCreate ( String   url ,   BranchError   error )   { \n        if   ( error   ==   null )   { \n            Log . i ( MyApp ,   got my Branch link to share:    +   url ); \n        } \n     }  });", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#share-deep-link", 
            "text": "ShareSheetStyle   shareSheetStyle   =   new   ShareSheetStyle ( MainActivity . this ,   Check this out! ,   This stuff is awesome:  ) \n     . setCopyUrlStyle ( getResources (). getDrawable ( android . R . drawable . ic_menu_send ),   Copy ,   Added to clipboard ) \n     . setMoreOptionStyle ( getResources (). getDrawable ( android . R . drawable . ic_menu_search ),   Show more ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . FACEBOOK ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . EMAIL ) \n     . setAsFullWidthStyle ( true ) \n     . setSharingTitle ( Share With );  branchUniversalObject . showShareSheet ( this ,  \n                                       linkProperties , \n                                       shareSheetStyle , \n                                        new   Branch . BranchLinkShareListener ()   { \n     @Override \n     public   void   onShareLinkDialogLaunched ()   { \n     } \n     @Override \n     public   void   onShareLinkDialogDismissed ()   { \n     } \n     @Override \n     public   void   onLinkShareResponse ( String   sharedLink ,   String   sharedChannel ,   BranchError   error )   { \n     } \n     @Override \n     public   void   onChannelSelected ( String   channelName )   { \n     }  });", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#read-deep-link", 
            "text": "", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#navigate-to-content", 
            "text": "", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#display-content", 
            "text": "", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#track-content", 
            "text": "", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#track-users", 
            "text": "Branch   branch   =   Branch . getInstance ( getApplicationContext ());  branch . setIdentity ( your   user   id );   // your user id should not exceed 127 characters   Branch . getInstance ( getApplicationContext ()). logout ();", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#track-events", 
            "text": "Branch   branch   =   Branch . getInstance ( getApplicationContext ());  branch . userCompletedAction ( your_custom_event );   Branch   branch   =   Branch . getInstance ( getApplicationContext ());  branch . userCompletedAction ( your_custom_event ,   ( JSONObject ) appState );   // same 63 characters max limit", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#track-commerce", 
            "text": "", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#handle-referrals", 
            "text": "", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#recommendations", 
            "text": "", 
            "title": "Recommendations"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#simulate-an-install", 
            "text": "", 
            "title": "Simulate an install"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#sample-app", 
            "text": "", 
            "title": "Sample app"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#android-instant-app", 
            "text": "", 
            "title": "Android instant app"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure bundle identifier\n\n\n\n\n\n\nBundle Id matches \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure associated domains\n\n\n\n\n\n\nAdd \nBranch Dashboard\n values\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure entitlements\n\n\n\n\n\n\nConfirm entitlements are within target\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure info.pList\n\n\n\n\n\n\nAdd \nBranch Dashboard\n values\n\n\n\n\n\n\n\n\n\n\n\n\nConfirm app prefix\n\n\n\n\n\n\nFrom your \nApple Developer Account\n\n\n\n\n\n\n\n\n\n\n\n\nInstall Branch Kit\n\n\n\n\n\n\nOption 1: \nCocoaPods\n\n\nplatform :ios, \n8.0\n\n\ntarget \nAPP_NAME\n \ndo\n\n  \n# if swift\n\n  use_frameworks!\n\n\n  pod \nmParticle-BranchMetrics\n\n\nend\n\n\n\n\n\n\n\n\nOption 2: \nCarthage\n\n\ngithub \nmparticle-integrations/mparticle-apple-integration-branchmetrics\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnable Branch on mParticle\n\n\n\n\nRetrieve your Branch Key on the \nLink Settings\n page of the Branch dashboard.\n\n\nFrom your \nmParticle dashboard\n navigate to the Services page. (The paper airplane icon on the left side)\n\n\nScroll down to the Branch tile, or enter Branch in the search bar.\n\n\nClick on the Branch tile and then select \"Activate a Platform\".\n\n\nClick on the Apple icon, then toggle the status ON.\n\n\nEnter your Branch key in the marked field and click \"Save\".\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\nAs with any kit, mParticle will automatically handle initializing Branch sessions. At this point you should start seeing your Branch session data - including installs, re-opens, and any custom events - in your Branch dashboard.\n\n\n\n\n\n\nHandle Incoming Links\n\n\n\n\n\n\nSwift 3.0\n\n\nimport\n \nUIKit\n\n\n\n@UIApplicationMain\n\n\nclass\n \nAppDelegate\n:\n \nUIResponder\n,\n \nUIApplicationDelegate\n \n{\n\n\n\nvar\n \nwindow\n:\n \nUIWindow\n?\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidFinishLaunchingWithOptions\n \nlaunchOptions\n:\n \n[\nUIApplicationLaunchOptionsKey\n:\n \nAny\n]?)\n \n-\n \nBool\n \n{\n\n\n  \n// This observer must be added before initializing the mParticle session.\n\n  \n// Failure to do so will cause some deep links to be missed.\n\n\n  \nNotificationCenter\n.\ndefault\n.\naddObserver\n(\nself\n,\n \nselector\n:\n \n#selector\n(\nhandleKitDidBecomeActive\n(\n_\n:)),\n \nname\n:\n \nNotification\n.\nName\n.\nmParticleKitDidBecomeActive\n,\n \nobject\n:\n \nnil\n)\n\n\n\n  \nreturn\n \ntrue\n\n\n}\n\n\n\nfunc\n \nhandleKitDidBecomeActive\n(\n_\n \nnotification\n:\n \nNotification\n)\n \n{\n\n\n    \nguard\n \nlet\n \nkitNumber\n \n=\n \nnotification\n.\nuserInfo\n?[\nmParticleKitInstanceKey\n]\n \nas\n?\n \nNSNumber\n \nelse\n \n{\n \nreturn\n \n}\n\n\n    \nguard\n \nlet\n \nkitInstance\n \n=\n \nMPKitInstance\n(\nrawValue\n:\n \nkitNumber\n.\nuintValue\n)\n \nelse\n \n{\n \nreturn\n \n}\n\n\n\n\n    \nswitch\n \nkitInstance\n \n{\n\n\n        \ncase\n \n.\nbranchMetrics\n:\n\n\n            \ncheckForDeeplink\n()\n\n\n        \ndefault\n:\n\n\n            \nbreak\n\n\n    \n}\n\n\n}\n\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ncontinue\n \nuserActivity\n:\n \nNSUserActivity\n,\n \nrestorationHandler\n:\n \n@\nescaping\n \n([\nAny\n]?)\n \n-\n \nVoid\n)\n \n-\n \nBool\n \n{\n\n\n    \ncheckForDeeplink\n()\n\n\n    \nreturn\n \ntrue\n\n\n}\n\n\n\nfunc\n \ncheckForDeeplink\n()\n \n{\n\n\n    \nMParticle\n.\nsharedInstance\n().\ncheckForDeferredDeepLink\n \n{\n \nlinkInfo\n,\n \nerror\n \nin\n\n\n        \n// A few typical scenarios where this block would be invoked:\n\n\n        \n//\n\n\n        \n// (1) Base case:\n\n\n        \n//     - User does not tap on a link, and then opens the app (either after a fresh install or not)\n\n\n        \n//     - This block will be invoked with Branch Metrics\n response indicating that this user did not tap on a link\n\n\n        \n//\n\n\n        \n// (2) Deferred deep link:\n\n\n        \n//     - User without the app installed taps on a link\n\n\n        \n//     - User is redirected from Branch Metrics to the App Store and installs the app\n\n\n        \n//     - User opens the app\n\n\n        \n//     - This block will be invoked with Branch Metrics\n response containing the details of the link\n\n\n        \n//\n\n\n        \n// (3) Deep link with app installed:\n\n\n        \n//     - User with the app already installed taps on a link\n\n\n        \n//     - Application opens via openUrl/continueUserActivity, mParticle forwards launch options etc to Branch\n\n\n        \n//     - This block will be invoked with Branch Metrics\n response containing the details of the link\n\n\n        \n//\n\n\n        \n// If the user navigates away from the app without killing it, this block could be invoked several times:\n\n\n        \n// once for the initial launch, and then again each time the user taps on a link to re-open the app.\n\n\n\n\n        \nguard\n \nlet\n \nlinkInfo\n \n=\n \nlinkInfo\n \nelse\n \n{\n \nreturn\n \n}\n\n\n\n\n        \nprint\n(\nparams:\n \n+\n \nlinkInfo\n)\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n#import \nAppDelegate.h\n\n\n#import \nBranch/Branch.h\n\n\n\n@interface\n \nAppDelegate\n \n()\n\n\n\n@end\n\n\n\n@implementation\n \nAppDelegate\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidFinishLaunchingWithOptions:\n(\nNSDictionary\n \n*\n)\nlaunchOptions\n \n{\n\n\n  \n// This observer must be added before initializing the mParticle session.\n\n  \n// Failure to do so will cause some deep links to be missed.\n\n\n  \nNSNotificationCenter\n \n*\nnotificationCenter\n \n=\n \n[\nNSNotificationCenter\n \ndefaultCenter\n];\n\n\n  \n[\nnotificationCenter\n \naddObserver\n:\nself\n\n\n                         \nselector\n:\n@selector\n(\nhandleKitDidBecomeActive\n:)\n\n\n                             \nname\n:\nmParticleKitDidBecomeActiveNotification\n\n\n                           \nobject\n:\nnil\n];\n\n\n\n  \nreturn\n \nYES\n;\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\nhandleKitDidBecomeActive:\n(\nNSNotification\n \n*\n)\nnotification\n \n{\n\n\n  \nNSDictionary\n \n*\nuserInfo\n \n=\n \n[\nnotification\n \nuserInfo\n];\n\n\n  \nNSNumber\n \n*\nkitNumber\n \n=\n \nuserInfo\n[\nmParticleKitInstanceKey\n];\n\n\n  \nMPKitInstance\n \nkitInstance\n \n=\n \n(\nMPKitInstance\n)[\nkitNumber\n \nintegerValue\n];\n\n\n\n\n  \nif\n \n(\nkitInstance\n \n==\n \nMPKitInstanceBranchMetrics\n)\n \n{\n\n\n    \n[\nself\n \ncheckForDeeplink\n];\n\n\n  \n}\n\n\n}\n\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ncontinueUserActivity:\n(\nNSUserActivity\n \n*\n)\nuserActivity\n \nrestorationHandler:\n(\nvoid\n \n(\n^\n)(\nNSArray\n \n*\n \n_Nullable\n))\nrestorationHandler\n \n{\n\n\n  \n[\nself\n \ncheckForDeeplink\n];\n\n\n  \nreturn\n \nYES\n;\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\ncheckForDeeplink\n \n{\n\n\n  \nMParticle\n \n*\n \nmParticle\n \n=\n \n[\nMParticle\n \nsharedInstance\n];\n\n\n\n\n  \n[\nmParticle\n \ncheckForDeferredDeepLinkWithCompletionHandler\n:\n^\n(\nNSDictionary\nNSString\n \n*\n,\nNSString\n \n*\n \n*\n \n_Nullable\n \nparams\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n\n    \n//\n\n\n    \n// A few typical scenarios where this block would be invoked:\n\n\n    \n//\n\n\n    \n// (1) Base case:\n\n\n    \n//     - User does not tap on a link, and then opens the app (either after a fresh install or not)\n\n\n    \n//     - This block will be invoked with Branch Metrics\n response indicating that this user did not tap on a link\n\n\n    \n//\n\n\n    \n// (2) Deferred deep link:\n\n\n    \n//     - User without the app installed taps on a link\n\n\n    \n//     - User is redirected from Branch Metrics to the App Store and installs the app\n\n\n    \n//     - User opens the app\n\n\n    \n//     - This block will be invoked with Branch Metrics\n response containing the details of the link\n\n\n    \n//\n\n\n    \n// (3) Deep link with app installed:\n\n\n    \n//     - User with the app already installed taps on a link\n\n\n    \n//     - Application opens via openUrl/continueUserActivity, mParticle forwards launch options etc to Branch\n\n\n    \n//     - This block will be invoked with Branch Metrics\n response containing the details of the link\n\n\n    \n//\n\n\n    \n// If the user navigates away from the app without killing it, this block could be invoked several times:\n\n\n    \n// once for the initial launch, and then again each time the user taps on a link to re-open the app.\n\n\n\n\n    \nif\n \n(\nparams\n)\n \n{\n\n\n      \n//Insert custom logic to inspect the params and route the user/customize the experience.\n\n\n      \nNSLog\n(\n@\nparams: %@\n,\n \nparams\n.\ndescription\n);\n\n\n    \n}\n\n\n  \n}];\n\n\n}\n\n\n\n\n@end\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link\n\n\n\n\n\n\nCreate a deep link from the \nBranch Marketing Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app \n(\ncordova run ios\n \nphonegap run ios\n \nionic run ios\n)\n\n\n\n\n\n\nPaste deep link in \nApple Notes\n\n\n\n\n\n\nLong press on the deep link \n(not 3D Touch)\n\n\n\n\n\n\nClick \nOpen in \"APP_NAME\"\n to open your app \n(\nexample\n)\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share \n\n\n\n\n\n\nSwift 3.0\n\n\n// only canonical identifier is required\n\n\nlet\n \nbuo\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/12345\n)\n\n\nbuo\n.\ntitle\n \n=\n \nUUID\n.\ninit\n().\nuuidString\n\n\nbuo\n.\ncontentDescription\n \n=\n \nMy Content Description\n\n\nbuo\n.\nimageUrl\n \n=\n \nhttp://lorempixel.com/200/200/\n\n\nbuo\n.\ncanonicalUrl\n \n=\n \nhttp://s3z3.app.link/rawr_rawr\n\n\nbuo\n.\ncontentIndexMode\n \n=\n \n.\npublic\n\n\nbuo\n.\naddMetadataKey\n(\nproperty1\n,\n \nvalue\n:\n \nblue\n)\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// only canonical identifier is required\n\n\nBranchUniversalObject\n \n*\nbuo\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nitem/12345\n];\n\n\nbuo\n.\ntitle\n \n=\n \n@\nMy Content Title\n;\n\n\nbuo\n.\ncontentDescription\n \n=\n \n@\nMy Content Description\n;\n\n\nbuo\n.\nimageUrl\n \n=\n \n@\nhttps://example.com/mycontent-12345.png\n;\n\n\n[\nbuo\n \naddMetadataKey\n:\n@\nproperty1\n \nvalue\n:\n@\nblue\n];\n\n\n[\nbuo\n \naddMetadataKey\n:\n@\nproperty2\n \nvalue\n:\n@\nred\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nGenerate a deep link within your app\n\n\n\n\n\n\nSwift 3.0\n\n\nlet\n \nlp\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlp\n.\nfeature\n \n=\n \nsharing\n\n\nlp\n.\nchannel\n \n=\n \nfacebook\n\n\nlp\n.\ncampaign\n \n=\n \nmeow meow\n\n\nlp\n.\naddControlParam\n(\n$desktop_url\n,\n \nwithValue\n:\n \nhttp://example.com/home\n)\n\n\nlp\n.\naddControlParam\n(\nrandom\n,\n \nwithValue\n:\n \nUUID\n.\ninit\n().\nuuidString\n)\n\n\n\nbuo\n.\ngetShortUrl\n(\nwith\n:\n \nlp\n)\n \n{\n \nurl\n,\n \nerror\n \nin\n\n  \nguard\n \nlet\n \nurl\n \n=\n \nurl\n \nelse\n \n{\n \nreturn\n \n}\n\n  \nprint\n(\nurl\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\nBranchLinkProperties\n \n*\nlp\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlp\n.\nfeature\n \n=\n \n@\nsharing\n;\n\n\nlp\n.\nchannel\n \n=\n \n@\nfacebook\n;\n\n\n[\nlp\n \naddControlParam\n:\n@\n$desktop_url\n \nwithValue\n:\n@\nhttp://example.com/home\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$ios_url\n \nwithValue\n:\n@\nhttp://example.com/ios\n];\n\n\n\n[\nbuo\n \ngetShortUrlWithLinkProperties\n:\nlp\n \nandCallback\n:\n^\n(\nNSString\n*\n \nurl\n,\n \nNSError\n*\n \nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nNSLog\n(\n@\n@\n,\n \nurl\n);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nShare deep links between users and apps\n\n\n\n\n\n\nSwift 3.0\n\n\n// optional values\n\n\nlet\n \nlp\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlp\n.\nfeature\n \n=\n \nsharing\n\n\nlp\n.\nchannel\n \n=\n \nfacebook\n\n\nlp\n.\ncampaign\n \n=\n \nmeow meow\n\n\nlp\n.\naddControlParam\n(\n$desktop_url\n,\n \nwithValue\n:\n \nhttp://example.com/home\n)\n\n\nlp\n.\naddControlParam\n(\nrandom\n,\n \nwithValue\n:\n \nUUID\n.\ninit\n().\nuuidString\n)\n\n\n\n// share link\n\n\nbuo\n.\nshowShareSheet\n(\nwith\n:\n \nlp\n,\n \nandShareText\n:\n \ntext\n \n,\n \nfrom\n:\n \ncontroller\n)\n \n{\n \n(\nactivity\n,\n \nsuccess\n)\n \nin\n\n  \nprint\n(\nactivity\n \n??\n \nnone\n,\n \nsuccess\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// optional values\n\n\nBranchLinkProperties\n \n*\nlp\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlp\n.\nfeature\n \n=\n \n@\nsharing\n;\n\n\nlp\n.\nchannel\n \n=\n \n@\nfacebook\n;\n\n\n[\nlp\n \naddControlParam\n:\n@\n$desktop_url\n \nwithValue\n:\n@\nhttp://example.com/home\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$ios_url\n \nwithValue\n:\n@\nhttp://example.com/ios\n];\n\n\n\n// share link\n\n\n[\nbranchUniversalObject\n \nshowShareSheetWithLinkProperties\n:\nlp\n \nandShareText\n:\n@\nSuper amazing thing I want to share!\n \nfromViewController\n:\nself\n \ncompletion\n:\n^\n(\nNSString\n*\n \nactivityType\n,\n \nBOOL\n \ncompleted\n)\n \n{\n\n    \nNSLog\n(\n@\nfinished presenting\n);\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nNavigate to any ViewController based on the deep link data from\n\n\n\n\n\n\nSwift 3.0\n\n\n// within AppDelegate application.didFinishLaunchingWithOptions\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n)\n \n{\n \nparams\n \n,\n \nerror\n \nin\n\n  \n// catch deep link data\n\n  \nguard\n \nlet\n \ndata\n \n=\n \nparams\n \nas\n?\n \n[\nString\n:\n \nAnyObject\n]\n \nelse\n \n{\n \nreturn\n \n}\n\n\n  \n// save deep link data into global model to be referenced by any view controller\n\n  \nBranchData\n.\nsharedInstance\n.\ndata\n \n=\n \ndata\n\n\n  \n// navigate to view controller based on deep link data[\ntype\n] (\ntype\n can be any custom key-value pair)\n\n  \nguard\n \nlet\n \nnav\n \n=\n \ndata\n[\ntype\n]\n \nas\n?\n \nString\n \nelse\n \n{\n \nreturn\n \n}\n\n  \nswitch\n \nnav\n \n{\n\n      \ncase\n \nlanding_page\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n      \ncase\n \ntutorial\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n      \ncase\n \ncontent\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n      \ndefault\n:\n \nbreak\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nRecommendations\n\n\n\n\n\n\nSample app\n\n\n\n\n\n\nSimulate an install\n\n\n\n\n\n\nApp not opening\n\n\n\n\n\n\nData not pass through\n\n\n\n\n\n\nDeep links are long", 
            "title": "mParticle iOS"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#configure-bundle-identifier", 
            "text": "Bundle Id matches  Branch Dashboard", 
            "title": "Configure bundle identifier"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#configure-associated-domains", 
            "text": "Add  Branch Dashboard  values", 
            "title": "Configure associated domains"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#configure-entitlements", 
            "text": "Confirm entitlements are within target", 
            "title": "Configure entitlements"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#configure-infoplist", 
            "text": "Add  Branch Dashboard  values", 
            "title": "Configure info.pList"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#confirm-app-prefix", 
            "text": "From your  Apple Developer Account", 
            "title": "Confirm app prefix"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#install-branch-kit", 
            "text": "Option 1:  CocoaPods  platform :ios,  8.0 \n\ntarget  APP_NAME   do \n   # if swift \n  use_frameworks!   pod  mParticle-BranchMetrics  end    Option 2:  Carthage  github  mparticle-integrations/mparticle-apple-integration-branchmetrics", 
            "title": "Install Branch Kit"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#enable-branch-on-mparticle", 
            "text": "Retrieve your Branch Key on the  Link Settings  page of the Branch dashboard.  From your  mParticle dashboard  navigate to the Services page. (The paper airplane icon on the left side)  Scroll down to the Branch tile, or enter Branch in the search bar.  Click on the Branch tile and then select \"Activate a Platform\".  Click on the Apple icon, then toggle the status ON.  Enter your Branch key in the marked field and click \"Save\".", 
            "title": "Enable Branch on mParticle"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#initialize-branch", 
            "text": "As with any kit, mParticle will automatically handle initializing Branch sessions. At this point you should start seeing your Branch session data - including installs, re-opens, and any custom events - in your Branch dashboard.", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#handle-incoming-links", 
            "text": "Swift 3.0  import   UIKit  @UIApplicationMain  class   AppDelegate :   UIResponder ,   UIApplicationDelegate   {  var   window :   UIWindow ?  func   application ( _   application :   UIApplication ,   didFinishLaunchingWithOptions   launchOptions :   [ UIApplicationLaunchOptionsKey :   Any ]?)   -   Bool   { \n\n   // This observer must be added before initializing the mParticle session. \n   // Failure to do so will cause some deep links to be missed.     NotificationCenter . default . addObserver ( self ,   selector :   #selector ( handleKitDidBecomeActive ( _ :)),   name :   Notification . Name . mParticleKitDidBecomeActive ,   object :   nil )  \n   return   true  }  func   handleKitDidBecomeActive ( _   notification :   Notification )   {       guard   let   kitNumber   =   notification . userInfo ?[ mParticleKitInstanceKey ]   as ?   NSNumber   else   {   return   }       guard   let   kitInstance   =   MPKitInstance ( rawValue :   kitNumber . uintValue )   else   {   return   }        switch   kitInstance   {           case   . branchMetrics :               checkForDeeplink ()           default :               break       }  }   func   application ( _   application :   UIApplication ,   continue   userActivity :   NSUserActivity ,   restorationHandler :   @ escaping   ([ Any ]?)   -   Void )   -   Bool   {       checkForDeeplink ()       return   true  }  func   checkForDeeplink ()   {       MParticle . sharedInstance (). checkForDeferredDeepLink   {   linkInfo ,   error   in           // A few typical scenarios where this block would be invoked:           //           // (1) Base case:           //     - User does not tap on a link, and then opens the app (either after a fresh install or not)           //     - This block will be invoked with Branch Metrics  response indicating that this user did not tap on a link           //           // (2) Deferred deep link:           //     - User without the app installed taps on a link           //     - User is redirected from Branch Metrics to the App Store and installs the app           //     - User opens the app           //     - This block will be invoked with Branch Metrics  response containing the details of the link           //           // (3) Deep link with app installed:           //     - User with the app already installed taps on a link           //     - Application opens via openUrl/continueUserActivity, mParticle forwards launch options etc to Branch           //     - This block will be invoked with Branch Metrics  response containing the details of the link           //           // If the user navigates away from the app without killing it, this block could be invoked several times:           // once for the initial launch, and then again each time the user taps on a link to re-open the app.            guard   let   linkInfo   =   linkInfo   else   {   return   }            print ( params:   +   linkInfo )       }  }     Objective-C  #import  AppDelegate.h  #import  Branch/Branch.h  @interface   AppDelegate   ()  @end  @implementation   AppDelegate  -   ( BOOL ) application: ( UIApplication   * ) application   didFinishLaunchingWithOptions: ( NSDictionary   * ) launchOptions   { \n\n   // This observer must be added before initializing the mParticle session. \n   // Failure to do so will cause some deep links to be missed.     NSNotificationCenter   * notificationCenter   =   [ NSNotificationCenter   defaultCenter ];     [ notificationCenter   addObserver : self                            selector : @selector ( handleKitDidBecomeActive :)                                name : mParticleKitDidBecomeActiveNotification                              object : nil ];  \n   return   YES ;  }  -   ( void ) handleKitDidBecomeActive: ( NSNotification   * ) notification   {     NSDictionary   * userInfo   =   [ notification   userInfo ];     NSNumber   * kitNumber   =   userInfo [ mParticleKitInstanceKey ];     MPKitInstance   kitInstance   =   ( MPKitInstance )[ kitNumber   integerValue ];      if   ( kitInstance   ==   MPKitInstanceBranchMetrics )   {       [ self   checkForDeeplink ];     }  }   -   ( BOOL ) application: ( UIApplication   * ) application   continueUserActivity: ( NSUserActivity   * ) userActivity   restorationHandler: ( void   ( ^ )( NSArray   *   _Nullable )) restorationHandler   {     [ self   checkForDeeplink ];     return   YES ;  }  -   ( void ) checkForDeeplink   {     MParticle   *   mParticle   =   [ MParticle   sharedInstance ];      [ mParticle   checkForDeferredDeepLinkWithCompletionHandler : ^ ( NSDictionary NSString   * , NSString   *   *   _Nullable   params ,   NSError   *   _Nullable   error )   {       //       // A few typical scenarios where this block would be invoked:       //       // (1) Base case:       //     - User does not tap on a link, and then opens the app (either after a fresh install or not)       //     - This block will be invoked with Branch Metrics  response indicating that this user did not tap on a link       //       // (2) Deferred deep link:       //     - User without the app installed taps on a link       //     - User is redirected from Branch Metrics to the App Store and installs the app       //     - User opens the app       //     - This block will be invoked with Branch Metrics  response containing the details of the link       //       // (3) Deep link with app installed:       //     - User with the app already installed taps on a link       //     - Application opens via openUrl/continueUserActivity, mParticle forwards launch options etc to Branch       //     - This block will be invoked with Branch Metrics  response containing the details of the link       //       // If the user navigates away from the app without killing it, this block could be invoked several times:       // once for the initial launch, and then again each time the user taps on a link to re-open the app.        if   ( params )   {         //Insert custom logic to inspect the params and route the user/customize the experience.         NSLog ( @ params: %@ ,   params . description );       }     }];  }   @end", 
            "title": "Handle Incoming Links"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#test-deep-link", 
            "text": "Create a deep link from the  Branch Marketing Dashboard    Delete your app from the device    Compile your app  ( cordova run ios   phonegap run ios   ionic run ios )    Paste deep link in  Apple Notes    Long press on the deep link  (not 3D Touch)    Click  Open in \"APP_NAME\"  to open your app  ( example )", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share     Swift 3.0  // only canonical identifier is required  let   buo   =   BranchUniversalObject ( canonicalIdentifier :   item/12345 )  buo . title   =   UUID . init (). uuidString  buo . contentDescription   =   My Content Description  buo . imageUrl   =   http://lorempixel.com/200/200/  buo . canonicalUrl   =   http://s3z3.app.link/rawr_rawr  buo . contentIndexMode   =   . public  buo . addMetadataKey ( property1 ,   value :   blue )     Objective-C  // only canonical identifier is required  BranchUniversalObject   * buo   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ item/12345 ];  buo . title   =   @ My Content Title ;  buo . contentDescription   =   @ My Content Description ;  buo . imageUrl   =   @ https://example.com/mycontent-12345.png ;  [ buo   addMetadataKey : @ property1   value : @ blue ];  [ buo   addMetadataKey : @ property2   value : @ red ];", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#create-deep-link", 
            "text": "Generate a deep link within your app    Swift 3.0  let   lp :   BranchLinkProperties   =   BranchLinkProperties ()  lp . feature   =   sharing  lp . channel   =   facebook  lp . campaign   =   meow meow  lp . addControlParam ( $desktop_url ,   withValue :   http://example.com/home )  lp . addControlParam ( random ,   withValue :   UUID . init (). uuidString )  buo . getShortUrl ( with :   lp )   {   url ,   error   in \n   guard   let   url   =   url   else   {   return   } \n   print ( url )  }     Objective-C  BranchLinkProperties   * lp   =   [[ BranchLinkProperties   alloc ]   init ];  lp . feature   =   @ sharing ;  lp . channel   =   @ facebook ;  [ lp   addControlParam : @ $desktop_url   withValue : @ http://example.com/home ];  [ lp   addControlParam : @ $ios_url   withValue : @ http://example.com/ios ];  [ buo   getShortUrlWithLinkProperties : lp   andCallback : ^ ( NSString *   url ,   NSError *   error )   { \n     if   ( ! error )   { \n         NSLog ( @ @ ,   url ); \n     }  }];", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#share-deep-link", 
            "text": "Share deep links between users and apps    Swift 3.0  // optional values  let   lp :   BranchLinkProperties   =   BranchLinkProperties ()  lp . feature   =   sharing  lp . channel   =   facebook  lp . campaign   =   meow meow  lp . addControlParam ( $desktop_url ,   withValue :   http://example.com/home )  lp . addControlParam ( random ,   withValue :   UUID . init (). uuidString )  // share link  buo . showShareSheet ( with :   lp ,   andShareText :   text   ,   from :   controller )   {   ( activity ,   success )   in \n   print ( activity   ??   none ,   success )  }     Objective-C  // optional values  BranchLinkProperties   * lp   =   [[ BranchLinkProperties   alloc ]   init ];  lp . feature   =   @ sharing ;  lp . channel   =   @ facebook ;  [ lp   addControlParam : @ $desktop_url   withValue : @ http://example.com/home ];  [ lp   addControlParam : @ $ios_url   withValue : @ http://example.com/ios ];  // share link  [ branchUniversalObject   showShareSheetWithLinkProperties : lp   andShareText : @ Super amazing thing I want to share!   fromViewController : self   completion : ^ ( NSString *   activityType ,   BOOL   completed )   { \n     NSLog ( @ finished presenting );  }];", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#read-deep-link", 
            "text": "", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#navigate-to-content", 
            "text": "Navigate to any ViewController based on the deep link data from    Swift 3.0  // within AppDelegate application.didFinishLaunchingWithOptions  Branch . getInstance (). initSession ( launchOptions :   launchOptions )   {   params   ,   error   in \n   // catch deep link data \n   guard   let   data   =   params   as ?   [ String :   AnyObject ]   else   {   return   } \n\n   // save deep link data into global model to be referenced by any view controller \n   BranchData . sharedInstance . data   =   data \n\n   // navigate to view controller based on deep link data[ type ] ( type  can be any custom key-value pair) \n   guard   let   nav   =   data [ type ]   as ?   String   else   {   return   } \n   switch   nav   { \n       case   landing_page :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n       case   tutorial :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n       case   content :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n       default :   break \n   }  }     Objective-C", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#display-content", 
            "text": "", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#track-content", 
            "text": "", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#track-users", 
            "text": "", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#track-events", 
            "text": "", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#track-commerce", 
            "text": "", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#handle-referrals", 
            "text": "", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#recommendations", 
            "text": "", 
            "title": "Recommendations"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#sample-app", 
            "text": "", 
            "title": "Sample app"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#simulate-an-install", 
            "text": "", 
            "title": "Simulate an install"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#app-not-opening", 
            "text": "", 
            "title": "App not opening"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#data-not-pass-through", 
            "text": "", 
            "title": "Data not pass through"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#deep-links-are-long", 
            "text": "", 
            "title": "Deep links are long"
        }, 
        {
            "location": "/pages/apps/titanium/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure App\n\n\n\n\n\n\niOS\n\n\n\n\n\n\nAdd your Branch key and register a URI scheme\n\n\n\n\nIn your project\u2019s tiapp.xml file, insert the snippet below. Change yourapp to the URI scheme you\u2019ve selected.\n\n\n\n\n   \nios\n\n       \nplist\n\n         \ndict\n\n           \n!-- Add branch key as key-value pair --\n\n           \nkey\nbranch_key\n/key\n\n           \nstring\nkey_live_xxxxxxxxxxxxxxx\n/string\n\n           \n!-- Add unique string for direct deep links --\n\n           \nkey\nCFBundleURLTypes\n/key\n\n           \narray\n\n             \ndict\n\n               \nkey\nCFBundleURLSchemes\n/key\n\n               \narray\n\n                 \nstring\nyourapp\n/string\n\n               \n/array\n\n             \n/dict\n\n           \n/array\n\n         \n/dict\n\n       \n/plist\n\n     \n/ios\n\n\n\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nAdd your Branch Key and register a URI Scheme\n\n\n\n\n\n\nOpen your tiapp.xml and add the following \n tag:\n\n    \napplication\n\n        \n!-- Other existing entries --\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey\n \nandroid:value=\nkey_live_xxxxxxxxxxxxxxx\n \n/\n\n    \n/application\n\n\n\n\n\n\n\n\nWithin your Deep Link Activity's definition, insert the intent filter provided below. Change yourapp under android:scheme to the URI scheme you\u2019ve selected.\n\n\n\n\n\n\n    \nintent-filter\n\n      \ndata\n \nandroid:scheme=\nyourapp\n \nandroid:host=\nopen\n \n/\n\n      \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n      \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n      \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n    \n/intent-filter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nInitialize the SDK by inserting the following snippet into your index.js file:\n\n\n$\n.\ninitialize\n \n=\n \nfunction\n(\nparams\n)\n \n{\n\n       \n$.window.open()\n;\n\n\n       \n$.initializeViews()\n;\n\n       \n$.initializeHandlers()\n;\n\n\n       \nTi.API.info(\nstart\n \ninitSession\n)\n;\n\n       \nbranch.initSession()\n;\n\n       \nbranch.addEventListener(\nbio\n:\ninitSession\n, $.onInitSessionFinished);\n\n\n\n       if (OS_ANDROID) {\n\n\n           Ti.Android.currentActivity.addEventListener(\nnewintent\n, function(e) {\n\n\n               Ti.API.info(\ninside\n \nnewintent\n:\n \n + e);\n\n\n               $.window.open();\n\n\n               branch.initSession();\n\n\n           });\n\n\n       }\n\n\n   };\n\n\n\n   $.onInitSessionFinished = function(data) {\n\n\n       Ti.API.info(\ninside\n \nonInitSessionFinished\n);\n\n\n       for (key in data) {\n\n\n           if ((key != \ntype\n \n key != \nsource\n \n key != \nbubbles\n \n key != \ncancelBubble\n)\n \n \ndata\n[\nkey\n]\n \n!=\n \nnull\n)\n \n{\n\n               \nTi\n.\nAPI\n.\ninfo\n(\nkey\n \n+\n \ndata\n[\nkey\n]\n);\n\n           \n}\n\n       \n}\n\n   \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link iOS\n\n\n\n\n\n\nCreate a deep link from the \nBranch Marketing Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app\n\n\n\n\n\n\nPaste deep link in \nApple Notes\n \n\n\n\n\n\n\nLong press on the deep link \n(not 3D Touch)\n\n\n\n\n\n\nClick \nOpen in \"APP_NAME\"\n to open your app \n(\nexample\n)\n\n\n\n\n\n\n\n\n\n\nTest deep link Android\n\n\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app\n\n\n\n\n\n\nPaste deep link in \nGoogle Hangouts\n\n\n\n\n\n\nClick on the deep link to open your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share\n\n\n\n\n\n\nUses the Universal Object Properties listed below:\n\n\n\n\n\n\n\n\nKey\n\n\nType\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\ncanonicalIdentifier\n\n\nstring\n\n\nThe identifier of the object\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\nThe title of the object\n\n\n\n\n\n\ncontentDescription\n\n\nstring\n\n\nThe short description of the object\n\n\n\n\n\n\ncontentImageUrl\n\n\nstring\n\n\nURL of the image used by the object\n\n\n\n\n\n\ncontentIndexingMode\n\n\nstring\n\n\nIndexing mode of the object. Set as \"private\" or \"public\".\n\n\n\n\n\n\ncontentMetadata\n\n\ndictionary\n\n\nCustom keys and values as metadata of the object\n\n\n\n\n\n\n\n\n    \nvar\n \nbranchUniversalObject\n \n=\n \nbranch\n.\ncreateBranchUniversalObject\n({\n\n        \ncanonicalIdentifier\n \n:\n \ncontent/12345\n,\n\n        \ntitle\n \n:\n \nMy Content Title\n,\n\n        \ncontentDescription\n \n:\n \nMy Content Description\n,\n\n        \ncontentImageUrl\n \n:\n \nhttps://example.com/mycontent-12345.png\n,\n\n        \ncontentIndexingMode\n \n:\n \npublic\n,\n\n        \ncontentMetadata\n \n:\n \n{\n\n            \nproduct_picture\n \n:\n \n12345\n,\n\n            \nuser_id\n \n:\n \n6789\n\n        \n},\n\n    \n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nCreates a deep link URL with encapsulated data\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\n    \nbranchUniversalObject\n.\ngenerateShortUrl\n({\n\n      \nfeature\n \n:\n \nsample-feature\n,\n\n      \nchannel\n \n:\n \nsample-channel\n,\n\n      \nstage\n \n:\n \nsample-stage\n\n    \n},\n \n{\n\n      \n$desktop_url\n \n:\n \nhttp://desktop-url.com\n,\n\n    \n},\n \nfunction\n \n(\nres\n)\n \n{\n\n        \nTi\n.\nAPI\n.\ninfo\n(\nCompleted link generation\n);\n\n        \nTi\n.\nAPI\n.\ninfo\n(\nres\n);\n\n    \n});\n\n\n\n\n\n\n\nThe event listener bio:generateShortUrl returns a string object containing the generated link:\n\n    \nbranchUniversalObject\n.\naddEventListener\n(\nbio:generateShortUrl\n,\n \n$\n.\nonGenerateUrlFinished\n);\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\n    \nbranchUniversalObject\n.\nshowShareSheet\n({\n\n      \nfeature\n \n:\n \nsample-feature\n,\n\n      \nchannel\n \n:\n \nsample-channel\n,\n\n      \nstage\n \n:\n \nsample-stage\n,\n\n    \n},\n \n{\n\n      \n$desktop_url\n \n:\n \nhttp://desktop-url.com\n,\n\n    \n});\n\n\n\n\n\n\n\nAndroid only (Callbacks in iOS are ignored. There is no need to implement them as the events are handled by UIActivityViewController)\n\n\n\n\n    \nbranchUniversalObject\n.\nshareLinkDialogLaunched\n(\nfunction\n \n()\n \n{\n\n      \nconsole\n.\nlog\n(\nShare sheet launched\n);\n\n    \n});\n\n\n\n\n\n    \nbranchUniversalObject\n.\nshareLinkDialogDismissed\n(\nfunction\n \n()\n \n{\n\n     \nconsole\n.\nlog\n(\nShare sheet dimissed\n);\n\n   \n});\n\n\n\n\n\n    \nbranchUniversalObject\n.\nshareLinkResponse\n(\nfunction\n \n(\nres\n)\n \n{\n\n      \nconsole\n.\nlog\n(\nShare link response: \n \n+\n \nJSON\n.\nstringify\n(\nres\n));\n\n    \n});\n\n\n\n\n\n    \nbranchUniversalObject\n.\nshareChannelSelected\n(\nfunction\n \n(\nres\n)\n \n{\n\n      \nconsole\n.\nlog\n(\nChannel selected: \n \n+\n \nJSON\n.\nstringify\n(\nres\n));\n\n    \n});\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\nRefer to \n$.onInitSessionFinished()\n in \nInitialize Branch\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\n    \nbranchUniversalObject\n.\nregisterView\n();\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n  \n\n\n    \nvar\n \nuserId\n \n=\n \n123456\n;\n\n    \nbranch\n.\nsetIdentity\n(\nuserId\n);\n\n\n\n\n\n\n\n\n\nRemoves the identity of a user\n\n\n    \nbranch\n.\nlogout\n();\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\n    \nvar\n \neventName\n \n=\n \nclicked_on_this\n;\n\n    \nbranch\n.\nuserCompletedAction\n(\neventName\n);\n\n\n\n\n\n\n\n\n\nHandle referral\n\n\n\n\n\n\nReferral points are obtained from events triggered by users from rules created on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits with the \nReferral guide\n\n\n\n\n\n\nRedeem credits\n\n\n\n\n\n\n    \nint\n \nvalue\n \n=\n \n10\n;\n\n    \nbranch\n.\nredeemRewards\n(\nvalue\n);\n\n\n\n\n\n\n\nLoad credits\n\n\n\n\n    \nvar\n \nbucket\n \n=\n \nthis_bucket\n\n    \nbranch\n.\nloadRewards\n(\nbucket\n);\n  \n\n\n\n\n    \nbranch\n.\nloadRewards\n();\n  \n\n\n\n\nTo implement the callback, you must add a listener to the event bio:loadRewards. The event returns a dictionary object containing the balance.\n\n\n\n\n\n\nLoad history\n\n\nbranch.getCreditHistory();\n\n\nImplement the callback, by adding a listener to the event bio:getCreditHistory.\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nSample app\n\n\n\n\nBranch testbed app", 
            "title": "Titanium"
        }, 
        {
            "location": "/pages/apps/titanium/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/titanium/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/titanium/#configure-app", 
            "text": "iOS    Add your Branch key and register a URI scheme   In your project\u2019s tiapp.xml file, insert the snippet below. Change yourapp to the URI scheme you\u2019ve selected.       ios \n        plist \n          dict \n            !-- Add branch key as key-value pair -- \n            key branch_key /key \n            string key_live_xxxxxxxxxxxxxxx /string \n            !-- Add unique string for direct deep links -- \n            key CFBundleURLTypes /key \n            array \n              dict \n                key CFBundleURLSchemes /key \n                array \n                  string yourapp /string \n                /array \n              /dict \n            /array \n          /dict \n        /plist \n      /ios       Android    Add your Branch Key and register a URI Scheme    Open your tiapp.xml and add the following   tag:      application \n         !-- Other existing entries -- \n         meta-data   android:name= io.branch.sdk.BranchKey   android:value= key_live_xxxxxxxxxxxxxxx   / \n     /application     Within your Deep Link Activity's definition, insert the intent filter provided below. Change yourapp under android:scheme to the URI scheme you\u2019ve selected.         intent-filter \n       data   android:scheme= yourapp   android:host= open   / \n       action   android:name= android.intent.action.VIEW   / \n       category   android:name= android.intent.category.DEFAULT   / \n       category   android:name= android.intent.category.BROWSABLE   / \n     /intent-filter", 
            "title": "Configure App"
        }, 
        {
            "location": "/pages/apps/titanium/#initialize-branch", 
            "text": "Initialize the SDK by inserting the following snippet into your index.js file:  $ . initialize   =   function ( params )   { \n        $.window.open() ; \n\n        $.initializeViews() ; \n        $.initializeHandlers() ; \n\n        Ti.API.info( start   initSession ) ; \n        branch.initSession() ; \n        branch.addEventListener( bio : initSession , $.onInitSessionFinished);         if (OS_ANDROID) {             Ti.Android.currentActivity.addEventListener( newintent , function(e) {                 Ti.API.info( inside   newintent :    + e);                 $.window.open();                 branch.initSession();             });         }     };     $.onInitSessionFinished = function(data) {         Ti.API.info( inside   onInitSessionFinished );         for (key in data) {             if ((key !=  type    key !=  source    key !=  bubbles    key !=  cancelBubble )     data [ key ]   !=   null )   { \n                Ti . API . info ( key   +   data [ key ] ); \n            } \n        } \n    }", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/titanium/#test-deep-link-ios", 
            "text": "Create a deep link from the  Branch Marketing Dashboard    Delete your app from the device    Compile your app    Paste deep link in  Apple Notes      Long press on the deep link  (not 3D Touch)    Click  Open in \"APP_NAME\"  to open your app  ( example )", 
            "title": "Test deep link iOS"
        }, 
        {
            "location": "/pages/apps/titanium/#test-deep-link-android", 
            "text": "Create a deep link from the  Branch Dashboard    Delete your app from the device    Compile your app    Paste deep link in  Google Hangouts    Click on the deep link to open your app", 
            "title": "Test deep link Android"
        }, 
        {
            "location": "/pages/apps/titanium/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/titanium/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share    Uses the Universal Object Properties listed below:     Key  Type  Meaning      canonicalIdentifier  string  The identifier of the object    title  string  The title of the object    contentDescription  string  The short description of the object    contentImageUrl  string  URL of the image used by the object    contentIndexingMode  string  Indexing mode of the object. Set as \"private\" or \"public\".    contentMetadata  dictionary  Custom keys and values as metadata of the object          var   branchUniversalObject   =   branch . createBranchUniversalObject ({ \n         canonicalIdentifier   :   content/12345 , \n         title   :   My Content Title , \n         contentDescription   :   My Content Description , \n         contentImageUrl   :   https://example.com/mycontent-12345.png , \n         contentIndexingMode   :   public , \n         contentMetadata   :   { \n             product_picture   :   12345 , \n             user_id   :   6789 \n         }, \n     });", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/titanium/#create-deep-link", 
            "text": "Creates a deep link URL with encapsulated data    Needs a  Branch Universal Object    Uses  Deep Link Properties    Validate with the  Branch Dashboard         branchUniversalObject . generateShortUrl ({ \n       feature   :   sample-feature , \n       channel   :   sample-channel , \n       stage   :   sample-stage \n     },   { \n       $desktop_url   :   http://desktop-url.com , \n     },   function   ( res )   { \n         Ti . API . info ( Completed link generation ); \n         Ti . API . info ( res ); \n     });    The event listener bio:generateShortUrl returns a string object containing the generated link:      branchUniversalObject . addEventListener ( bio:generateShortUrl ,   $ . onGenerateUrlFinished );", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/titanium/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Needs a  Branch Universal Object    Uses  Deep Link Properties         branchUniversalObject . showShareSheet ({ \n       feature   :   sample-feature , \n       channel   :   sample-channel , \n       stage   :   sample-stage , \n     },   { \n       $desktop_url   :   http://desktop-url.com , \n     });    Android only (Callbacks in iOS are ignored. There is no need to implement them as the events are handled by UIActivityViewController)        branchUniversalObject . shareLinkDialogLaunched ( function   ()   { \n       console . log ( Share sheet launched ); \n     });        branchUniversalObject . shareLinkDialogDismissed ( function   ()   { \n      console . log ( Share sheet dimissed ); \n    });        branchUniversalObject . shareLinkResponse ( function   ( res )   { \n       console . log ( Share link response:    +   JSON . stringify ( res )); \n     });        branchUniversalObject . shareChannelSelected ( function   ( res )   { \n       console . log ( Channel selected:    +   JSON . stringify ( res )); \n     });", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/titanium/#read-deep-link", 
            "text": "Refer to  $.onInitSessionFinished()  in  Initialize Branch", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/titanium/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Branch Universal Object    Validate with the  Branch Dashboard         branchUniversalObject . registerView ();", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/titanium/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    Validate with the  Branch Dashboard          var   userId   =   123456 ; \n     branch . setIdentity ( userId );     Removes the identity of a user       branch . logout ();", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/titanium/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard         var   eventName   =   clicked_on_this ; \n     branch . userCompletedAction ( eventName );", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/titanium/#handle-referral", 
            "text": "Referral points are obtained from events triggered by users from rules created on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits with the  Referral guide    Redeem credits         int   value   =   10 ; \n     branch . redeemRewards ( value );    Load credits        var   bucket   =   this_bucket \n     branch . loadRewards ( bucket );          branch . loadRewards ();     To implement the callback, you must add a listener to the event bio:loadRewards. The event returns a dictionary object containing the balance.    Load history  branch.getCreditHistory();  Implement the callback, by adding a listener to the event bio:getCreditHistory.", 
            "title": "Handle referral"
        }, 
        {
            "location": "/pages/apps/titanium/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/titanium/#sample-app", 
            "text": "Branch testbed app", 
            "title": "Sample app"
        }, 
        {
            "location": "/pages/apps/react-native/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall Branch\n\n\n\n\n\n\nOption 1: Simple (iOS or Android)\n\n\nnpm\n \ninstall\n \n--\nsave\n \nreact\n-\nnative\n-\nbranch\n@2.0.0\n-\nbeta\n.7\n\n\nreact\n-\nnative\n \nlink\n \nreact\n-\nnative\n-\nbranch\n\n\n\nAdd \npod \"Branch\"\n as a dependency in you iOS/Podfile\n\ncd ios; pod install --repo-update\n\n\n\n\n\n\n\nOption 2: \nCocoaPods\n\n\npod \nReact\n,\n  path: \n../node_modules/react-native\n,\n  subspecs: %w{\n    Core\n    RCTAnimation\n    RCTImage\n    RCTText\n    RCTNetwork\n    RCTWebSocket\n  }\npod \nYoga\n, path: \n../node_modules/react-native/ReactCommon/yoga\n\npod \nreact-native-branch\n, path: \n../node_modules/react-native-branch\n\npod \nBranch-SDK\n, path: \n../node_modules/react-native-branch/ios\n\n\n\n\ncd ios; pod install --repo-update\n\n\n\n\n\n\n\nOption 3: \nCarthage\n\n\ngithub \nBranchMetrics/ios-branch-deep-linking\n\ncarthage update\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\niOS\n\n\n\n\n\n\nConfigure bundle identifier\n\n\n\n\n\n\nBundle Id matches \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure associated domains\n\n\n\n\n\n\nAdd \nBranch Dashboard\n values\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure entitlements\n\n\n\n\n\n\nConfirm entitlements are within target\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure info.pList\n\n\n\n\n\n\nAdd \nBranch Dashboard\n values\n\n\n\n\n\n\n\n\n\n\n\n\nConfirm app prefix\n\n\n\n\n\n\nFrom your \nApple Developer Account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nAndroid Manifest.xml\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nmanifest\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \npackage=\ncom.eneff.branchandroid\n\n\n    \nuses-permission\n \nandroid:name=\nandroid.permission.INTERNET\n \n/\n\n\n    \napplication\n\n        \nandroid:allowBackup=\ntrue\n\n\n        \nandroid:name=\ncom.eneff.branchandroid.CustomApplicationClass\n\n\n        \nandroid:icon=\n@mipmap/ic_launcher\n\n        \nandroid:label=\n@string/app_name\n\n        \nandroid:supportsRtl=\ntrue\n\n        \nandroid:theme=\n@style/AppTheme\n\n\n        \nactivity\n\n            \nandroid:name=\n.MainActivity\n\n\n            \nandroid:launchMode=\nsingleTask\n\n\n            \nandroid:label=\n@string/app_name\n\n            \nandroid:theme=\n@style/AppTheme.NoActionBar\n\n\n            \nintent-filter\n\n                \naction\n \nandroid:name=\nandroid.intent.action.MAIN\n \n/\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.LAUNCHER\n \n/\n\n            \n/intent-filter\n\n\n\n            \n!-- Branch URI Scheme --\n\n\n            \nintent-filter\n\n\n                \ndata\n \nandroid:scheme=\nbranchandroid\n \n/\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n            \n/intent-filter\n\n\n\n\n            \n!-- Branch App Links (optional) --\n\n\n            \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n                \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nuobg.app.link\n \n/\n\n\n            \n/intent-filter\n\n\n        \n/activity\n\n\n\n        \n!-- Branch init --\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey\n \nandroid:value=\nkey_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa\n \n/\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey.test\n \nandroid:value=\nkey_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa\n \n/\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.TestMode\n \nandroid:value=\nfalse\n \n/\n\n\n\n\n        \n!-- Branch install referrer tracking (optional) --\n\n\n        \nreceiver\n \nandroid:name=\nio.branch.referral.InstallListener\n \nandroid:exported=\ntrue\n\n\n            \nintent-filter\n\n\n                \naction\n \nandroid:name=\ncom.android.vending.INSTALL_REFERRER\n \n/\n\n\n            \n/intent-filter\n\n\n        \n/receiver\n\n\n\n    \n/application\n\n\n\n/manifest\n\n\n\n\n\n\n\n\n\nReplace the following with values from your \nBranch Dashboard\n\n\n\n\nbranchandroid\n\n\nuobg.app.link\n\n\nkey_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa\n\n\nkey_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nSwift 3.0 \nAppDelegate.swift\n\n\nAdd \n#import \nreact-native-branch/RNBranch.h\n to your Bridging header.\n\n// Initialize the Branch Session at the top of existing application:didFinishLaunchingWithOptions:\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidFinishLaunchingWithOptions\n:\n \n[\nUIApplicationLaunchOptionsKey\n:\n \nAny\n]?)\n \n-\n \nBool\n \n{\n\n\n    \n// Uncomment this line to use the test key instead of the live one.\n\n\n    \n// RNBranch.useTestInstance()\n\n\n    \nRNBranch\n.\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n,\n \nisReferrable\n:\n \ntrue\n)\n \n// \n-- add this\n\n\n\n    \n//...\n\n\n}\n\n\n\n// Add the openURL and continueUserActivity functions\n\n\nfunc\n \napplication\n(\n_\n \napp\n:\n \nUIApplication\n,\n \nopen\n \nurl\n:\n \nURL\n,\n \noptions\n:\n \n[\nUIApplicationOpenURLOptionsKey\n \n:\n \nAny\n]\n \n=\n \n[:])\n \n-\n \nBool\n \n{\n\n\n    \nreturn\n \nRNBranch\n.\nhandleDeepLink\n(\nurl\n)\n\n\n}\n\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ncontinue\n \nuserActivity\n:\n \nNSUserActivity\n,\n \nrestorationHandler\n:\n \n@\nescaping\n \n([\nAny\n]?)\n \n-\n \nVoid\n)\n \n-\n \nBool\n \n{\n\n\n    \nreturn\n \nRNBranch\n.\ncontinue\n(\nuserActivity\n)\n\n\n}\n\n\n\n\n\n\n\n\nObjective C \nAppDelegate.m\n\n\n#import \nreact-native-branch/RNBranch.h\n \n// at the top\n\n\n\n\n// Initialize the Branch Session at the top of existing application:didFinishLaunchingWithOptions:\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidFinishLaunchingWithOptions:\n(\nNSDictionary\n \n*\n)\nlaunchOptions\n\n\n{\n\n\n    \n// Uncomment this line to use the test key instead of the live one.\n\n\n    \n// [RNBranch useTestInstance]\n\n\n    \n[\nRNBranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nisReferrable\n:\nYES\n];\n \n// \n-- add this\n\n\n\n    \nNSURL\n \n*\njsCodeLocation\n;\n\n    \n//...\n\n\n}\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \nopenURL:\n(\nNSURL\n \n*\n)\nurl\n \nsourceApplication:\n(\nNSString\n \n*\n)\nsourceApplication\n \nannotation:\n(\nid\n)\nannotation\n \n{\n\n\n    \nif\n \n(\n!\n[\nRNBranch\n.\nbranch\n \napplication\n:\napplication\n \nopenURL\n:\nurl\n \nsourceApplication\n:\nsourceApplication\n \nannotation\n:\nannotation\n])\n \n{\n\n\n        \n// do other deep link routing for the Facebook SDK, Pinterest SDK, etc\n\n\n    \n}\n\n\n    \nreturn\n \nYES\n;\n\n\n}\n\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ncontinueUserActivity:\n(\nNSUserActivity\n \n*\n)\nuserActivity\n \nrestorationHandler:\n(\nvoid\n \n(\n^\n)(\nNSArray\n \n*\nrestorableObjects\n))\nrestorationHandler\n \n{\n\n\n    \nreturn\n \n[\nRNBranch\n \ncontinueUserActivity\n:\nuserActivity\n];\n\n\n}\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nMainApplication.java\n\n\n// ...\n\n\n\n// import Branch and RNBranch\n\n\nimport\n \nio.branch.rnbranch.*\n;\n\n\nimport\n \nio.branch.referral.Branch\n;\n\n\n\n\n//...\n\n\n\n// add RNBranchPackage to react-native package list\n\n\n@Override\n\n  \nprotected\n \nList\nReactPackage\n \ngetPackages\n()\n \n{\n\n    \nreturn\n \nArrays\n.\nReactPackage\nasList\n(\n\n            \nnew\n \nMainReactPackage\n(),\n\n\n            \nnew\n \nRNBranchPackage\n(),\n \n// \n-- add this\n\n\n\n\n// ...\n\n\n\n// add onCreate() override\n\n\n@Override\n\n\npublic\n \nvoid\n \nonCreate\n()\n \n{\n\n  \nsuper\n.\nonCreate\n();\n\n\n  \nBranch\n.\ngetAutoInstance\n(\nthis\n);\n\n\n}\n\n\n\n\n\nimport\n \nio.branch.rnbranch.*\n;\n \n// \n-- add this\n\n\nimport\n \nandroid.content.Intent\n;\n \n// \n-- and this\n\n\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nReactActivity\n \n{\n\n\n    \n@Override\n\n    \nprotected\n \nString\n \ngetMainComponentName\n()\n \n{\n\n        \nreturn\n \nbase\n;\n\n    \n}\n\n\n    \n// Override onStart, onNewIntent:\n\n    \n@Override\n\n    \nprotected\n \nvoid\n \nonStart\n()\n \n{\n\n        \nsuper\n.\nonStart\n();\n\n\n        \nRNBranchModule\n.\ninitSession\n(\nthis\n.\ngetIntent\n().\ngetData\n(),\n \nthis\n);\n\n\n    \n}\n\n\n\n    \n@Override\n\n\n    \npublic\n \nvoid\n \nonNewIntent\n(\nIntent\n \nintent\n)\n \n{\n\n\n        \nthis\n.\nsetIntent\n(\nintent\n);\n\n\n    \n}\n\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\n\n\n\nCustomApplicationClass.java\n\n    \nimport\n \nandroid.app.Application\n;\n\n\nimport\n \nio.branch.referral.Branch\n;\n\n\n\n\npublic\n \nclass\n \nCustomApplicationClass\n \nextends\n \nApplication\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonCreate\n()\n \n{\n\n        \nsuper\n.\nonCreate\n();\n\n\n\n        \n// Branch logging for debugging\n\n\n        \nBranch\n.\nenableLogging\n();\n\n\n\n\n        \n// Branch object initialization\n\n\n        \nBranch\n.\ngetAutoInstance\n(\nthis\n);\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link iOS\n\n\n\n\n\n\nCreate a deep link from the \nBranch Marketing Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app with Xcode\n\n\n\n\n\n\nPaste deep link in \nApple Notes\n\n\n\n\n\n\nLong press on the deep link \n(not 3D Touch)\n\n\n\n\n\n\nClick \nOpen in \"APP_NAME\"\n to open your app \n(\nexample\n)\n\n\n\n\n\n\n\n\n\n\nTest deep link Android\n\n\n\n\n\n\nCreate a deep link from the \nBranch Marketing Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app with Android Studio\n\n\n\n\n\n\nPaste deep link in \nGoogle Hangouts\n\n\n\n\n\n\nClick on the deep link to open your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nImport Branch\n\n\n\n\n\n\nindex.ios.js\n/\nindex.android.js\n\n\nimport\n \nbranch\n,\n \n{\n\n  \nAddToCartEvent\n,\n\n  \nAddToWishlistEvent\n,\n\n  \nPurchasedEvent\n,\n\n  \nPurchaseInitiatedEvent\n,\n\n  \nRegisterViewEvent\n,\n\n  \nShareCompletedEvent\n,\n\n  \nShareInitiatedEvent\n\n\n}\n \nfrom\n \nreact-native-branch\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share (content or user)\n\n\n\n\n\n\nUses the \nUniversal Object Properties\n\n\n\n\n\n\n// only canonicalIdentifier is required\n\n\nlet\n \nbranchUniversalObject\n \n=\n \nawait\n \nbranch\n.\ncreateBranchUniversalObject\n(\ncanonicalIdentifier\n,\n \n{\n\n    \nautomaticallyListOnSpotlight\n:\n \ntrue\n,\n\n    \nmetadata\n:\n \n{\nprop1\n:\n \ntest\n,\n \nprop2\n:\n \nabc\n},\n\n    \ntitle\n:\n \nCool Content!\n,\n\n    \ncontentDescription\n:\n \nCool Content Description\n})\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nCreates a deep link URL with encapsulated data\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nlet\n \nlinkProperties\n \n=\n \n{\n\n    \nfeature\n:\n \nshare\n,\n\n    \nchannel\n:\n \nfacebook\n\n\n}\n\n\n\nlet\n \ncontrolParams\n \n=\n \n{\n\n     \n$desktop_url\n:\n \nhttp://desktop-url.com/monster/12345\n\n\n}\n\n\n\nlet\n \n{\nurl\n}\n \n=\n \nawait\n \nbranchUniversalObject\n.\ngenerateShortUrl\n(\nlinkProperties\n,\n \ncontrolParams\n)\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nlet\n \nshareOptions\n \n=\n \n{\n \nmessageHeader\n:\n \nCheck this out\n,\n \nmessageBody\n:\n \nNo really, check this out!\n \n}\n\n\nlet\n \nlinkProperties\n \n=\n \n{\n \nfeature\n:\n \nshare\n,\n \nchannel\n:\n \nRNApp\n \n}\n\n\nlet\n \ncontrolParams\n \n=\n \n{\n \n$desktop_url\n:\n \nhttp://example.com/home\n,\n \n$ios_url\n:\n \nhttp://example.com/ios\n \n}\n\n\nlet\n \n{\nchannel\n,\n \ncompleted\n,\n \nerror\n}\n \n=\n \nawait\n \nbranchUniversalObject\n.\nshowShareSheet\n(\nshareOptions\n,\n \nlinkProperties\n,\n \ncontrolParams\n)\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nListener\n\n\n\n\n\n\n// Subscribe to incoming links (both Branch \n non-Branch)\n\n\nbranch\n.\nsubscribe\n(({\n \nerror\n,\n \nparams\n \n})\n \n=\n \n{\n\n    \nif\n \n(\nparams\n \n \n!\nerror\n)\n \n{\n\n        \n// grab deep link data and route appropriately.\n\n    \n}\n\n\n})\n\n\n\nlet\n \nlastParams\n \n=\n \nawait\n \nbranch\n.\ngetLatestReferringParams\n()\n \n// params from last open\n\n\nlet\n \ninstallParams\n \n=\n \nawait\n \nbranch\n.\ngetFirstReferringParams\n()\n \n// params from original install\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\nTO-DO\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nList content on iOS Spotlight\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nlet\n \nspotlightResult\n \n=\n \nawait\n \nbranchUniversalObject\n.\nlistOnSpotlight\n()\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nTrack content properties\n\n\n\n\n\n\nValidate with the [Branch Dashboard](\nhttps://dashboard.branch.io/liveview/content\n\n\n\n\n\n\nimport\n \nbranch\n,\n \n{\n \nRegisterViewEvent\n \n}\n \nfrom\n \nreact-native-branch\n\n\nbranchUniversalObject\n.\nuserCompletedAction\n(\nRegisterViewEvent\n)\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nbranch\n.\nsetIdentity\n(\ntheUserId\n)\n\n\nbranch\n.\nlogout\n()\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nTrack custom events\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\n63\n max event name length\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nbranchUniversalObject\n.\nuserCompletedAction\n(\nCustom Action\n,\n \n{\n \nkey\n:\n \nvalue\n \n})\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\nTODO\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral points are obtained from events triggered by users from rules created on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits with the \nReferral guide\n\n\n\n\n\n\nRedeem rewards\n\n\nlet\n \nredeemResult\n \n=\n \nawait\n \nbranch\n.\nredeemRewards\n(\namount\n,\n \nbucket\n)\n\n\n\n\n\n\n\n\n\nLoad rewards\n\n\nlet\n \nrewards\n \n=\n \nawait\n \nbranch\n.\nloadRewards\n()\n\n\n\n\n\n\n\n\n\nLoad history\n\n\nlet\n \ncreditHistory\n \n=\n \nawait\n \nbranch\n.\ngetCreditHistory\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nTrack content properties\n\n\n\n\n\n\n\n\nEvent\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRegisterViewEvent\n\n\nUser viewed the object\n\n\n\n\n\n\nAddToWishlistEvent\n\n\nUser added the object to their wishlist\n\n\n\n\n\n\nAddToCartEvent\n\n\nUser added object to cart\n\n\n\n\n\n\nPurchaseInitiatedEvent\n\n\nUser started to check out\n\n\n\n\n\n\nPurchasedEvent\n\n\nUser purchased the item\n\n\n\n\n\n\nShareInitiatedEvent\n\n\nUser started to share the object\n\n\n\n\n\n\nShareCompletedEvent\n\n\nUser completed a share\n\n\n\n\n\n\n\n\n\n\n\n\nSample app\n\n\nExamples", 
            "title": "React Native"
        }, 
        {
            "location": "/pages/apps/react-native/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/react-native/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/react-native/#install-branch", 
            "text": "Option 1: Simple (iOS or Android)  npm   install   -- save   react - native - branch @2.0.0 - beta .7  react - native   link   react - native - branch  \nAdd  pod \"Branch\"  as a dependency in you iOS/Podfile cd ios; pod install --repo-update    Option 2:  CocoaPods  pod  React ,\n  path:  ../node_modules/react-native ,\n  subspecs: %w{\n    Core\n    RCTAnimation\n    RCTImage\n    RCTText\n    RCTNetwork\n    RCTWebSocket\n  }\npod  Yoga , path:  ../node_modules/react-native/ReactCommon/yoga \npod  react-native-branch , path:  ../node_modules/react-native-branch \npod  Branch-SDK , path:  ../node_modules/react-native-branch/ios   cd ios; pod install --repo-update    Option 3:  Carthage  github  BranchMetrics/ios-branch-deep-linking \ncarthage update", 
            "title": "Install Branch"
        }, 
        {
            "location": "/pages/apps/react-native/#configure-app", 
            "text": "iOS    Configure bundle identifier    Bundle Id matches  Branch Dashboard       Configure associated domains    Add  Branch Dashboard  values       Configure entitlements    Confirm entitlements are within target       Configure info.pList    Add  Branch Dashboard  values       Confirm app prefix    From your  Apple Developer Account         Android    Android Manifest.xml  ?xml version= 1.0  encoding= utf-8 ?  manifest   xmlns:android= http://schemas.android.com/apk/res/android \n     package= com.eneff.branchandroid \n\n     uses-permission   android:name= android.permission.INTERNET   / \n\n     application \n         android:allowBackup= true           android:name= com.eneff.branchandroid.CustomApplicationClass           android:icon= @mipmap/ic_launcher \n         android:label= @string/app_name \n         android:supportsRtl= true \n         android:theme= @style/AppTheme \n\n         activity \n             android:name= .MainActivity               android:launchMode= singleTask               android:label= @string/app_name \n             android:theme= @style/AppTheme.NoActionBar \n\n             intent-filter \n                 action   android:name= android.intent.action.MAIN   / \n                 category   android:name= android.intent.category.LAUNCHER   / \n             /intent-filter               !-- Branch URI Scheme --               intent-filter                   data   android:scheme= branchandroid   /                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /               /intent-filter                !-- Branch App Links (optional) --               intent-filter   android:autoVerify= true                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /                   data   android:scheme= https   android:host= uobg.app.link   /               /intent-filter           /activity           !-- Branch init --           meta-data   android:name= io.branch.sdk.BranchKey   android:value= key_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa   /           meta-data   android:name= io.branch.sdk.BranchKey.test   android:value= key_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa   /           meta-data   android:name= io.branch.sdk.TestMode   android:value= false   /            !-- Branch install referrer tracking (optional) --           receiver   android:name= io.branch.referral.InstallListener   android:exported= true               intent-filter                   action   android:name= com.android.vending.INSTALL_REFERRER   /               /intent-filter           /receiver  \n     /application  /manifest     Replace the following with values from your  Branch Dashboard   branchandroid  uobg.app.link  key_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa  key_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/react-native/#initialize-branch", 
            "text": "Swift 3.0  AppDelegate.swift  Add  #import  react-native-branch/RNBranch.h  to your Bridging header. // Initialize the Branch Session at the top of existing application:didFinishLaunchingWithOptions:  func   application ( _   application :   UIApplication ,   didFinishLaunchingWithOptions :   [ UIApplicationLaunchOptionsKey :   Any ]?)   -   Bool   {       // Uncomment this line to use the test key instead of the live one.       // RNBranch.useTestInstance()       RNBranch . initSession ( launchOptions :   launchOptions ,   isReferrable :   true )   //  -- add this  \n     //...  }  // Add the openURL and continueUserActivity functions  func   application ( _   app :   UIApplication ,   open   url :   URL ,   options :   [ UIApplicationOpenURLOptionsKey   :   Any ]   =   [:])   -   Bool   {       return   RNBranch . handleDeepLink ( url )  }   func   application ( _   application :   UIApplication ,   continue   userActivity :   NSUserActivity ,   restorationHandler :   @ escaping   ([ Any ]?)   -   Void )   -   Bool   {       return   RNBranch . continue ( userActivity )  }     Objective C  AppDelegate.m  #import  react-native-branch/RNBranch.h   // at the top   // Initialize the Branch Session at the top of existing application:didFinishLaunchingWithOptions:  -   ( BOOL ) application: ( UIApplication   * ) application   didFinishLaunchingWithOptions: ( NSDictionary   * ) launchOptions  {       // Uncomment this line to use the test key instead of the live one.       // [RNBranch useTestInstance]       [ RNBranch   initSessionWithLaunchOptions : launchOptions   isReferrable : YES ];   //  -- add this  \n     NSURL   * jsCodeLocation ; \n     //...  }  -   ( BOOL ) application: ( UIApplication   * ) application   openURL: ( NSURL   * ) url   sourceApplication: ( NSString   * ) sourceApplication   annotation: ( id ) annotation   {       if   ( ! [ RNBranch . branch   application : application   openURL : url   sourceApplication : sourceApplication   annotation : annotation ])   {           // do other deep link routing for the Facebook SDK, Pinterest SDK, etc       }       return   YES ;  }   -   ( BOOL ) application: ( UIApplication   * ) application   continueUserActivity: ( NSUserActivity   * ) userActivity   restorationHandler: ( void   ( ^ )( NSArray   * restorableObjects )) restorationHandler   {       return   [ RNBranch   continueUserActivity : userActivity ];  }     Android    MainApplication.java  // ...  // import Branch and RNBranch  import   io.branch.rnbranch.* ;  import   io.branch.referral.Branch ;   //...  // add RNBranchPackage to react-native package list  @Override \n   protected   List ReactPackage   getPackages ()   { \n     return   Arrays . ReactPackage asList ( \n             new   MainReactPackage (),               new   RNBranchPackage (),   //  -- add this   // ...  // add onCreate() override  @Override  public   void   onCreate ()   { \n   super . onCreate ();     Branch . getAutoInstance ( this );  }   import   io.branch.rnbranch.* ;   //  -- add this  import   android.content.Intent ;   //  -- and this   public   class   MainActivity   extends   ReactActivity   { \n\n     @Override \n     protected   String   getMainComponentName ()   { \n         return   base ; \n     } \n\n     // Override onStart, onNewIntent: \n     @Override \n     protected   void   onStart ()   { \n         super . onStart ();           RNBranchModule . initSession ( this . getIntent (). getData (),   this );       }       @Override       public   void   onNewIntent ( Intent   intent )   {           this . setIntent ( intent );       }       // ...  }     CustomApplicationClass.java \n     import   android.app.Application ;  import   io.branch.referral.Branch ;   public   class   CustomApplicationClass   extends   Application   { \n     @Override \n     public   void   onCreate ()   { \n         super . onCreate ();           // Branch logging for debugging           Branch . enableLogging ();            // Branch object initialization           Branch . getAutoInstance ( this );       }  }", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/react-native/#test-deep-link-ios", 
            "text": "Create a deep link from the  Branch Marketing Dashboard    Delete your app from the device    Compile your app with Xcode    Paste deep link in  Apple Notes    Long press on the deep link  (not 3D Touch)    Click  Open in \"APP_NAME\"  to open your app  ( example )", 
            "title": "Test deep link iOS"
        }, 
        {
            "location": "/pages/apps/react-native/#test-deep-link-android", 
            "text": "Create a deep link from the  Branch Marketing Dashboard    Delete your app from the device    Compile your app with Android Studio    Paste deep link in  Google Hangouts    Click on the deep link to open your app", 
            "title": "Test deep link Android"
        }, 
        {
            "location": "/pages/apps/react-native/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/react-native/#import-branch", 
            "text": "index.ios.js / index.android.js  import   branch ,   { \n   AddToCartEvent , \n   AddToWishlistEvent , \n   PurchasedEvent , \n   PurchaseInitiatedEvent , \n   RegisterViewEvent , \n   ShareCompletedEvent , \n   ShareInitiatedEvent  }   from   react-native-branch", 
            "title": "Import Branch"
        }, 
        {
            "location": "/pages/apps/react-native/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share (content or user)    Uses the  Universal Object Properties    // only canonicalIdentifier is required  let   branchUniversalObject   =   await   branch . createBranchUniversalObject ( canonicalIdentifier ,   { \n     automaticallyListOnSpotlight :   true , \n     metadata :   { prop1 :   test ,   prop2 :   abc }, \n     title :   Cool Content! , \n     contentDescription :   Cool Content Description })", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/react-native/#create-deep-link", 
            "text": "Creates a deep link URL with encapsulated data    Needs a  Branch Universal Object    Uses  Deep Link Properties    Validate with the  Branch Dashboard    let   linkProperties   =   { \n     feature :   share , \n     channel :   facebook  }  let   controlParams   =   { \n      $desktop_url :   http://desktop-url.com/monster/12345  }  let   { url }   =   await   branchUniversalObject . generateShortUrl ( linkProperties ,   controlParams )", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/react-native/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Needs a  Branch Universal Object    Uses  Deep Link Properties    let   shareOptions   =   {   messageHeader :   Check this out ,   messageBody :   No really, check this out!   }  let   linkProperties   =   {   feature :   share ,   channel :   RNApp   }  let   controlParams   =   {   $desktop_url :   http://example.com/home ,   $ios_url :   http://example.com/ios   }  let   { channel ,   completed ,   error }   =   await   branchUniversalObject . showShareSheet ( shareOptions ,   linkProperties ,   controlParams )", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/react-native/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Listener    // Subscribe to incoming links (both Branch   non-Branch)  branch . subscribe (({   error ,   params   })   =   { \n     if   ( params     ! error )   { \n         // grab deep link data and route appropriately. \n     }  })  let   lastParams   =   await   branch . getLatestReferringParams ()   // params from last open  let   installParams   =   await   branch . getFirstReferringParams ()   // params from original install", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/react-native/#navigate-to-content", 
            "text": "TO-DO", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/react-native/#display-content", 
            "text": "List content on iOS Spotlight    Needs a  Branch Universal Object    let   spotlightResult   =   await   branchUniversalObject . listOnSpotlight ()", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/react-native/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Branch Universal Object    Uses  Track content properties    Validate with the [Branch Dashboard]( https://dashboard.branch.io/liveview/content    import   branch ,   {   RegisterViewEvent   }   from   react-native-branch  branchUniversalObject . userCompletedAction ( RegisterViewEvent )", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/react-native/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    Validate with the  Branch Dashboard    branch . setIdentity ( theUserId )  branch . logout ()", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/react-native/#track-events", 
            "text": "Track custom events    Events named  open ,  close ,  install , and  referred session  are Branch restricted    63  max event name length    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard    branchUniversalObject . userCompletedAction ( Custom Action ,   {   key :   value   })", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/react-native/#track-commerce", 
            "text": "TODO", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/react-native/#handle-referrals", 
            "text": "Referral points are obtained from events triggered by users from rules created on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits with the  Referral guide    Redeem rewards  let   redeemResult   =   await   branch . redeemRewards ( amount ,   bucket )     Load rewards  let   rewards   =   await   branch . loadRewards ()     Load history  let   creditHistory   =   await   branch . getCreditHistory ()", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/react-native/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/react-native/#track-content-properties", 
            "text": "Event  Description      RegisterViewEvent  User viewed the object    AddToWishlistEvent  User added the object to their wishlist    AddToCartEvent  User added object to cart    PurchaseInitiatedEvent  User started to check out    PurchasedEvent  User purchased the item    ShareInitiatedEvent  User started to share the object    ShareCompletedEvent  User completed a share", 
            "title": "Track content properties"
        }, 
        {
            "location": "/pages/apps/react-native/#sample-app", 
            "text": "Examples", 
            "title": "Sample app"
        }, 
        {
            "location": "/pages/apps/unity/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\nCustomize your app.link domain:\n\n\n\n\n\n\n\n\n\n\n\n\nGet the Branch SDK\n\n\n\n\n\n\nDownload the latest SDK version\n or clone our \nopen-source GitHub repository\n.\n\n\n\n\n\n\nImport the \nBranchUnityWrapper.unitypackage\n into your project by clicking \nAssets -\n Import Package\n.\n\n\n\n\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\nAdd the Branch prefab asset to the \nfirst scene\n of your Unity project \n\n\n\n\n\n\nUpdate your Branch prefab\n\n\n\n\n\n\nDo not forget to click on the \nUpdate iOS Wrapper\n and the \nUpdate Android Manifest\n buttons once you are done.\n\n\n\n\n\n\n\n\nPrefab fields\n\n\n\n\n\n\n\n\nField name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSimulate Fresh Installs\n\n\nThis checkbox enables debug mode. This allows you to simulate fresh every time you uninstall and reinstall the app. Please make sure to uncheck this box before releasing your app.\n\n\n\n\n\n\nTest Mode\n\n\nThis checkbox picks the test key from your Branch prefab. If this box is unchecked, by default, your live Branch key is used.\n\n\n\n\n\n\nTest Branch Key\n\n\nThis is the test Branch key found on the \nLink Settings page\n of your Test Branch app\n\n\n\n\n\n\nTest Branch URI\n\n\nThis is the test URI scheme that you have set for your app on the \nLink Settings page\n for your Test Branch app\n\n\n\n\n\n\nTest Android Path Prefix\n\n\nThis field is only applicable if you are on the \nbnc.lt\n domain of your Test Branch app. You can find it underneath the field labeled SHA256 Cert Fingerprints on the \nLink Settings page\n once you\u2019ve enabled App Links. It will look something like this: \n/WSuf\n (the initial / character should be included).\n\n\n\n\n\n\nTest App Links\n\n\nThis field is applicable if you want to enable \nAPPLINKS\n and \nUNIVERSAL LINKS\n for your domain. Please make sure to add the correct domain found on the bottom of the \nLink Settings page\n of your Test Branch app. Add the -alternate domain to have your Branch links deeplink from your \nDeepviews\n and \nJourneys\n. If you are not using a \napp.links\n domain please write into \n\n\n\n\n\n\nLive Branch Key\n\n\nThis is the Live Branch key found on the \nLink Settings page\n of your Live Branch app\n\n\n\n\n\n\nLive Branch URI\n\n\nThis is the Live URI scheme that you have set for your app on the \nLink Settings page\n for your Live Branch app\n\n\n\n\n\n\nLive Android Path Prefix\n\n\nThis field is only applicable if you are on the \nbnc.lt\n domain \nLink Settings page\n for your Live Branch app. You can find it underneath the field labeled SHA256 Cert Fingerprints on the \nLink Settings page\n once you\u2019ve enabled App Links. It will look something like this: \n/WSuf\n (the initial / character should be included).\n\n\n\n\n\n\nLive App Links\n\n\nThis field is applicable if you want to enable \nAPPLINKS\n and \nUNIVERSAL LINKS\n for your domain. Please make sure to add the correct domain found on the bottom of the \nLink Settings page\n of your Live Branch app. Add the -alternate domain to have your Branch links deeplink from your \nDeepviews\n and \nJourneys\n. If you are not using a \napp.links\n domain please write into \n\n\n\n\n\n\n\n\n\n\nNote for Android\n\n\nOccasionally, Android will barf after you add our library due to generic issues unrelated to Branch. Please see this \nAndroid troubleshooting section\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nAdd Branch to your \nMonobehavior\n script of your \nfirst Scene\n\n\nusing\n \nUnityEngine\n;\n\n\nusing\n \nSystem.Collections\n;\n\n\n\npublic\n \nclass\n \nSpin\n \n:\n \nMonoBehaviour\n \n{\n\n\n    \n// Use this for initialization\n\n    \nvoid\n \nStart\n \n()\n \n{\n\n\n        \nBranch\n.\ninitSession\n(\nCallbackWithBranchUniversalObject\n);\n\n\n    \n}\n\n\n\n    \nvoid\n \nCallbackWithBranchUniversalObject\n(\nBranchUniversalObject\n \nbuo\n,\n \n\n                                            \nBranchLinkProperties\n \nlinkProps\n,\n \n\n                                            \nstring\n \nerror\n)\n \n{\n\n\n        \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n\n            \nSystem\n.\nConsole\n.\nWriteLine\n(\nError : \n \n\n                                    \n+\n \nerror\n);\n\n\n        \n}\n \nelse\n \nif\n \n(\nlinkProperties\n.\ncontrolParams\n.\nCount\n \n \n0\n)\n \n{\n\n\n            \nSystem\n.\nConsole\n.\nWriteLine\n(\nDeeplink params : \n \n\n                                    \n+\n \nbuo\n.\nToJsonString\n()\n \n\n                                    \n+\n \nlinkProps\n.\nToJsonString\n());\n\n\n        \n}\n\n\n    \n}\n\n\n\n\n    \n// Update is called once per frame\n\n    \nvoid\n \nUpdate\n \n()\n \n{\n\n        \n//rotate 90 degress per second\n\n        \ntransform\n.\nRotate\n(\nVector3\n.\nup\n \n*\n \nTime\n.\ndeltaTime\n*\n90\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link\n\n\n\n\n\n\nCreate a Quick link\n on the Branch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nPaste Quick link in \nGoogle Hangouts (Android)\n or \nNotes (iOS)\n\n\n\n\n\n\nClick on the Quick link to open your app\n\n\n\n\n\n\nCompile and download your app to your device\n\n\n\n\n\n\nYou should see deferred deep link data show in your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share with your link\n\n\nBranchUniversalObject\n \nuniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n();\n\n\n// Content index mode: 0 - private mode, 1 - public mode\n\n\nuniversalObject\n.\ncontentIndexMode\n \n=\n \n1\n;\n\n\n//Identifier that helps Branch dedupe across many instances of the same content.\n\n\nuniversalObject\n.\ncanonicalIdentifier\n \n=\n \nid12345\n;\n\n\n// OG title\n\n\nuniversalObject\n.\ntitle\n \n=\n \nid12345 title\n;\n\n\n// OG Description\n\n\nuniversalObject\n.\ncontentDescription\n \n=\n \nMy awesome piece of content!\n;\n\n\n// OG Image\n\n\nuniversalObject\n.\nimageUrl\n \n=\n \nhttps://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png\n;\n\n\n// User defined key value pair\n\n\nuniversalObject\n.\nmetadata\n.\nAdd\n(\nfoo\n,\n \nbar\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nAfter you have created a \nBranch Universal Object\n, Define Link Properties\n\n\nBranchLinkProperties\n \nlinkProperties\n \n=\n \nnew\n \nBranchLinkProperties\n();\n\n\nlinkProperties\n.\ntags\n.\nAdd\n(\ntag1\n);\n\n\nlinkProperties\n.\ntags\n.\nAdd\n(\ntag2\n);\n\n\n// Feature link is associated with. Eg. Sharing\n\n\nlinkProperties\n.\nfeature\n \n=\n \ninvite\n;\n\n\n// The channel where you plan on sharing the link Eg.Facebook, Twitter, SMS etc\n\n\nlinkProperties\n.\nchannel\n \n=\n \nTwitter\n;\n\n\n// The Campaign that drives this link\n\n\nlinkProperties\n.\ncampaign\n \n=\n \nreferral\n;\n\n\nlinkProperties\n.\nstage\n \n=\n \n2\n;\n\n\n// Parameters used to control Link behavior\n\n\nlinkProperties\n.\ncontrolParams\n.\nAdd\n(\n$desktop_url\n,\n \nhttp://example.com\n);\n\n\n\n\n\n\n\n\n\nGenerate a Branch link\n\n\nBranch\n.\ngetShortURL\n(\nuniversalObject\n,\n \nlinkProperties\n,\n \n(\nparams\n,\n \nerror\n)\n \n=\n \n{\n\n    \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n        \nDebug\n.\nLogError\n(\nBranch.getShortURL failed: \n \n+\n \nerror\n);\n\n    \n}\n \nelse\n \nif\n \n(\nparams\n \n!=\n \nnull\n)\n \n{\n\n        \nDebug\n.\nLog\n(\nBranch.getShortURL shared params: \n \n+\n \nurl\n);\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nShare deep links between users and apps\n\n\nBranch\n.\nshareLink\n(\nuniversalObject\n,\n \nlinkProperties\n,\n \nSharing link: \n,\n \n(\nurl\n,\n \nerror\n)\n \n=\n \n{\n\n    \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n        \nDebug\n.\nLogError\n(\nBranch.shareLink failed: \n \n+\n \nerror\n);\n\n    \n}\n \nelse\n \n{\n\n        \nDebug\n.\nLog\n(\nBranch.shareLink shared params: \n \n+\n \nurl\n);\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRead Deeplink params from a \nBUO\n in your \nBranchInitSession callback\n\n\npublic\n \nvoid\n \nCallbackWithBranchUniversalObject\n(\nBranchUniversalObject\n \nuniversalObject\n,\n \nBranchLinkProperties\n \nlinkProperties\n,\n \nstring\n \nerror\n)\n \n{\n\n    \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n        \nDebug\n.\nLogError\n(\nBranch Error: \n \n+\n \nerror\n);\n\n    \n}\n \nelse\n \n{\n\n        \nDebug\n.\nLog\n(\nBranch initialization completed: \n);\n\n        \nDebug\n.\nLog\n(\nUniversal Object: \n \n+\n \nuniversalObject\n.\nToJsonString\n());\n\n        \nDebug\n.\nLog\n(\nLink Properties: \n \n+\n \nlinkProperties\n.\nToJsonString\n());\n\n    \n}\n\n\n}\n\n\n\n\n\nRead session (install or open) parameters from anywhere after Branch initsession\n\n\nBranchUniversalObject\n \nobj\n \n=\n \nBranch\n.\ngetLatestReferringBranchUniversalObject\n();\n\n\nBranchLinkProperties\n \nlink\n \n=\n \nBranch\n.\ngetLatestReferringBranchLinkProperties\n();\n\n\n\n\n\n\n\nThis refereshes with every session (App Installs and App Opens)\n\n\n\n\nRead install (install or open) parameters from anywhere after Branch initsession\n\n\nBranchUniversalObject\n \nobj\n \n=\n \nBranch\n.\ngetFirstReferringBranchUniversalObject\n();\n\n\nBranchLinkProperties\n \nlink\n \n=\n \nBranch\n.\ngetFirstReferringBranchLinkProperties\n();\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate and Display content\n\n\n\n\n\n\nUse the link parameters to decide which view you wish to load\n\n\npublic\n \nclass\n \nMyCoolBehaviorScript\n \n:\n \nMonoBehaviour\n \n{\n\n    \nvoid\n \nStart\n \n()\n \n{\n\n        \nBranch\n.\ninitSession\n(\ndelegate\n(\nDictionary\nstring\n,\n \nobject\n \nparameters\n,\n \nstring\n \nerror\n)\n \n{\n\n            \nif\n \n(\nparameters\n.\nContainsKey\n(\npicture_id\n)\n \n{\n\n                \n// load the Scene to show the picture\n\n                \nSceneManager\n.\nLoadSceneAsync\n(\nImageScene\n,\n \nLoadSceneMode\n.\nAdditive\n);\n\n            \n}\n \nelse\n \n{\n\n                \n// load your normal Scene\n\n                \nSceneManager\n.\nLoadSceneAsync\n(\nNormalScene\n,\n \nLoadSceneMode\n.\nSingle\n);\n\n            \n}\n\n        \n});\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nIf you want to track the number of times a user views a BUO content\n\n\nBranch\n.\nregisterView\n(\nuniversalObject\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSet User-Ids on Login/Register\n\n\nBranch\n.\nsetIdentity\n(\nyour user id\n);\n\n\n\n\n\n\n\n\n\nUnSet User-Ids on logout\n\n\nBranch\n.\nlogout\n();\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nTrack custom events\n\n\nBranch\n.\nuserCompletedAction\n(\nyour_custom_event\n);\n \n\n\n\n\n\n\n\n\nStore meta data with these custom events\n\n\nDictionary\nstring\n,\n \nobject\n \nstateItems\n \n=\n \nnew\n \nDictionary\nstring\n,\n \nobject\n\n\n{\n\n    \n{\n \nusername\n,\n \nJoe\n \n},\n\n    \n{\n \ndescription\n,\n \nJoe likes long walks on the beach...\n \n}\n\n\n};\n\n\nBranch\n.\nuserCompletedAction\n(\nyour_custom_event\n,\n \nstateItems\n);\n \n// same 63 characters max limit\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nTypical Referral Flow\n\n\n\n\nSetup a Reward rule on your \nBranch Dashboard\n.\n\n\nReferrer has his/her identity set at \nlogin/signup\n\n\nReferrer \ncreates\n a Branch link.\n\n\nReferrer \nshares\n the Branch link.\n\n\nReferee clicks on the Branch link, installs the app.\n\n\nThe referee has his/her identity set at \nlogin/signup\n\n\nReferee \ntriggers a custom event\n after login/Signup.\n\n\nUse the following SDK methods to see a user's \ncurrent credits\n, \nredeem credits\n and check a user's entire \ncredit history\n.\n\n\n\n\n\n\n\n\nGet Reward balance\n\n\nBranch\n.\nloadRewards\n(\ndelegate\n(\nbool\n \nchanged\n,\n \nstring\n \nerror\n)\n \n{\n\n    \n// changed boolean will indicate if the balance changed from what is currently in memory\n\n\n    \n// will return the balance of the current user\ns credits\n\n    \nint\n \ncredits\n \n=\n \nBranch\n.\ngetCredits\n();\n\n\n});\n\n\n\n\n\n\n\n\n\nRedeem Rewards\n\n\nBranch\n.\nredeemRewards\n(\n5\n);\n\n\n\n\n\n\n\n\n\nGet Credit History\n\n\nBranch\n.\ngetCreditHistory\n(\ndelegate\n(\nList\nstring\n \nhistoryItems\n,\n \nstring\n \nerror\n)\n \n{\n\n    \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n    \n// process history\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\niOS + Unity 4.6 Note\n\n\nBranch requires ARC, and we don\u2019t intend to add checks thoughout the SDK to try and support pre-ARC. \nHowever, you can add flags to the project to compile the Branch files with ARC. If you wish to do this \nadd \n-fobjc-arc\n to all Branch files.\n\n\n\n\nNote: we by default have this flag checked, but please check before building for iOS.\n\n\n\n\n\n\n\n\nAndroid - Using your own Custom Application Class\n\n\nIf you are using your own Custom Application class, you will need to add Branch android library into your project and call the following in method OnCreate():\n\n\nBranch\n.\ngetAutoInstance\n(\nthis\n.\ngetApplicationContext\n());\n\n\n\n\n\nIf you are using your own custom Activity class, please make sure that you are overridding the following Activities:\n\n\n@Override\n\n\npublic\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n    \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n\n}\n\n\n\n@Override\n\n\npublic\n \nvoid\n \nonNewIntent\n(\nIntent\n \nintent\n)\n \n{\n\n    \nthis\n.\nsetIntent\n(\nintent\n);\n\n\n}\n\n\n\n\n\n\n\n\n\nSupport Branch with different Plugins\n\n\nThe Branch SDK has its own custom \nactivity\n and \napplication\n class. Other plugins that use their own \ncustom activity and application classes can cause \"conflicts\" between these classes. To resolve these conflicts:\n\n\n\n\nCreate a empty android library\n\n\nAdd the Branch plugin along with the other plugins into your project\n\n\nCreate a custom Activity and Application class that will contain the custom logic for all your plugins\n\n\nBuild your library\n\n\nAdd your library into Unity project\n\n\nChange android:name to name of your custom Application class in the \napplication\n tag of your Manifest\n\n\nChange android:name to name of your custom Activity class in the \nactivity\n tag of your Manifest\n\n\n\n\n\n\n\n\nSupport several IMPL_APP_CONTROLLER_SUBCLASS\n\n\nThe Branch Unity SDK plugin uses its own UnityAppController that expands default AppController. This is used to catch Universal Links.\n\n\n@interface\n \nBranchAppController\n \n:\n \nUnityAppController\n\n\n{\n\n\n}\n\n\n@end\n\n\n\n@implementation\n \nBranchAppController\n\n\n\n-\n \n(\nBOOL\n)\napplication\n:(\nUIApplication\n \n*)\napplication\n \ncontinueUserActivity\n:(\nNSUserActivity\n \n*)\nuserActivity\n \nrestorationHandler\n:(\nvoid\n \n(^)(\nNSArray\n \n*))\nrestorationHandler\n \n{\n\n    \nBOOL\n \nhandledByBranch\n \n=\n \n[[\nBranchUnityWrapper\n \nsharedInstance\n]\n \ncontinueUserActivity\n:\nuserActivity\n];\n\n    \nreturn\n \nhandledByBranch\n;\n\n\n}\n\n\n\n@end\n\n\n\nIMPL_APP_CONTROLLER_SUBCLASS\n(\nBranchAppController\n)\n\n\n\n\n\nSome Plugins expand the default AppController the same was as Branch does like Cardboard SDK plugin. To resolve conflicts:\n\n\n\n\nMerge all custom AppControllers in one.\n\n\nComment code in other AppControllers (or delete other AppControllers).\n\n\n\n\n\n\n\n\nSample app\n\n\n\n\nBranch Testbed app\n\n\nCode Samples\n for resolving conflicts with other 3rd party plugins", 
            "title": "Unity"
        }, 
        {
            "location": "/pages/apps/unity/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/unity/#configure-branch", 
            "text": "Complete your  Branch Dashboard     Customize your app.link domain:", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/unity/#get-the-branch-sdk", 
            "text": "Download the latest SDK version  or clone our  open-source GitHub repository .    Import the  BranchUnityWrapper.unitypackage  into your project by clicking  Assets -  Import Package .", 
            "title": "Get the Branch SDK"
        }, 
        {
            "location": "/pages/apps/unity/#configure-app", 
            "text": "Add the Branch prefab asset to the  first scene  of your Unity project", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/unity/#update-your-branch-prefab", 
            "text": "Do not forget to click on the  Update iOS Wrapper  and the  Update Android Manifest  buttons once you are done.", 
            "title": "Update your Branch prefab"
        }, 
        {
            "location": "/pages/apps/unity/#prefab-fields", 
            "text": "Field name  Description      Simulate Fresh Installs  This checkbox enables debug mode. This allows you to simulate fresh every time you uninstall and reinstall the app. Please make sure to uncheck this box before releasing your app.    Test Mode  This checkbox picks the test key from your Branch prefab. If this box is unchecked, by default, your live Branch key is used.    Test Branch Key  This is the test Branch key found on the  Link Settings page  of your Test Branch app    Test Branch URI  This is the test URI scheme that you have set for your app on the  Link Settings page  for your Test Branch app    Test Android Path Prefix  This field is only applicable if you are on the  bnc.lt  domain of your Test Branch app. You can find it underneath the field labeled SHA256 Cert Fingerprints on the  Link Settings page  once you\u2019ve enabled App Links. It will look something like this:  /WSuf  (the initial / character should be included).    Test App Links  This field is applicable if you want to enable  APPLINKS  and  UNIVERSAL LINKS  for your domain. Please make sure to add the correct domain found on the bottom of the  Link Settings page  of your Test Branch app. Add the -alternate domain to have your Branch links deeplink from your  Deepviews  and  Journeys . If you are not using a  app.links  domain please write into     Live Branch Key  This is the Live Branch key found on the  Link Settings page  of your Live Branch app    Live Branch URI  This is the Live URI scheme that you have set for your app on the  Link Settings page  for your Live Branch app    Live Android Path Prefix  This field is only applicable if you are on the  bnc.lt  domain  Link Settings page  for your Live Branch app. You can find it underneath the field labeled SHA256 Cert Fingerprints on the  Link Settings page  once you\u2019ve enabled App Links. It will look something like this:  /WSuf  (the initial / character should be included).    Live App Links  This field is applicable if you want to enable  APPLINKS  and  UNIVERSAL LINKS  for your domain. Please make sure to add the correct domain found on the bottom of the  Link Settings page  of your Live Branch app. Add the -alternate domain to have your Branch links deeplink from your  Deepviews  and  Journeys . If you are not using a  app.links  domain please write into       Note for Android  Occasionally, Android will barf after you add our library due to generic issues unrelated to Branch. Please see this  Android troubleshooting section", 
            "title": "Prefab fields"
        }, 
        {
            "location": "/pages/apps/unity/#initialize-branch", 
            "text": "Add Branch to your  Monobehavior  script of your  first Scene  using   UnityEngine ;  using   System.Collections ;  public   class   Spin   :   MonoBehaviour   { \n\n     // Use this for initialization \n     void   Start   ()   {           Branch . initSession ( CallbackWithBranchUniversalObject );       }       void   CallbackWithBranchUniversalObject ( BranchUniversalObject   buo ,                                                BranchLinkProperties   linkProps ,                                                string   error )   {           if   ( error   !=   null )   {               System . Console . WriteLine ( Error :                                         +   error );           }   else   if   ( linkProperties . controlParams . Count     0 )   {               System . Console . WriteLine ( Deeplink params :                                         +   buo . ToJsonString ()                                        +   linkProps . ToJsonString ());           }       }        // Update is called once per frame \n     void   Update   ()   { \n         //rotate 90 degress per second \n         transform . Rotate ( Vector3 . up   *   Time . deltaTime * 90 ); \n     }  }", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/unity/#test-deep-link", 
            "text": "Create a Quick link  on the Branch Dashboard    Delete your app from the device    Paste Quick link in  Google Hangouts (Android)  or  Notes (iOS)    Click on the Quick link to open your app    Compile and download your app to your device    You should see deferred deep link data show in your app", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/unity/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/unity/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share with your link  BranchUniversalObject   universalObject   =   new   BranchUniversalObject ();  // Content index mode: 0 - private mode, 1 - public mode  universalObject . contentIndexMode   =   1 ;  //Identifier that helps Branch dedupe across many instances of the same content.  universalObject . canonicalIdentifier   =   id12345 ;  // OG title  universalObject . title   =   id12345 title ;  // OG Description  universalObject . contentDescription   =   My awesome piece of content! ;  // OG Image  universalObject . imageUrl   =   https://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png ;  // User defined key value pair  universalObject . metadata . Add ( foo ,   bar );", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/unity/#create-deep-link", 
            "text": "After you have created a  Branch Universal Object , Define Link Properties  BranchLinkProperties   linkProperties   =   new   BranchLinkProperties ();  linkProperties . tags . Add ( tag1 );  linkProperties . tags . Add ( tag2 );  // Feature link is associated with. Eg. Sharing  linkProperties . feature   =   invite ;  // The channel where you plan on sharing the link Eg.Facebook, Twitter, SMS etc  linkProperties . channel   =   Twitter ;  // The Campaign that drives this link  linkProperties . campaign   =   referral ;  linkProperties . stage   =   2 ;  // Parameters used to control Link behavior  linkProperties . controlParams . Add ( $desktop_url ,   http://example.com );     Generate a Branch link  Branch . getShortURL ( universalObject ,   linkProperties ,   ( params ,   error )   =   { \n     if   ( error   !=   null )   { \n         Debug . LogError ( Branch.getShortURL failed:    +   error ); \n     }   else   if   ( params   !=   null )   { \n         Debug . Log ( Branch.getShortURL shared params:    +   url ); \n     }  });", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/unity/#share-deep-link", 
            "text": "Share deep links between users and apps  Branch . shareLink ( universalObject ,   linkProperties ,   Sharing link:  ,   ( url ,   error )   =   { \n     if   ( error   !=   null )   { \n         Debug . LogError ( Branch.shareLink failed:    +   error ); \n     }   else   { \n         Debug . Log ( Branch.shareLink shared params:    +   url ); \n     }  });", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/unity/#read-deep-link", 
            "text": "Read Deeplink params from a  BUO  in your  BranchInitSession callback  public   void   CallbackWithBranchUniversalObject ( BranchUniversalObject   universalObject ,   BranchLinkProperties   linkProperties ,   string   error )   { \n     if   ( error   !=   null )   { \n         Debug . LogError ( Branch Error:    +   error ); \n     }   else   { \n         Debug . Log ( Branch initialization completed:  ); \n         Debug . Log ( Universal Object:    +   universalObject . ToJsonString ()); \n         Debug . Log ( Link Properties:    +   linkProperties . ToJsonString ()); \n     }  }", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/unity/#read-session-install-or-open-parameters-from-anywhere-after-branch-initsession", 
            "text": "BranchUniversalObject   obj   =   Branch . getLatestReferringBranchUniversalObject ();  BranchLinkProperties   link   =   Branch . getLatestReferringBranchLinkProperties ();    This refereshes with every session (App Installs and App Opens)", 
            "title": "Read session (install or open) parameters from anywhere after Branch initsession"
        }, 
        {
            "location": "/pages/apps/unity/#read-install-install-or-open-parameters-from-anywhere-after-branch-initsession", 
            "text": "BranchUniversalObject   obj   =   Branch . getFirstReferringBranchUniversalObject ();  BranchLinkProperties   link   =   Branch . getFirstReferringBranchLinkProperties ();", 
            "title": "Read install (install or open) parameters from anywhere after Branch initsession"
        }, 
        {
            "location": "/pages/apps/unity/#navigate-and-display-content", 
            "text": "Use the link parameters to decide which view you wish to load  public   class   MyCoolBehaviorScript   :   MonoBehaviour   { \n     void   Start   ()   { \n         Branch . initSession ( delegate ( Dictionary string ,   object   parameters ,   string   error )   { \n             if   ( parameters . ContainsKey ( picture_id )   { \n                 // load the Scene to show the picture \n                 SceneManager . LoadSceneAsync ( ImageScene ,   LoadSceneMode . Additive ); \n             }   else   { \n                 // load your normal Scene \n                 SceneManager . LoadSceneAsync ( NormalScene ,   LoadSceneMode . Single ); \n             } \n         }); \n     }  }", 
            "title": "Navigate and Display content"
        }, 
        {
            "location": "/pages/apps/unity/#track-content", 
            "text": "If you want to track the number of times a user views a BUO content  Branch . registerView ( universalObject );", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/unity/#track-users", 
            "text": "", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/unity/#set-user-ids-on-loginregister", 
            "text": "Branch . setIdentity ( your user id );", 
            "title": "Set User-Ids on Login/Register"
        }, 
        {
            "location": "/pages/apps/unity/#unset-user-ids-on-logout", 
            "text": "Branch . logout ();", 
            "title": "UnSet User-Ids on logout"
        }, 
        {
            "location": "/pages/apps/unity/#track-events", 
            "text": "", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/unity/#track-custom-events", 
            "text": "Branch . userCompletedAction ( your_custom_event );", 
            "title": "Track custom events"
        }, 
        {
            "location": "/pages/apps/unity/#store-meta-data-with-these-custom-events", 
            "text": "Dictionary string ,   object   stateItems   =   new   Dictionary string ,   object  { \n     {   username ,   Joe   }, \n     {   description ,   Joe likes long walks on the beach...   }  };  Branch . userCompletedAction ( your_custom_event ,   stateItems );   // same 63 characters max limit", 
            "title": "Store meta data with these custom events"
        }, 
        {
            "location": "/pages/apps/unity/#handle-referrals", 
            "text": "", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/unity/#typical-referral-flow", 
            "text": "Setup a Reward rule on your  Branch Dashboard .  Referrer has his/her identity set at  login/signup  Referrer  creates  a Branch link.  Referrer  shares  the Branch link.  Referee clicks on the Branch link, installs the app.  The referee has his/her identity set at  login/signup  Referee  triggers a custom event  after login/Signup.  Use the following SDK methods to see a user's  current credits ,  redeem credits  and check a user's entire  credit history .", 
            "title": "Typical Referral Flow"
        }, 
        {
            "location": "/pages/apps/unity/#get-reward-balance", 
            "text": "Branch . loadRewards ( delegate ( bool   changed ,   string   error )   { \n     // changed boolean will indicate if the balance changed from what is currently in memory \n\n     // will return the balance of the current user s credits \n     int   credits   =   Branch . getCredits ();  });", 
            "title": "Get Reward balance"
        }, 
        {
            "location": "/pages/apps/unity/#redeem-rewards", 
            "text": "Branch . redeemRewards ( 5 );", 
            "title": "Redeem Rewards"
        }, 
        {
            "location": "/pages/apps/unity/#get-credit-history", 
            "text": "Branch . getCreditHistory ( delegate ( List string   historyItems ,   string   error )   { \n     if   ( error   ==   null )   { \n     // process history \n     }  });", 
            "title": "Get Credit History"
        }, 
        {
            "location": "/pages/apps/unity/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/unity/#ios-unity-46-note", 
            "text": "Branch requires ARC, and we don\u2019t intend to add checks thoughout the SDK to try and support pre-ARC. \nHowever, you can add flags to the project to compile the Branch files with ARC. If you wish to do this \nadd  -fobjc-arc  to all Branch files.   Note: we by default have this flag checked, but please check before building for iOS.", 
            "title": "iOS + Unity 4.6 Note"
        }, 
        {
            "location": "/pages/apps/unity/#android-using-your-own-custom-application-class", 
            "text": "If you are using your own Custom Application class, you will need to add Branch android library into your project and call the following in method OnCreate():  Branch . getAutoInstance ( this . getApplicationContext ());   If you are using your own custom Activity class, please make sure that you are overridding the following Activities:  @Override  public   void   onCreate ( Bundle   savedInstanceState )   { \n     super . onCreate ( savedInstanceState );  }  @Override  public   void   onNewIntent ( Intent   intent )   { \n     this . setIntent ( intent );  }", 
            "title": "Android - Using your own Custom Application Class"
        }, 
        {
            "location": "/pages/apps/unity/#support-branch-with-different-plugins", 
            "text": "The Branch SDK has its own custom  activity  and  application  class. Other plugins that use their own \ncustom activity and application classes can cause \"conflicts\" between these classes. To resolve these conflicts:   Create a empty android library  Add the Branch plugin along with the other plugins into your project  Create a custom Activity and Application class that will contain the custom logic for all your plugins  Build your library  Add your library into Unity project  Change android:name to name of your custom Application class in the  application  tag of your Manifest  Change android:name to name of your custom Activity class in the  activity  tag of your Manifest", 
            "title": "Support Branch with different Plugins"
        }, 
        {
            "location": "/pages/apps/unity/#support-several-impl_app_controller_subclass", 
            "text": "The Branch Unity SDK plugin uses its own UnityAppController that expands default AppController. This is used to catch Universal Links.  @interface   BranchAppController   :   UnityAppController  {  }  @end  @implementation   BranchAppController  -   ( BOOL ) application :( UIApplication   *) application   continueUserActivity :( NSUserActivity   *) userActivity   restorationHandler :( void   (^)( NSArray   *)) restorationHandler   { \n     BOOL   handledByBranch   =   [[ BranchUnityWrapper   sharedInstance ]   continueUserActivity : userActivity ]; \n     return   handledByBranch ;  }  @end  IMPL_APP_CONTROLLER_SUBCLASS ( BranchAppController )   Some Plugins expand the default AppController the same was as Branch does like Cardboard SDK plugin. To resolve conflicts:   Merge all custom AppControllers in one.  Comment code in other AppControllers (or delete other AppControllers).", 
            "title": "Support several IMPL_APP_CONTROLLER_SUBCLASS"
        }, 
        {
            "location": "/pages/apps/unity/#sample-app", 
            "text": "Branch Testbed app  Code Samples  for resolving conflicts with other 3rd party plugins", 
            "title": "Sample app"
        }, 
        {
            "location": "/pages/apps/xamarin/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nBranch links consist of an app-specific base domain (\ntestbed-xamarin.app.link\n, for example) followed by an alphanumeric suffix. This suffix, referred to as the \nalias\n, can be either randomly generated (\nFCIWxFeBGx\n, for example) or manually-defined (\ntestlink\n, for example). The app-specific base domain used to create the links is termed the \nBranch link domain\n.\n\n\nA Branch-integrated app called TestBed-Xamarin and assigned the dafult Branch link domain \ntestbed-xamarin.app.link\n has the following Branch links:\n\n\n\n\nhttps://testbed-xamarin.app.link/FCIWxFeBGx\n\n\nhttps://testbed-xamarin.app.link/testlink\n\n\n\n\nNote that when using the 'app.link' default link domain there is a second, alternate, form of the link domain that comes into play when displaying Branch Deepviews - the \nalternate link domain\n. This \nalternate link domain\n sees the domain's '.app.link' string replaced by '-alternate.app.link'. If you are using a default app.link link domain, both the regular and alternate domains will be needed when configuring a project to support deep linking.\n\n\nBranch keys\n\n\nBranch keys consist of a prefix (\nkey_live_\n or \nkey_test_\n) followed by a string of 32 aphanumeric characters (\nkey_live_kdzhBMBYt5Pi4g4DVRfQbdkbqDlm5rIv\n, for example). Branch keys are used to associate apps with Branch links. An app's Branch key is required to initialize the Branch SDK. Data associated with Branch links can only be read by apps that  use the same Branch key.\n\n\nNote that the \nLive\n and \nTest\n apps on the Branch dashboard are completely separate; each has its own Branch key. Even when \nLive\n and \nTest\n sections of the dashboard have been configured identically and links from both are able to open up a particular app, the app will only receive link data for which it has the matching Branch key.\n\n\nCreating a Branch link domain and Branch key for an app\n\n\nRegister the app on the Branch dashboard, here: \nhttps://dashboard.branch.io\n\n\nThe Branch key can be found on the \nGeneral Settings\n page. The app's Branch link domain  will be listed at the very bottom of the \nLink Settings\n page.\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\nAdding the Branch SDK with NuGet\n\n\nThe Branch Xamarin SDK is available as a NuGet package. The \nBranch NuGet package\n must be added to each of the Xamarin projects that will use Branch methods.  \n\n\nTo add the Branch NuGet package to a project:  \n\n\n\n\nRight-click on each project and select \nAdd\n \n \nAdd NuGet Packages\n  \n\n\nIf not already present, find the \nMicrosoft BCL Build Components\n package version 1.0.21 and add it to the project  \n\n\nFind the \nBranch Xamarin SDK\n package version 3.0 and add it to the project  \n\n\n\n\nAdding the Branch SDK without NuGet\n\n\nIf, instead of using NuGet, you would rather build and reference the Branch assemblies directly:\n\n\n\n\nClone this repository to the local machine: \nhttps://github.com/BranchMetrics/xamarin-branch-deep-linking.git\n\n\nAdd the \nBranch-Xamarin-SDK\n project to the solution and reference it from the Android, iOS and Forms (if applicable) projects\n\n\nAdd the \nBranch-Xamarin-SDK.Droid\n project to the solution and reference it from the Android project, if any\n\n\n\n\nAdd the \nBranch-Xamarin-SDK.iOS\n project and reference it from the iOS project, if any\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nIntegrating the Branch SDK\n\n\nThe steps for integrating the Branch SDK with a project differ depending on whether or not the project is creating a Xamarin Forms application and on which mobile platform the project is intended, iOS or Android. Instructions for each of the four scenarios are provided below.\n\n\n\n\nXamarin Native solutions\n\n\n# \nIntegrating the Branch SDK with an iOS Native project\n\n\nI. Create an Apple device Provisioning Profile for the app\n  \n\n\n\n\nOpen Xcode and create a new project with the same name as your Xamarin iOS project\n\n\nOn the Xcode project's \nGeneral\n tab, verify the app's case-sensitive Bundle Identifier is correct and select the appropriate Team (be sure to resolve any errors here)\n\n\nSelect the \nCapabilities\n tab and enable the \nAssociated Domains\n entitlement\n\n\nCreate 'applinks:' entries for the Branch link domain and the alternate link domain (the link domain can be found at the bottom of the Branch dashboard's \nLink Settings\n page). For example, the entries for an app with the default link domain 'testiosapp.app.link' would be:\n\n\napplinks:testiosapp.app.link\n\n\napplinks:testiosapp-alternate.app.link\n  \n\n\nUse Xcode to run this newly-created app on an iOS device. This will create and install a Provisioning Profile with the proper entitlements on that device.\n\n\nClose Xcode\n\n\n\n\nII. Enter the app's settings on the Branch dashboard\n  \n\n\n\n\nOn the \nLink Settings\n page, check the \nI have an iOS App\n checkbox\n\n\nEnter the app's URI Scheme in the \niOS URI Scheme\n field (for an app with the URI Scheme \ntestbed-xamarin\n, for example, the entry would be: \ntestbed-xamarin://\n)\n\n\nEnter the app's Apple Store name in the \nApple Store Search\n field (if the app is not yet available on the App Store select \nCustom URL\n and enter as a placeholder the URL of an appropriate web site - the exact site does not matter)\n\n\nCheck the \nEnable Universal Links\n checkbox\n\n\nEnter the app's case-sensitive Bundle Identifier and Apple App Prefix as shown on the \nApple Developer Portal\n\n\n\n\nIII. Configure the Xamarin project's Info.plist file\n  \n\n\n\n\nOpen the \nInfo.plist\n file\n\n\nEnter the app's \nBundle Identifier\n from the \nApple Developer Portal\n in the \nBundle Identifier\n field. \nIMPORTANT:\n this field will automatically be populated with an all-lowercase value by Xamarin. The value is in fact case sensitive and must match the value in the \nApple Developer Portal\n precisely.  \n\n\nClick on the \nAdvanced\n tab   \n\n\nIn the \nURL Types\n section, click the \nAdd URL Type\n button \n\n\nIdentifier:\n Branch Scheme\n\n\nURL Schemes:\n {the app's URI Scheme - 'testiosapp', for example}\n\n\nRole:\n Editor  \n\n\n\n\n\n\nIV. Configure the Xamarin project's Associated Domains entitlement\n  \n\n\n\n\nOpen the \nEntitlements.plist\n file and browse to \nAssociated Domains\n\n\nCreate entries for both the app's link domain and its alternate link domain. The entries for the TestBed-Xamarin app would be:\n\n\napplinks:testiosapp.app.link\n\n\napplinks:testiosapp-alternate.app.link\n  \n\n\n\n\n\n\nV. Add Branch calls to the AppDelegate.cs file\n\n\nBranch initialization occurs within the \nFinishedLaunching\n method of the \nAppDelegate.cs\n file. Branch calls are also required in the \nOpenUrl\n, \nContinueUserActivity\n, and \nReceiveRemoteNotification\n methods to ensure that Branch link information is handled properly whenever the app becomes active.\n\n\nWhenever the app becomes active, the Branch SDK will reach out to the Branch back end to retrieve any available link parameters. If the app became active due to a click on a Branch link, the link data will be returned in the \nInitSessionComplete method\n. This is where any deep link routing logic should reside. Any error in retrieving Branch link data from the back end will returned in the \nSessionRequestError\n method.\n\n\nusing\n \nFoundation\n;\n\n\nusing\n \nUIKit\n;\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\nusing\n \nBranchXamarinSDK.iOS\n;\n\n\nusing\n \nSystem\n;\n\n\n\nnamespace\n \nTestiOSApp.iOS\n\n\n{\n\n\n    [Register(\nAppDelegate\n)]\n\n    \npublic\n \nclass\n \nAppDelegate\n \n:\n \nUIApplicationDelegate\n,\n \nIBranchBUOSessionInterface\n\n    \n{\n\n        \npublic\n \noverride\n \nUIWindow\n \nWindow\n\n        \n{\n\n            \nget\n;\n\n            \nset\n;\n\n        \n}\n\n\n        \npublic\n \noverride\n \nbool\n \nFinishedLaunching\n(\nUIApplication\n \napplication\n,\n \nNSDictionary\n \nlaunchOptions\n)\n\n        \n{\n\n            \n// Debug mode - set to \nfalse\n before releasing to production\n\n            \nBranchIOS\n.\nDebug\n \n=\n \ntrue\n;\n \n            \nBranchIOS\n.\nInit\n(\nkey_live_cgEguO4UiDJSL4HIyTu85dkkDAdz38ER\n,\n \nlaunchOptions\n,\n \nthis\n);\n\n\n            \nreturn\n \ntrue\n;\n\n        \n}\n\n\n        \n// Called when the app is opened via URI scheme\n\n        \npublic\n \noverride\n \nbool\n \nOpenUrl\n(\nUIApplication\n \napplication\n,\n \nNSUrl\n \nurl\n,\n \nstring\n \nsourceApplication\n,\n \nNSObject\n \nannotation\n)\n\n        \n{\n\n            \nreturn\n \nBranchIOS\n.\ngetInstance\n().\nOpenUrl\n(\nurl\n);\n\n        \n}\n\n\n        \n// Called when the app is opened from a Universal Link\n\n        \npublic\n \noverride\n \nbool\n \nContinueUserActivity\n(\nUIApplication\n \napplication\n,\n \nNSUserActivity\n \nuserActivity\n,\n\n                      \nUIApplicationRestorationHandler\n \ncompletionHandler\n)\n\n        \n{\n\n            \nreturn\n \nBranchIOS\n.\ngetInstance\n().\nContinueUserActivity\n(\nuserActivity\n);\n\n        \n}\n\n\n        \n// Called when the app receives a push notification\n\n        \npublic\n \noverride\n \nvoid\n \nReceivedRemoteNotification\n(\nUIApplication\n \napplication\n,\n \nNSDictionary\n \nuserInfo\n)\n\n        \n{\n\n            \nBranchIOS\n.\ngetInstance\n().\nHandlePushNotification\n(\nuserInfo\n);\n\n        \n}\n\n\n        \n// Called when the Branch initialization is completed\n\n        \n// Put deep-linking logic in this method\n\n        \npublic\n \nvoid\n \nInitSessionComplete\n(\nBranchUniversalObject\n \nbuo\n,\n \nBranchLinkProperties\n \nblp\n)\n\n        \n{\n\n            \nNSObject\n[]\n \nkeys\n \n=\n \n{\n\n                \nNSObject\n.\nFromObject\n(\n+is_first_session\n)\n\n            \n};\n\n\n            \nNSObject\n[]\n \nvalues\n \n=\n \n{\n \nNSObject\n.\nFromObject\n(\n0\n)\n \n};\n\n            \nif\n \n(\nbuo\n.\nmetadata\n.\nContainsKey\n(\n+is_first_session\n))\n\n            \n{\n\n                \nvalues\n[\n0\n]\n \n=\n \nNSObject\n.\nFromObject\n(\nbuo\n.\nmetadata\n[\n+is_first_session\n]);\n\n            \n}\n\n\n            \nNSDictionary\n \nnsData\n \n=\n \nNSDictionary\n.\nFromObjectsAndKeys\n(\nvalues\n,\n \nkeys\n);\n\n        \n}\n\n\n        \n// Called when there is an error initializing Branch\n\n        \npublic\n \nvoid\n \nSessionRequestError\n(\nBranchError\n \nerror\n)\n\n        \n{\n\n            \nConsole\n.\nWriteLine\n(\nBranch error: \n \n+\n \nerror\n.\nErrorCode\n);\n\n            \nConsole\n.\nWriteLine\n(\nerror\n.\nErrorMessage\n);\n\n        \n}\n\n\n    \n}\n\n\n}\n\n\n\n\n\nVI. Update the project's Signing Identity and Provisioning Profile\n  \n\n\n\n\nRight-click on the iOS project and select \nOptions\n\n\nSelect \niOS Bundle Signing\n \n\n\nSet the \nSigning Identity\n and \nProvisioning Profile values\n to the values used when deploying the Provisioning Profile to the device above\n\n\n\n\n\n\n# \nIntegrating the Branch SDK with an Android Native project\n\n\nI. Ensure that the Android project is not using the Shared Mono Runtime\n\n\n\n\nRight-click on the Android project and select: \nOptions\n\n\nSelect: \nAndroid Build\n\n\nOn the \nGeneral\n tab, un-check: \nUse Shared Mono Runtime\n\n\n\n\nII. Add app capabilities in the app's Manifest file\n\n\nIn the \nRequired permissions\n section of \nAndroidManifest.xml\n, configure the following permissions:\n\n\n\n\nAccessNetworkState\n\n\nInternet\n\n\n\n\nAdditional reading on the Android manifest\n\n\n\n\nWorking with android manifest.xml\n\n\nAdd permissions to android manifest\n\n\n\n\nIII. Add the app's Branch key to the Strings.xml file\n\n\nAdd the Branch key to the Android project's \nResources/values/Strings.xml\n file. This file contains values that can be accessed by the app's Application class.\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \nstring\n \nname=\napp_name\nTestXamarinFormsApp\n/string\n\n    \nstring\n \nname=\nbranch_key\nkey_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW\n/string\n\n\n/resources\n\n\n\n\n\nIV. Create the project's *Application\n class\n*\n\n\nCreate an Application.cs file\n\n\n\n\nRight-click on the .Droid project and select \nAdd \n New File...\n\n\nSelect: \nGeneral \n Empty File\n\n\nName the file: \nApplication.cs\n\n\nEnter the following code (replace 'TestAndroidApp' with the actual name of the app):\n\n\n\n\nusing\n \nSystem\n;\n\n\nusing\n \nAndroid.App\n;\n\n\nusing\n \nAndroid.Content\n;\n\n\nusing\n \nAndroid.Runtime\n;\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\n\nnamespace\n \nTestAndroidApp.Droid\n\n\n{\n\n\n    [Application(AllowBackup = true, Icon = \n@mipmap/icon\n, Label = \n@string/app_name\n)]\n\n\n    [MetaData(\nio.branch.sdk.auto_link_disable\n, Value = \nfalse\n)]\n\n\n    [MetaData(\nio.branch.sdk.TestMode\n, Value = \ntrue\n)]\n\n\n    [MetaData(\nio.branch.sdk.BranchKey\n, Value = \n@string/branch_key\n)]\n\n\n    \npublic\n \nclass\n \nTestAndroidApp\n \n:\n \nApplication\n\n    \n{\n\n        \npublic\n \nTestAndroidApp\n(\nIntPtr\n \njavaReference\n,\n \nJniHandleOwnership\n \ntransfer\n)\n \n:\n \nbase\n(\njavaReference\n,\n \ntransfer\n)\n\n        \n{\n\n        \n}\n\n\n        \npublic\n \noverride\n \nvoid\n \nOnCreate\n()\n\n        \n{\n\n            \nbase\n.\nOnCreate\n();\n\n            \nBranchAndroid\n.\nGetAutoInstance\n(\nthis\n.\nApplicationContext\n);\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nio.branch.sdk.TestMode\n\n\nSetting this parameter to \ntrue\n enables Debug Mode, which causes simple uninstall/reinstalls of the app to trigger \ninstall\n events. Be sure to disable this before deploying to production. Note that enabling Debug Mode on Android also forces the app to use the Branch \nTest\n key if this key has been added to the project. Apps running with a \nTest\n key will be unable to receive data from Branch links created with the \nLive\n key.\n\n\n\n\n\n\nio.branch.sdk.BranchKey\n\n\nThe app's Branch key. Both a \nLive\n key and a \nTest\n key can be added to the Strings.xml file. When \nTest\n Mode is enabled the app will automatically use the \nTest\n key, if one has been specified.\n\n\n\n\n\n\n\n\nV. Create an activity to handle Branch events: BranchActivity\n\n\n\n\nRight-click on the .Droid project and select \nAdd \n New File...\n\n\nSelect: \nAndroid \n Activity\n\n\nRename the file: \nBranchActivity.cs\n\n\nEnter the following code (replace 'TestAndroidApp' with the actual name of the app):\n\n\n\n\nusing\n \nSystem\n;\n\n\nusing\n \nSystem.Collections.Generic\n;\n\n\nusing\n \nSystem.Linq\n;\n\n\nusing\n \nSystem.Text\n;\n\n\nusing\n \nNewtonsoft.Json\n;\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\n\nusing\n \nAndroid.App\n;\n\n\nusing\n \nAndroid.Content\n;\n\n\nusing\n \nAndroid.OS\n;\n\n\nusing\n \nAndroid.Runtime\n;\n\n\nusing\n \nAndroid.Views\n;\n\n\nusing\n \nAndroid.Widget\n;\n\n\n\nnamespace\n \nTestAndroidApp.Droid\n\n\n{\n\n\n    [Activity(Label = \nBranchActivity\n)]\n\n    \npublic\n \nclass\n \nBranchActivity\n \n:\n \nActivity\n\n\n    \n{\n\n        \nprivate\n \nstring\n \nlogString\n \n=\n \n;\n\n\n        \nprotected\n \noverride\n \nvoid\n \nOnCreate\n(\nBundle\n \nsavedInstanceState\n)\n\n        \n{\n\n            \nbase\n.\nOnCreate\n(\nsavedInstanceState\n);\n\n\n            \nLogMessage\n(\nBranch initialization completed: \n);\n\n\n            \nDictionary\nstring\n,\n \nobject\n \ndata\n \n=\n \nJsonConvert\n.\nDeserializeObject\nDictionary\nstring\n,\n \nobject\n(\nIntent\n.\nGetStringExtra\n(\nBranchData\n));\n\n            \nforeach\n \n(\nvar\n \nkey\n \nin\n \ndata\n.\nKeys\n)\n\n            \n{\n\n                \nLogMessage\n(\nkey\n \n+\n \n : \n \n+\n \ndata\n[\nkey\n].\nToString\n());\n\n            \n}\n\n        \n}\n\n\n        \n#region Utils\n\n\n        \nvoid\n \nLogMessage\n(\nstring\n \nmessage\n)\n\n        \n{\n\n            \nConsole\n.\nWriteLine\n(\nmessage\n);\n\n            \nlogString\n \n+=\n \nDateTime\n.\nNow\n.\nToLongTimeString\n()\n \n+\n \n \n \n+\n \nmessage\n \n+\n \n\\n\n;\n\n        \n}\n\n\n        \n#endregion\n\n    \n}\n\n\n}\n\n\n\n\n\nVI. Create an activity to handle Branch errors: BranchErrorActivity\n\n\n\n\nRight-click on the .Droid project and select \nAdd \n New File...\n\n\nSelect: \nAndroid \n Activity\n\n\nRename the file: \nBranchErrorActivity.cs\n\n\nEnter the following code (replace 'TestAndroidApp' with the actual name of the app):\n\n\n\n\nusing\n \nSystem\n;\n\n\nusing\n \nSystem.Collections.Generic\n;\n\n\nusing\n \nSystem.Linq\n;\n\n\nusing\n \nSystem.Text\n;\n\n\n\nusing\n \nAndroid.App\n;\n\n\nusing\n \nAndroid.Content\n;\n\n\nusing\n \nAndroid.OS\n;\n\n\nusing\n \nAndroid.Runtime\n;\n\n\nusing\n \nAndroid.Views\n;\n\n\nusing\n \nAndroid.Widget\n;\n\n\n\nnamespace\n \nTestAndroidApp.Droid\n\n\n{\n\n\n    [Activity(Label = \nBranchErrorActivity\n)]\n\n    \npublic\n \nclass\n \nBranchErrorActivity\n \n:\n \nActivity\n\n    \n{\n\n        \nprivate\n \nstring\n \nlogString\n \n=\n \n;\n\n\n        \nprotected\n \noverride\n \nvoid\n \nOnCreate\n(\nBundle\n \nsavedInstanceState\n)\n\n        \n{\n\n            \nbase\n.\nOnCreate\n(\nsavedInstanceState\n);\n\n\n            \nLogMessage\n(\nBranch initialization failed\n);\n\n            \nLogMessage\n(\nError code: \n \n+\n \nIntent\n.\nExtras\n.\nGetInt\n(\nErrorCode\n).\nToString\n());\n\n            \nLogMessage\n(\nIntent\n.\nExtras\n.\nGetString\n(\nErrorMessage\n));\n\n        \n}\n\n\n        \n#region Utils\n\n\n        \nvoid\n \nLogMessage\n(\nstring\n \nmessage\n)\n\n        \n{\n\n            \nConsole\n.\nWriteLine\n(\nmessage\n);\n\n            \nlogString\n \n+=\n \nDateTime\n.\nNow\n.\nToLongTimeString\n()\n \n+\n \n \n \n+\n \nmessage\n \n+\n \n\\n\n;\n\n        \n}\n\n\n        \n#endregion\n\n    \n}\n\n\n}\n\n\n\n\n\nVII. Initialize Branch and configure Branch session management\n\n\nBranch must be initilialized in the OnCreate method of either the Application class or the first Activity launched by the app. The OnNewIntent method must be added to retrieve the latest link identifier when the app becomes active due to a Branch link click.\n\n\nBranch initializes asynchronously, with Branch link parameters being returned following a network call to Branch. If initialization is successful, the InitSessionComplete method will be invoked. If initialization is unsuccessful, the SessionRequestError method will be invoked. Deep link routing logic should be located in the InitSessionComplete method.\n\n\nIn the code example below the following Branch initialization and session management steps have been added to MainActivity.cs:\n\n\n\n\nAn Activity to respond to the app's URI Scheme\n\n\nAn Activity is launched in \nsingleTask\n mode\n\n\nOverride the OnCreate method and initialize the Branch SDK\n\n\nOverride the OnNewIntent method\n\n\nAdd an InitSessionComplete method for processing Branch link information (this is where deep link routing code should be located)\n\n\nAdd a SessionRequestError method to handle situations where Branch fails to initialize\n\n\n\n\nusing\n \nAndroid.App\n;\n\n\nusing\n \nAndroid.Widget\n;\n\n\nusing\n \nAndroid.OS\n;\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\nusing\n \nSystem\n;\n\n\nusing\n \nSystem.Collections.Generic\n;\n\n\nusing\n \nAndroid.Content\n;\n\n\nusing\n \nNewtonsoft.Json\n;\n\n\n\nnamespace\n \nTestAndroidApp.Droid\n\n\n{\n\n\n    [Activity(Label = \nTestAndroidApp\n, MainLauncher = true, Icon = \n@mipmap/icon\n, LaunchMode = Android.Content.PM.LaunchMode.SingleTask)]\n\n\n\n    [IntentFilter(new[]\n \n{\n \nandroid.intent.action.VIEW\n \n},\n\n    \nCategories\n \n=\n \nnew\n[]\n \n{\n \nandroid.intent.category.DEFAULT\n,\n \nandroid.intent.category.BROWSABLE\n \n},\n\n    \nDataScheme\n \n=\n \ntestandroidapp\n,\n\n    \nDataHost\n \n=\n \nopen\n)]\n\n\n\n    [IntentFilter(new[]\n \n{\n \nandroid.intent.action.VIEW\n \n},\n\n    \nCategories\n \n=\n \nnew\n[]\n \n{\n \nandroid.intent.category.DEFAULT\n,\n \nandroid.intent.category.BROWSABLE\n \n},\n\n    \nDataScheme\n \n=\n \nhttps\n,\n\n    \nDataHost\n \n=\n \ntestandroidapp.app.link\n)]\n\n\n    \npublic\n \nclass\n \nMainActivity\n \n:\n \nActivity\n,\n \nIBranchSessionInterface\n\n    \n{\n\n\n        \nprotected\n \noverride\n \nvoid\n \nOnCreate\n(\nBundle\n \nsavedInstanceState\n)\n\n        \n{\n\n            \nbase\n.\nOnCreate\n(\nsavedInstanceState\n);\n\n\n            \nBranchAndroid\n.\nInit\n(\nthis\n,\n \nResources\n.\nGetString\n(\nResource\n.\nString\n.\nbranch_key\n),\n \nthis\n);\n\n        \n}\n\n\n        \n// Ensure we get the updated link identifier when the app becomes active\n\n        \n// due to a Branch link click after having been in the background\n\n        \nprotected\n \noverride\n \nvoid\n \nOnNewIntent\n(\nIntent\n \nintent\n)\n\n        \n{\n\n            \nthis\n.\nIntent\n \n=\n \nintent\n;\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nInitSessionComplete\n(\nDictionary\nstring\n,\n \nobject\n \ndata\n)\n\n        \n{\n\n            \nvar\n \nintent\n \n=\n \nnew\n \nIntent\n(\nthis\n,\n \ntypeof\n(\nBranchActivity\n));\n\n            \nintent\n.\nPutExtra\n(\nBranchData\n,\n \nJsonConvert\n.\nSerializeObject\n(\ndata\n));\n\n\n            \nStartActivity\n(\nintent\n);\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nSessionRequestError\n(\nBranchError\n \nerror\n)\n\n        \n{\n\n            \nConsole\n.\nWriteLine\n(\nBranch session initialization error: \n \n+\n \nerror\n.\nErrorCode\n);\n\n            \nConsole\n.\nWriteLine\n(\nerror\n.\nErrorMessage\n);\n\n\n            \nvar\n \nintent\n \n=\n \nnew\n \nIntent\n(\nthis\n,\n \ntypeof\n(\nBranchErrorActivity\n));\n\n            \nintent\n.\nPutExtra\n(\nErrorCode\n,\n \nerror\n.\nErrorCode\n);\n\n            \nintent\n.\nPutExtra\n(\nErrorMessage\n,\n \nerror\n.\nErrorMessage\n);\n\n\n            \nStartActivity\n(\nintent\n);\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nXamarin Forms solutions\n\n\n# \nConfiguring the C# project\n\n\nThese steps are required for all Forms projects, both iOS and Android.\n\n\nI. Change the C# project's profile to PCL 4.5 - Profile78\n\n\n\n\nRight-click on the project name and select: \nOptions\n  \n\n\nBrowse the menu to \nBuild \n General\n  \n\n\nChange the \nCurrent Profile\n to: \nPCL 4.5 - Profile78\n  \n\n\n\n\nII. Add the Branch SDK with NuGet\n\n\nThe Branch Xamarin SDK is available as a NuGet package. The \nBranch NuGet package\n must be added to each of the Xamarin projects that will use Branch methods.  \n\n\n\n\nRight-click on each project and select \nAdd \n Add NuGet Packages\n  \n\n\nIf not already present, find the \nMicrosoft BCL Build Components\n package version 1.0.21 and add it to the project  \n\n\nFind the \nBranch Xamarin SDK\n package version 3.0 and add it to the project  \n\n\n\n\nIII. Create a class for Branch session handling\n\n\nBranch initializes asynchronously, with Branch link parameters being returned following a network call to Branch. If initialization is successful, the InitSessionComplete method will be invoked. If initialization is unsuccessful, the SessionRequestError method will be invoked. Deep link routing logic should be located in the InitSessionComplete method.\n\n\n\n\nRight-click on the C# project and select \nAdd \n New File...\n  \n\n\nSelect: \nGeneral \n Empty Class\n  \n\n\nRename the file: \nTestXamarinFormsApp.cs\n  \n\n\nEnter the following code (replacing 'TestXamarinFormsApp' with the actual name of the app):  \n\n\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\nusing\n \nSystem.Collections.Generic\n;\n\n\nusing\n \nSystem.ComponentModel\n;\n\n\nusing\n \nXamarin.Forms\n;\n\n\n\nnamespace\n \nTestXamarinFormsApp\n\n\n{\n\n    \npublic\n \nclass\n \nTestXamarinFormsApp\n \n:\n \nApplication\n,\n \nIBranchSessionInterface\n\n    \n{\n\n\n        \npublic\n \nTestXamarinFormsApp\n()\n\n        \n{\n\n        \n}\n\n\n        \n#region IBranchSessionInterface implementation\n\n\n        \npublic\n \nvoid\n \nInitSessionComplete\n(\nDictionary\nstring\n,\n \nobject\n \ndata\n)\n\n        \n{\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nCloseSessionComplete\n()\n\n        \n{\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nSessionRequestError\n(\nBranchError\n \nerror\n)\n\n        \n{\n\n        \n}\n\n\n        \n#endregion\n\n    \n}\n\n\n}\n\n\n\n\n\nIV. Create a class for handling link data\n\n\nBranch stores link data in an object referred to as the \nBranch Universal Object\n, or \nBUO\n.\n\n\n\n\nRight-click on the C# project and select \nAdd \n New File...\n  \n\n\nSelect: \nGeneral \n Empty Class\n  \n\n\nRename the file: \nTestXamarinFormsAppBUO.cs\n  \n\n\nEnter the following code (replace 'TestXamarinFormsApp' with the actual name of the app):\n\n\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\nusing\n \nSystem.Collections.Generic\n;\n\n\nusing\n \nSystem.ComponentModel\n;\n\n\nusing\n \nXamarin.Forms\n;\n\n\n\nnamespace\n \nTestXamarinFormsApp\n\n\n{\n\n    \npublic\n \nclass\n \nTestXamarinFormsAppBUO\n \n:\n \nApplication\n,\n \nIBranchBUOSessionInterface\n\n    \n{\n\n\n        \npublic\n \nTestXamarinFormsAppBUO\n()\n\n        \n{\n\n        \n}\n\n\n        \n#region IBranchBUOSessionInterface implementation\n\n\n        \npublic\n \nvoid\n \nInitSessionComplete\n(\nBranchUniversalObject\n \nbuo\n,\n \nBranchLinkProperties\n \nblp\n)\n\n        \n{\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nSessionRequestError\n(\nBranchError\n \nerror\n)\n\n        \n{\n\n        \n}\n\n\n        \n#endregion\n\n    \n}\n\n\n}\n\n\n\n\n\n# \nIntegrating with an iOS Forms app\n\n\nI. Create an Apple device Provisioning Profile for the app\n\n\n\n\nOpen Xcode and create a new project with the same name as your Xamarin iOS project  \n\n\nOn the Xcode project's \nGeneral\n tab, enter the app's Bundle Identifier and select the appropriate Team (be sure to resolve any errors here)  \n\n\nSelect the \nCapabilities\n tab and enable the \nAssociated Domains\n entitlement  \n\n\nCreate 'applinks:' entries for the Branch link domain assigned to the app (the link domain can be found at the bottom of the Branch dashboard's \nLink Settings\n page). For example, the entries for the app \nTestXamarinFormsApp\n would be:\n\n\napplinks:testxamarinformsapp.app.link\n\n\napplinks:testxamarinformsapp-alternate.app.link\n  \n\n\nUse Xcode to run this newly-created app on an iOS device. This will create and install a Provisioning Profile with the proper entitlements on that device.  \n\n\nClose Xcode  \n\n\n\n\nII. Enter the app's settings on the Branch dashboard\n\n\n\n\nOn the \nLink Settings\n page, check the \nI have an iOS App\n checkbox  \n\n\nEnter the app's URI Scheme in the \niOS URI Scheme\n field (for an app with the URI Scheme \ntestxamarinformsapp\n, for example, the entry would be: \ntestxamarinformsapp://\n)  \n\n\nEnter the app's Apple Store name in the \nApple Store Search\n field (if the app is not yet available on the App Store select \nCustom URL\n and enter as a placeholder the URL of an appropriate web site - the exact site does not matter)  \n\n\nCheck the \nEnable Universal Links\n checkbox  \n\n\nEnter the app's Bundle Identifier and Apple App Prefix as shown on the \nApple Developer Portal\n  \n\n\n\n\nIII. Configure the Xamarin project's Info.plist file\n\n\n\n\nOpen the \nInfo.plist\n file\n\n\nEnter the app's \nBundle Identifier\n from the \nApple Developer Portal\n in the \nBundle Identifier\n field. \nIMPORTANT:\n this field will automatically be populated with an all-lowercase value by Xamarin. The value is in fact case sensitive and must match the value in the \nApple Developer Portal\n precisely.  \n\n\nClick on the \nAdvanced\n tab   \n\n\nIn the \nURL Types\n section, click the \nAdd URL Type\n button \n\n\nIdentifier:\n Branch Scheme\n\n\nURL Schemes:\n {the app's URI Scheme - 'testxamarinformsapp', for example}\n\n\nRole:\n Editor  \n\n\n\n\n\n\nIV. Configure the Xamarin project's Associated Domains entitlement\n\n\n\n\nOpen the \nEntitlements.plist\n file and browse to \nAssociated Domains\n (if this file does not already exist, create it)\n\n\nCreate entries for both the app's link domain and its alternate link domain. The entries for the TestBed-Xamarin app would be:\n\n\napplinks:testxamarinformsapp.app.link\n\n\napplinks:testxamarinformsapp-alternate.app.link\n  \n\n\n\n\n\n\nV. Add Branch calls to the AppDelegate.cs file\n\n\nTo ensure that the Branch SDK initializes when the app starts and can retrieve link parameters whenever the app becomes active, Branch initialization occurs within the \nFinishedLaunching\n method of the AppDelegate.cs file. Branch calls are also required in the OpenUrl, ContinueUserActivity, and ReceiveRemoteNotification methods to ensure that Branch link information is handled properly whenever the app becomes active. The \nAppDelegate.cs\n file should look like this:\n\n\nusing\n \nSystem\n;\n\n\nusing\n \nSystem.Collections.Generic\n;\n\n\nusing\n \nSystem.Linq\n;\n\n\n\nusing\n \nFoundation\n;\n\n\nusing\n \nUIKit\n;\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\nusing\n \nTestXamarinFormsApp\n;\n\n\n\nnamespace\n \nTestXamarinFormsApp.iOS\n\n\n{\n\n\n    [Register(\nAppDelegate\n)]\n\n    \npublic\n \npartial\n \nclass\n \nAppDelegate\n \n:\n \nglobal\n::\nXamarin\n.\nForms\n.\nPlatform\n.\niOS\n.\nFormsApplicationDelegate\n\n    \n{\n\n        \npublic\n \noverride\n \nbool\n \nFinishedLaunching\n(\nUIApplication\n \napp\n,\n \nNSDictionary\n \noptions\n)\n\n        \n{\n\n            \nglobal\n::\nXamarin\n.\nForms\n.\nForms\n.\nInit\n();\n\n\n            \n// Debug mode - set to \nfalse\n before releasing to production\n\n            \nBranchIOS\n.\nDebug\n \n=\n \ntrue\n;\n\n\n            \nTestXamarinFormsAppBUO\n \nappBUO\n \n=\n \nnew\n \nTestXamarinFormsAppBUO\n();\n\n            \nBranchIOS\n.\nInit\n(\nkey_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW\n,\n \noptions\n,\n \nappBUO\n);\n\n            \nLoadApplication\n(\nappBUO\n);\n\n\n            \nreturn\n \nbase\n.\nFinishedLaunching\n(\napp\n,\n \noptions\n);\n\n        \n}\n\n\n        \n// Called when the app is opened via URI scheme\n\n        \npublic\n \noverride\n \nbool\n \nOpenUrl\n(\nUIApplication\n \napplication\n,\n \nNSUrl\n \nurl\n,\n \nstring\n \nsourceApplication\n,\n \nNSObject\n \nannotation\n)\n\n        \n{\n\n            \nreturn\n \nBranchIOS\n.\ngetInstance\n().\nOpenUrl\n(\nurl\n);\n\n        \n}\n\n\n        \n// Called when the app is opened from a Universal Link \n\n        \npublic\n \noverride\n \nbool\n \nContinueUserActivity\n(\nUIApplication\n \napplication\n,\n \nNSUserActivity\n \nuserActivity\n,\n \nUIApplicationRestorationHandler\n \ncompletionHandler\n)\n\n        \n{\n\n            \nreturn\n \nBranchIOS\n.\ngetInstance\n().\nContinueUserActivity\n(\nuserActivity\n);\n\n        \n}\n\n\n        \n// Called when the app receives a push notification\n\n        \npublic\n \noverride\n \nvoid\n \nReceivedRemoteNotification\n(\nUIApplication\n \napplication\n,\n \nNSDictionary\n \nuserInfo\n)\n\n        \n{\n\n            \nBranchIOS\n.\ngetInstance\n().\nHandlePushNotification\n(\nuserInfo\n);\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n# \nIntegrating with an Android Forms app\n\n\nI. Ensure that the Android project is not using the Shared Mono Runtime\n\n\n\n\nRight-click on the Android project and select: \nOptions\n  \n\n\nSelect: \nAndroid Build\n  \n\n\nOn the \nGeneral\n tab, un-check: \nUse Shared Mono Runtime\n  \n\n\n\n\nII. Add app capabilities in the AndroidManifest.xml file\n\n\nIn the \nRequired permissions\n section of \nAndroidManifest.xml\n, configure the following permissions:\n\n\n\n\nAccessNetworkState\n\n\nInternet\n\n\n\n\nAdditional reading on the Android manifest\n\n\n\n\nWorking with android manifest.xml\n\n\nAdd permissions to android manifest\n\n\n\n\nIII. Add the app's Branch key to the Strings.xml file\n\n\nCreate a \nResources/values/Strings.xml\n file that can be accessed by the app's Application class for the Android project and add the Branch key to this file.\n\n\n\n\nIn the Android project, browse to \nResources/values\n\n\nRight-click on the \nvalues\n folder and select: \nAdd \n New File...\n\n\nSelect: \nXML \n Empty XML File\n\n\nName the file: \nStrings\n\n\nEnter the following values:\n\n\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \nstring\n \nname=\napp_name\nTestXamarinFormsApp\n/string\n\n    \nstring\n \nname=\nbranch_key\nkey_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW\n/string\n\n\n/resources\n\n\n\n\n\nIV. Configure the .Droid project's Application class\n\n\nWithin the .Droid project's Application class:\n\n\n\n\nSet the Branch SDK's initialization parameters  \n\n\nOverride the \nOnCreate()\n method to call \nBranchAndroid.GetAutoInstance\n  \n\n\n\n\nIf an Appplication class does not already exist for the project, create one:\n\n\n\n\nRight-click on the .Droid project and select: \nAdd \n New File...\n\n\nSelect: \nGeneral \n Empty Class\n\n\nName the file: \n{app name}\n ('TestXamarinFormsApp', for example)\n\n\n\n\nThe file should have the following contents:\n\n\nusing\n \nSystem\n;\n\n\nusing\n \nAndroid.App\n;\n\n\nusing\n \nAndroid.Content\n;\n\n\nusing\n \nAndroid.Runtime\n;\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\n\nnamespace\n \nTestXamarinFormsApp.Droid\n\n\n{\n\n\n\n    [Application (AllowBackup = true, Icon = \n@drawable/icon\n, Label = \n@string/app_name\n)]\n\n\n    [MetaData(\nio.branch.sdk.auto_link_disable\n, Value = \nfalse\n)]\n\n\n    [MetaData(\nio.branch.sdk.TestMode\n, Value = \ntrue\n)]\n\n\n    [MetaData(\nio.branch.sdk.BranchKey\n, Value = \n@string/branch_key\n)]\n\n\n    \npublic\n \nclass\n \nApp\n \n:\n \nApplication\n\n    \n{\n\n        \npublic\n \nApp\n(\nIntPtr\n \njavaReference\n,\n \nJniHandleOwnership\n \ntransfer\n)\n \n:\n \nbase\n(\njavaReference\n,\n \ntransfer\n)\n\n        \n{\n\n        \n}\n\n\n        \npublic\n \noverride\n \nvoid\n \nOnCreate\n()\n\n        \n{\n\n            \nbase\n.\nOnCreate\n();\n\n            \nBranchAndroid\n.\nGetAutoInstance\n(\nthis\n.\nApplicationContext\n);\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nio.branch.sdk.TestMode\n\n\nSetting this parameter to \ntrue\n enables Debug Mode, which causes simple uninstall/reinstalls of the app to trigger \ninstall\n events. Be sure to disable this before deploying to production. Note that enabling Debug Mode on Android also forces the app to use the Branch \nTest\n key if this key has been added to the project. Apps running with a \nTest\n key will be unable to receive data from Branch links created with the \nLive\n key.\n\n\n\n\n\n\nio.branch.sdk.BranchKey\n\n\nThe app's Branch key. Both a \nLive\n key and a \nTest\n key can be added to the Strings.xml file. When \nTest\n Mode is enabled the app will automatically use the \nTest\n key, if one has been specified.\n\n\n\n\n\n\n\n\nV. Initialize Branch\n\n\nBranch must be initilialized in the OnCreate method of either the Application class or the first Activity launched by the app. The OnNewIntent method must be added to retrieve the latest link identifier when the app becomes active due to a Branch link click.\n\n\nIn the code example below the following Branch initialization and session management steps have been added to MainActivity.cs:\n\n\n\n\nRegister an Activity to respond to the app's URI Scheme\n\n\nEnsure the Activity is launched in \nsingleTask\n mode\n\n\nOverride the OnCreate method and initialize the Branch SDK\n\n\nOverride the OnNewIntent method\n\n\n\n\nusing\n \nSystem\n;\n\n\n\nusing\n \nAndroid.App\n;\n\n\nusing\n \nAndroid.Content\n;\n\n\nusing\n \nAndroid.Content.PM\n;\n\n\nusing\n \nAndroid.Runtime\n;\n\n\nusing\n \nAndroid.Views\n;\n\n\nusing\n \nAndroid.Widget\n;\n\n\nusing\n \nAndroid.OS\n;\n\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\nusing\n \nTestXamarinFormsApp\n;\n\n\n\nnamespace\n \nTestXamarinFormsApp.Droid\n\n\n{\n\n\n    [Activity(Label = \nTestXamarinFormsApp.Droid\n, LaunchMode = LaunchMode.SingleTask, Icon = \n@drawable/icon\n, Theme = \n@style/MyTheme\n, MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]\n\n\n\n    [IntentFilter(new[]\n \n{\n \nandroid.intent.action.VIEW\n \n},\n\n        \nCategories\n \n=\n \nnew\n[]\n \n{\n \nandroid.intent.category.DEFAULT\n,\n \nandroid.intent.category.BROWSABLE\n \n},\n\n        \nDataScheme\n \n=\n \ntestxamarinformsapp\n,\n\n        \nDataHost\n \n=\n \nopen\n)]\n\n\n\n    [IntentFilter(new[]\n \n{\n \nandroid.intent.action.VIEW\n \n},\n\n        \nCategories\n \n=\n \nnew\n[]\n \n{\n \nandroid.intent.category.DEFAULT\n,\n \nandroid.intent.category.BROWSABLE\n \n},\n\n        \nDataScheme\n \n=\n \nhttps\n,\n\n        \nDataHost\n \n=\n \ntestxamarinformsapp.app.link\n)]\n\n\n    \npublic\n \nclass\n \nMainActivity\n \n:\n \nglobal\n::\nXamarin\n.\nForms\n.\nPlatform\n.\nAndroid\n.\nFormsApplicationActivity\n\n    \n{\n\n        \nprotected\n \noverride\n \nvoid\n \nOnCreate\n(\nBundle\n \nsavedInstanceState\n)\n\n        \n{\n\n            \nbase\n.\nOnCreate\n(\nsavedInstanceState\n);\n\n\n            \nglobal\n::\nXamarin\n.\nForms\n.\nForms\n.\nInit\n(\nthis\n,\n \nsavedInstanceState\n);\n\n\n            \nTestXamarinFormsAppBUO\n \nlinkData\n \n=\n \nnew\n \nTestXamarinFormsAppBUO\n();\n\n            \nBranchAndroid\n.\nInit\n(\nthis\n,\n \nGetString\n(\nResource\n.\nString\n.\nbranch_key\n),\n \nlinkData\n);\n\n            \nLoadApplication\n(\nlinkData\n);\n\n        \n}\n\n\n        \nprotected\n \noverride\n \nvoid\n \nOnNewIntent\n(\nIntent\n \nintent\n)\n\n        \n{\n\n            \nthis\n.\nIntent\n \n=\n \nintent\n;\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n4 - Submitting iOS Apps to the App Store\n\n\nBranch uses the Apple Advertising Identifier, or \nIDFA\n, to identify users across our entire partner network, greatly increasing the accuracy of matching. Read more about matching accuracy on the \nMatching Platform\n page.  \n\n\nNotifying Apple of IDFA usage\n\n\nBe sure to let Apple know that you are using the IDFA when submitting apps to the App Store after integrating the Branch SDK.  \n\n\n\n\nAnswer \nYes\n when presented with the question: \nDoes this app use the Advertising Identifier (IDFA)?\n  \n\n\nCheck the following two boxes:  \n\n\nAttribute this app installation to a previously served advertisement\n  \n\n\nAttribute an action taken within this app to a previously served advertisement\n  \n\n\n\n\n\n\n\n\n\n\nTest deep link\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe Branch Universal Object is a data object representing a piece of content that is referenced by a Branch link. Together with a set of Link Properties (marketing metadata such as Campaign and Channel as well as Branch-behavior related parameters such as $deepview_path), can be combined to generate a Branch link.\n\n\nBranchUniversalObject\n \nuniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n();\n\n\nuniversalObject\n.\ncanonicalIdentifier\n \n=\n \nid12345\n;\n\n\nuniversalObject\n.\ntitle\n \n=\n \nid12345 title\n;\n\n\nuniversalObject\n.\ncontentDescription\n \n=\n \nMy awesome piece of content!\n;\n\n\nuniversalObject\n.\nimageUrl\n \n=\n \nhttps://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png\n;\n\n\nuniversalObject\n.\nmetadata\n.\nAdd\n(\nfoo\n,\n \nbar\n);\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nBranch links can be created in-app (as well as in many other ways - see: \nBranch link creation guide\n. When they are, and setIdentity has been called to associate a User ID with the current user session, Branch links will be associated with that User ID.\n\n\nBranchLinkProperties\n \nlinkProperties\n \n=\n \nnew\n \nBranchLinkProperties\n();\n\n\nlinkProperties\n.\ntags\n.\nAdd\n(\ntag1\n);\n\n\nlinkProperties\n.\ntags\n.\nAdd\n(\ntag2\n);\n\n\nlinkProperties\n.\nfeature\n \n=\n \nsharing\n;\n\n\nlinkProperties\n.\nchannel\n \n=\n \nfacebook\n;\n\n\nlinkProperties\n.\ncontrolParams\n.\nAdd\n(\n$desktop_url\n,\n \nhttp://example.com\n);\n\n\n\nBranch\n.\nGetInstance\n().\nGetShortURL\n(\ncallback\n,\n\n                                  \nuniversalObject\n,\n\n                                  \nlinkProperties\n);\n\n\n\n\n\nNote\n\nYou can customize the Facebook OG tags of each URL if you want to dynamically share content by using the following \noptional keys in the data dictionary\n. Please use this \nFacebook tool\n to debug the OG tags!\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n\"$og_title\"\n\n\nThe title you'd like to appear for the link in social media\n\n\n\n\n\n\n\"$og_description\"\n\n\nThe description you'd like to appear for the link in social media\n\n\n\n\n\n\n\"$og_image_url\"\n\n\nThe URL for the image you'd like to appear for the link in social media\n\n\n\n\n\n\n\"$og_video\"\n\n\nThe URL for the video\n\n\n\n\n\n\n\"$og_url\"\n\n\nThe URL you'd like to appear\n\n\n\n\n\n\n\"$og_app_id\"\n\n\nthe OG app ID. Optional and rarely used.\n\n\n\n\n\n\n\n\nAlso, you do custom redirection by inserting the following \noptional keys in the dictionary\n:\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n\"$desktop_url\"\n\n\nWhere to send the user on a desktop or laptop. By default it is the Branch-hosted text-me service\n\n\n\n\n\n\n\"$android_url\"\n\n\nThe replacement URL for the Play Store to send the user if they don't have the app. \nOnly necessary if you want a mobile web splash\n\n\n\n\n\n\n\"$ios_url\"\n\n\nThe replacement URL for the App Store to send the user if they don't have the app. \nOnly necessary if you want a mobile web splash\n\n\n\n\n\n\n\"$ipad_url\"\n\n\nSame as above but for iPad Store\n\n\n\n\n\n\n\"$fire_url\"\n\n\nSame as above but for Amazon Fire Store\n\n\n\n\n\n\n\"$blackberry_url\"\n\n\nSame as above but for Blackberry Store\n\n\n\n\n\n\n\"$windows_phone_url\"\n\n\nSame as above but for Windows Store\n\n\n\n\n\n\n\n\nYou have the ability to control the direct deep linking of each link by inserting the following \noptional keys in the dictionary\n:\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n\"$deeplink_path\"\n\n\nThe value of the deep link path that you'd like us to append to the URI. For example, you could specify \"$deeplink_path\": \"radio/station/456\" and we'll open the app with the URI \"theapp://radio/station/456?link_click_id=branch-identifier\". This is primarily for supporting legacy deep linking infrastructure.\n\n\n\n\n\n\n\"$always_deeplink\"\n\n\ntrue or false. (default is not to deep link first) This key can be specified to have our linking service force try to open the app, even if we're not sure the user has the app installed. If the app is not installed, we fall back to the respective app store or $platform_url key. By default, we only open the app if we've seen a user initiate a session in the app from a Branch link (has been cookied and deep linked by Branch)\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nShareLink (IBranchLinkShareInterface callback,\n           BranchUniversalObject universalObject,\n           BranchLinkProperties linkProperties,\n           string message)\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve session (install or open) parameters\n\n\nSession parameters will be available at any point. If there are no params, the dictionary will be empty. This refreshes with every new session (app installs AND app opens)\n\n\nDictionary\nstring\n,\n \nobject\n \nsessionParams\n \n=\n \nBranch\n.\nGetInstance\n().\nGetLatestReferringParams\n();\n\n\n\nor\n\n\nBranchUniversalObject\n \nbuo\n \n=\n \nBranch\n.\nGetInstance\n().\nGetLastReferringBranchUniversalObject\n();\n\n\nBranchLinkProperties\n \nblp\n \n=\n \nBranch\n.\nGetInstance\n().\nGetLastReferringBranchLinkProperties\n();\n\n\n\n\n\nRetrieve install (install only) parameters\n\n\nIf you ever want to access the original session params (the parameters passed in for the first install event only), you can use this line. This is useful if you only want to reward users who newly installed the app from a referral link or something.\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nDictionary\nstring\n,\n \nobject\n \ninstallParams\n \n=\n \nbranch\n.\nGetFirstReferringParams\n();\n\n\n\nor\n\n\nBranchUniversalObject\n \nbuo\n \n=\n \nBranch\n.\nGetInstance\n().\nGetFirstReferringBranchUniversalObject\n();\n\n\nBranchLinkProperties\n \nblp\n \n=\n \nBranch\n.\nGetInstance\n().\nGetFirstReferringBranchLinkProperties\n();\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nRegisterView (BranchUniversalObject universalObject)\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nPersistent identities\n\n\nOften, you might have the own user IDs, or want referral and event data to persist across platforms or uninstall/reinstall. It's helpful if you know the users access the service from different devices. This where we introduce the concept of an 'identity'.\n\n\nTo identify a user, just call:\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n \n\nbranch\n.\nSetIdentity\n(\nthe user id\n,\n \nthis\n);\n  \n// Where this implements IBranchIdentityInterface\n\n\n\n\n\nLogout\n\n\nIf you provide a logout function in the app, be sure to clear the user when the logout completes. This will ensure that all the stored parameters get cleared and all events are properly attributed to the right identity.\n\n\nWarning\n this call will clear the referral credits and attribution on the device.\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nbranch\n.\nLogout\n(\nthis\n);\n \n// Where this implements IBranchIdentityInterface\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nbranch\n.\nUserCompletedAction\n(\nthe_custom_event\n);\n\n\n\n\n\nOR if you want to store some state with the event\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nDictionary\nstring\n,\n \nobject\n \ndata\n \n=\n \nnew\n \nDictionary\nstring\n,\n \nobject\n();\n\n\ndata\n.\nAdd\n(\nsku\n,\n \n123456789\n);\n\n\nbranch\n.\nUserCompletedAction\n(\npurchase_event\n,\n \ndata\n);\n\n\n\n\n\nSome example events you might want to track:\n\n\ncomplete_purchase\n\n\nwrote_message\n\n\nfinished_level_ten\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral rewards\n\n\nIn a standard referral system, you have 2 parties: the original user and the invitee. Our system is flexible enough to handle rewards for all users. Here are a couple example scenarios:\n\n\n1) Reward the original user for taking action (eg. inviting, purchasing, etc)\n\n\n2) Reward the invitee for installing the app from the original user's referral link\n\n\n3) Reward the original user when the invitee takes action (eg. give the original user credit when their the invitee buys something)\n\n\nThese reward definitions are created on the dashboard, under the 'Reward Rules' section in the 'Referrals' tab on the dashboard.\n\n\nWarning: For a referral program, you should not use unique awards for custom events and redeem pre-identify call. This can allow users to cheat the system.\n\n\nCheck a reward balance\n\n\nReward balances change randomly on the backend when certain actions are taken (defined by the rules), so you'll need to make an asynchronous call to retrieve the balance. Here is the syntax:\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nbranch\n.\nLoadRewards\n(\nthis\n);\n\n\n\n#region IBranchRewardsInterface implementation\n\n\n        \npublic\n \nvoid\n \nRewardsLoaded\n \n()\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nRewardsRedeemed\n \n()\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nCreditHistory\n \n(\nList\nCreditHistoryEntry\n \nhistory\n)\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nRewardsRequestError\n \n(\nBranchError\n \nerror\n)\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n\n#endregion\n\n\n\n\n\nRedeem all or some of the reward balance\n\n\nWe will store how many of the rewards have been deployed so that you don't have to track it on the end. In order to save that you gave the credits to the user, you can call redeem. Redemptions will reduce the balance of outstanding credits permanently.\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nbranch\n.\nRedeemRewards\n(\nthis\n,\n \namount\n,\n \nbucket\n);\n\n\n\n#region IBranchRewardsInterface implementation\n\n\n        \npublic\n \nvoid\n \nRewardsLoaded\n \n()\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nRewardsRedeemed\n \n()\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nCreditHistory\n \n(\nList\nCreditHistoryEntry\n \nhistory\n)\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nRewardsRequestError\n \n(\nBranchError\n \nerror\n)\n\n        \n{\n\n         \n// Do something with the data...\n\n        \n}\n\n\n        \n#endregion\n\n\n\n\n\nGet credit history\n\n\nThis call will retrieve the entire history of credits and redemptions from the individual user.  It also implements the IBranchRewardsInterface(see above). To use this call, implement like so:\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nbranch\n.\nGetCreditHistory\n(\nthis\n);\n\n\n\n\n\nThe response will return an array that has been parsed from the following JSON:\n\n[\n\n    \n{\n\n        \ntransaction\n:\n \n{\n\n                           \ndate\n:\n \n2014-10-14T01:54:40.425Z\n,\n\n                           \nid\n:\n \n50388077461373184\n,\n\n                           \nbucket\n:\n \ndefault\n,\n\n                           \ntype\n:\n \n0\n,\n\n                           \namount\n:\n \n5\n\n                       \n},\n\n        \nreferrer\n:\n \n12345678\n,\n\n        \nreferree\n:\n \nnull\n\n    \n},\n\n    \n{\n\n        \ntransaction\n:\n \n{\n\n                           \ndate\n:\n \n2014-10-14T01:55:09.474Z\n,\n\n                           \nid\n:\n \n50388199301710081\n,\n\n                           \nbucket\n:\n \ndefault\n,\n\n                           \ntype\n:\n \n2\n,\n\n                           \namount\n:\n \n-3\n\n                       \n},\n\n        \nreferrer\n:\n \nnull\n,\n\n        \nreferree\n:\n \n12345678\n\n    \n}\n\n\n]\n\n\n\n\nreferrer\n\n: The id of the referring user for this credit transaction. Returns null if no referrer is involved. Note this id is the user id in developer's own system that's previously passed to Branch's identify user API call.\n\n\nreferree\n\n: The id of the user who was referred for this credit transaction. Returns null if no referree is involved. Note this id is the user id in developer's own system that's previously passed to Branch's identify user API call.\n\n\ntype\n\n: This is the type of credit transaction\n\n\n\n\n0\n - A reward that was added automatically by the user completing an action or referral\n\n\n1\n - A reward that was added manually\n\n\n2\n - A redemption of credits that occurred through our API or SDKs\n\n\n3\n - This is a very unique case where we will subtract credits automatically when we detect fraud\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nRecommendations\n\n\n\n\n\n\nUnable to add Branch-required NuGet packages to the C# project\n\n\nAdding required NuGet packages to the C# project may fail if the project has not been configured to use \nPCL 4.5 - Profile78\n\n\n\n\nRight-click on the project name and select: \nOptions\n  \n\n\nBrowse the menu to \nBuild \n General\n  \n\n\nChange the \nCurrent Profile\n to: \nPCL 4.5 - Profile78\n  \n\n\n\n\nAndroid app fails to build with linking errors\n\n\nThe Newtonsoft JSON NuGet package is automatically added to a project when the Branch Xamarin SDK NuGet package is added. There is a known issue with this package that results in linking errors when building a project.\n\n\nerror XA0009: Error while loading assembly: /Users/david/Projects/TestXamarinFormsApp/Droid/obj/Debug/android/assets/mscorlib.dll\n\n\nTo resolve this issue with the Newtonsoft JSON NuGet package:\n\n\n\n\nRight-click on the project and select Options  \n\n\nGo to \nAndroid Build\n and select the \nLinker\n tab  \n\n\nSelect: \nRelease\n  \n\n\nGo to the \nIgnore assemblies\n box  \n\n\nAdd: \nSystem.Core\n  \n\n\nRebuild the app  \n\n\n\n\nDeploying iOS app to device fails with Provisioning Profile erros after changing entitlements\n\n\nXamarin automatically populates the \nBundle Identifier\n field in the \nInfo.plist\n file with an all-lowercase value derived from the app's name. This value is in fact case sensitive and must match the value in the \nApple Developer Portal\n precisely. The default Xamarin configuration may work when there are no entitlements configured and then suddenly begin failing after entitlements have been added.\n\n\nThis issue can be resolved by ensuring that the \nBundle Identifier\n in the \nInfo.plist\n matches the \nBundle Identifier\n shown on the \nApple Developer Portal\n.\n\n\n\n\nOpen the \nInfo.plist\n file\n\n\n\n\nEnter the app's \nBundle Identifier\n from the \nApple Developer Portal\n in the \nBundle Identifier\n field\n\n\n\n\n\n\nSample apps\n\n\n\n\n\n\nThere are four fully-functional demo apps included in this repository: a Xamarin Native and Xamarin Forms apps for both iOS and Android platforms. Use these apps as reference models for integrating the Branch SDK.\n\n\nTestbed-Xamarin (Native apps)\n\n\n\n\niOS\n  \n\n\nAndroid\n  \n\n\n\n\nTestbed-XamarinForms (Forms apps)\n\n\n\n\niOS\n  \n\n\nAndroid\n  \n\n\n\n\nShould you run into issues with the SDK, please check that they are present in the appropriate demo app before submitting any issue as a bug.", 
            "title": "Xamarin"
        }, 
        {
            "location": "/pages/apps/xamarin/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/xamarin/#configure-branch", 
            "text": "Branch links consist of an app-specific base domain ( testbed-xamarin.app.link , for example) followed by an alphanumeric suffix. This suffix, referred to as the  alias , can be either randomly generated ( FCIWxFeBGx , for example) or manually-defined ( testlink , for example). The app-specific base domain used to create the links is termed the  Branch link domain .  A Branch-integrated app called TestBed-Xamarin and assigned the dafult Branch link domain  testbed-xamarin.app.link  has the following Branch links:   https://testbed-xamarin.app.link/FCIWxFeBGx  https://testbed-xamarin.app.link/testlink   Note that when using the 'app.link' default link domain there is a second, alternate, form of the link domain that comes into play when displaying Branch Deepviews - the  alternate link domain . This  alternate link domain  sees the domain's '.app.link' string replaced by '-alternate.app.link'. If you are using a default app.link link domain, both the regular and alternate domains will be needed when configuring a project to support deep linking.", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/xamarin/#branch-keys", 
            "text": "Branch keys consist of a prefix ( key_live_  or  key_test_ ) followed by a string of 32 aphanumeric characters ( key_live_kdzhBMBYt5Pi4g4DVRfQbdkbqDlm5rIv , for example). Branch keys are used to associate apps with Branch links. An app's Branch key is required to initialize the Branch SDK. Data associated with Branch links can only be read by apps that  use the same Branch key.  Note that the  Live  and  Test  apps on the Branch dashboard are completely separate; each has its own Branch key. Even when  Live  and  Test  sections of the dashboard have been configured identically and links from both are able to open up a particular app, the app will only receive link data for which it has the matching Branch key.", 
            "title": "Branch keys"
        }, 
        {
            "location": "/pages/apps/xamarin/#creating-a-branch-link-domain-and-branch-key-for-an-app", 
            "text": "Register the app on the Branch dashboard, here:  https://dashboard.branch.io  The Branch key can be found on the  General Settings  page. The app's Branch link domain  will be listed at the very bottom of the  Link Settings  page.", 
            "title": "Creating a Branch link domain and Branch key for an app"
        }, 
        {
            "location": "/pages/apps/xamarin/#configure-app", 
            "text": "", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/xamarin/#adding-the-branch-sdk-with-nuget", 
            "text": "The Branch Xamarin SDK is available as a NuGet package. The  Branch NuGet package  must be added to each of the Xamarin projects that will use Branch methods.    To add the Branch NuGet package to a project:     Right-click on each project and select  Add     Add NuGet Packages     If not already present, find the  Microsoft BCL Build Components  package version 1.0.21 and add it to the project    Find the  Branch Xamarin SDK  package version 3.0 and add it to the project", 
            "title": "Adding the Branch SDK with NuGet"
        }, 
        {
            "location": "/pages/apps/xamarin/#adding-the-branch-sdk-without-nuget", 
            "text": "If, instead of using NuGet, you would rather build and reference the Branch assemblies directly:   Clone this repository to the local machine:  https://github.com/BranchMetrics/xamarin-branch-deep-linking.git  Add the  Branch-Xamarin-SDK  project to the solution and reference it from the Android, iOS and Forms (if applicable) projects  Add the  Branch-Xamarin-SDK.Droid  project to the solution and reference it from the Android project, if any   Add the  Branch-Xamarin-SDK.iOS  project and reference it from the iOS project, if any", 
            "title": "Adding the Branch SDK without NuGet"
        }, 
        {
            "location": "/pages/apps/xamarin/#initialize-branch", 
            "text": "", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/xamarin/#integrating-the-branch-sdk", 
            "text": "The steps for integrating the Branch SDK with a project differ depending on whether or not the project is creating a Xamarin Forms application and on which mobile platform the project is intended, iOS or Android. Instructions for each of the four scenarios are provided below.", 
            "title": "Integrating the Branch SDK"
        }, 
        {
            "location": "/pages/apps/xamarin/#xamarin-native-solutions", 
            "text": "", 
            "title": "Xamarin Native solutions"
        }, 
        {
            "location": "/pages/apps/xamarin/#integrating-the-branch-sdk-with-an-ios-native-project", 
            "text": "I. Create an Apple device Provisioning Profile for the app      Open Xcode and create a new project with the same name as your Xamarin iOS project  On the Xcode project's  General  tab, verify the app's case-sensitive Bundle Identifier is correct and select the appropriate Team (be sure to resolve any errors here)  Select the  Capabilities  tab and enable the  Associated Domains  entitlement  Create 'applinks:' entries for the Branch link domain and the alternate link domain (the link domain can be found at the bottom of the Branch dashboard's  Link Settings  page). For example, the entries for an app with the default link domain 'testiosapp.app.link' would be:  applinks:testiosapp.app.link  applinks:testiosapp-alternate.app.link     Use Xcode to run this newly-created app on an iOS device. This will create and install a Provisioning Profile with the proper entitlements on that device.  Close Xcode   II. Enter the app's settings on the Branch dashboard      On the  Link Settings  page, check the  I have an iOS App  checkbox  Enter the app's URI Scheme in the  iOS URI Scheme  field (for an app with the URI Scheme  testbed-xamarin , for example, the entry would be:  testbed-xamarin:// )  Enter the app's Apple Store name in the  Apple Store Search  field (if the app is not yet available on the App Store select  Custom URL  and enter as a placeholder the URL of an appropriate web site - the exact site does not matter)  Check the  Enable Universal Links  checkbox  Enter the app's case-sensitive Bundle Identifier and Apple App Prefix as shown on the  Apple Developer Portal   III. Configure the Xamarin project's Info.plist file      Open the  Info.plist  file  Enter the app's  Bundle Identifier  from the  Apple Developer Portal  in the  Bundle Identifier  field.  IMPORTANT:  this field will automatically be populated with an all-lowercase value by Xamarin. The value is in fact case sensitive and must match the value in the  Apple Developer Portal  precisely.    Click on the  Advanced  tab     In the  URL Types  section, click the  Add URL Type  button   Identifier:  Branch Scheme  URL Schemes:  {the app's URI Scheme - 'testiosapp', for example}  Role:  Editor      IV. Configure the Xamarin project's Associated Domains entitlement      Open the  Entitlements.plist  file and browse to  Associated Domains  Create entries for both the app's link domain and its alternate link domain. The entries for the TestBed-Xamarin app would be:  applinks:testiosapp.app.link  applinks:testiosapp-alternate.app.link       V. Add Branch calls to the AppDelegate.cs file  Branch initialization occurs within the  FinishedLaunching  method of the  AppDelegate.cs  file. Branch calls are also required in the  OpenUrl ,  ContinueUserActivity , and  ReceiveRemoteNotification  methods to ensure that Branch link information is handled properly whenever the app becomes active.  Whenever the app becomes active, the Branch SDK will reach out to the Branch back end to retrieve any available link parameters. If the app became active due to a click on a Branch link, the link data will be returned in the  InitSessionComplete method . This is where any deep link routing logic should reside. Any error in retrieving Branch link data from the back end will returned in the  SessionRequestError  method.  using   Foundation ;  using   UIKit ;  using   BranchXamarinSDK ;  using   BranchXamarinSDK.iOS ;  using   System ;  namespace   TestiOSApp.iOS  {      [Register( AppDelegate )] \n     public   class   AppDelegate   :   UIApplicationDelegate ,   IBranchBUOSessionInterface \n     { \n         public   override   UIWindow   Window \n         { \n             get ; \n             set ; \n         } \n\n         public   override   bool   FinishedLaunching ( UIApplication   application ,   NSDictionary   launchOptions ) \n         { \n             // Debug mode - set to  false  before releasing to production \n             BranchIOS . Debug   =   true ;  \n             BranchIOS . Init ( key_live_cgEguO4UiDJSL4HIyTu85dkkDAdz38ER ,   launchOptions ,   this ); \n\n             return   true ; \n         } \n\n         // Called when the app is opened via URI scheme \n         public   override   bool   OpenUrl ( UIApplication   application ,   NSUrl   url ,   string   sourceApplication ,   NSObject   annotation ) \n         { \n             return   BranchIOS . getInstance (). OpenUrl ( url ); \n         } \n\n         // Called when the app is opened from a Universal Link \n         public   override   bool   ContinueUserActivity ( UIApplication   application ,   NSUserActivity   userActivity , \n                       UIApplicationRestorationHandler   completionHandler ) \n         { \n             return   BranchIOS . getInstance (). ContinueUserActivity ( userActivity ); \n         } \n\n         // Called when the app receives a push notification \n         public   override   void   ReceivedRemoteNotification ( UIApplication   application ,   NSDictionary   userInfo ) \n         { \n             BranchIOS . getInstance (). HandlePushNotification ( userInfo ); \n         } \n\n         // Called when the Branch initialization is completed \n         // Put deep-linking logic in this method \n         public   void   InitSessionComplete ( BranchUniversalObject   buo ,   BranchLinkProperties   blp ) \n         { \n             NSObject []   keys   =   { \n                 NSObject . FromObject ( +is_first_session ) \n             }; \n\n             NSObject []   values   =   {   NSObject . FromObject ( 0 )   }; \n             if   ( buo . metadata . ContainsKey ( +is_first_session )) \n             { \n                 values [ 0 ]   =   NSObject . FromObject ( buo . metadata [ +is_first_session ]); \n             } \n\n             NSDictionary   nsData   =   NSDictionary . FromObjectsAndKeys ( values ,   keys ); \n         } \n\n         // Called when there is an error initializing Branch \n         public   void   SessionRequestError ( BranchError   error ) \n         { \n             Console . WriteLine ( Branch error:    +   error . ErrorCode ); \n             Console . WriteLine ( error . ErrorMessage ); \n         } \n\n     }  }   VI. Update the project's Signing Identity and Provisioning Profile      Right-click on the iOS project and select  Options  Select  iOS Bundle Signing    Set the  Signing Identity  and  Provisioning Profile values  to the values used when deploying the Provisioning Profile to the device above", 
            "title": "# Integrating the Branch SDK with an iOS Native project"
        }, 
        {
            "location": "/pages/apps/xamarin/#integrating-the-branch-sdk-with-an-android-native-project", 
            "text": "I. Ensure that the Android project is not using the Shared Mono Runtime   Right-click on the Android project and select:  Options  Select:  Android Build  On the  General  tab, un-check:  Use Shared Mono Runtime   II. Add app capabilities in the app's Manifest file  In the  Required permissions  section of  AndroidManifest.xml , configure the following permissions:   AccessNetworkState  Internet   Additional reading on the Android manifest   Working with android manifest.xml  Add permissions to android manifest   III. Add the app's Branch key to the Strings.xml file  Add the Branch key to the Android project's  Resources/values/Strings.xml  file. This file contains values that can be accessed by the app's Application class.  ?xml version= 1.0  encoding= utf-8 ?  resources \n     string   name= app_name TestXamarinFormsApp /string \n     string   name= branch_key key_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW /string  /resources   IV. Create the project's *Application  class *  Create an Application.cs file   Right-click on the .Droid project and select  Add   New File...  Select:  General   Empty File  Name the file:  Application.cs  Enter the following code (replace 'TestAndroidApp' with the actual name of the app):   using   System ;  using   Android.App ;  using   Android.Content ;  using   Android.Runtime ;  using   BranchXamarinSDK ;  namespace   TestAndroidApp.Droid  {      [Application(AllowBackup = true, Icon =  @mipmap/icon , Label =  @string/app_name )]      [MetaData( io.branch.sdk.auto_link_disable , Value =  false )]      [MetaData( io.branch.sdk.TestMode , Value =  true )]      [MetaData( io.branch.sdk.BranchKey , Value =  @string/branch_key )] \n\n     public   class   TestAndroidApp   :   Application \n     { \n         public   TestAndroidApp ( IntPtr   javaReference ,   JniHandleOwnership   transfer )   :   base ( javaReference ,   transfer ) \n         { \n         } \n\n         public   override   void   OnCreate () \n         { \n             base . OnCreate (); \n             BranchAndroid . GetAutoInstance ( this . ApplicationContext ); \n         } \n     }  }      Key  Value      io.branch.sdk.TestMode  Setting this parameter to  true  enables Debug Mode, which causes simple uninstall/reinstalls of the app to trigger  install  events. Be sure to disable this before deploying to production. Note that enabling Debug Mode on Android also forces the app to use the Branch  Test  key if this key has been added to the project. Apps running with a  Test  key will be unable to receive data from Branch links created with the  Live  key.    io.branch.sdk.BranchKey  The app's Branch key. Both a  Live  key and a  Test  key can be added to the Strings.xml file. When  Test  Mode is enabled the app will automatically use the  Test  key, if one has been specified.     V. Create an activity to handle Branch events: BranchActivity   Right-click on the .Droid project and select  Add   New File...  Select:  Android   Activity  Rename the file:  BranchActivity.cs  Enter the following code (replace 'TestAndroidApp' with the actual name of the app):   using   System ;  using   System.Collections.Generic ;  using   System.Linq ;  using   System.Text ;  using   Newtonsoft.Json ;  using   BranchXamarinSDK ;  using   Android.App ;  using   Android.Content ;  using   Android.OS ;  using   Android.Runtime ;  using   Android.Views ;  using   Android.Widget ;  namespace   TestAndroidApp.Droid  {      [Activity(Label =  BranchActivity )] \n     public   class   BranchActivity   :   Activity \n\n     { \n         private   string   logString   =   ; \n\n         protected   override   void   OnCreate ( Bundle   savedInstanceState ) \n         { \n             base . OnCreate ( savedInstanceState ); \n\n             LogMessage ( Branch initialization completed:  ); \n\n             Dictionary string ,   object   data   =   JsonConvert . DeserializeObject Dictionary string ,   object ( Intent . GetStringExtra ( BranchData )); \n             foreach   ( var   key   in   data . Keys ) \n             { \n                 LogMessage ( key   +    :    +   data [ key ]. ToString ()); \n             } \n         } \n\n         #region Utils \n\n         void   LogMessage ( string   message ) \n         { \n             Console . WriteLine ( message ); \n             logString   +=   DateTime . Now . ToLongTimeString ()   +       +   message   +   \\n ; \n         } \n\n         #endregion \n     }  }   VI. Create an activity to handle Branch errors: BranchErrorActivity   Right-click on the .Droid project and select  Add   New File...  Select:  Android   Activity  Rename the file:  BranchErrorActivity.cs  Enter the following code (replace 'TestAndroidApp' with the actual name of the app):   using   System ;  using   System.Collections.Generic ;  using   System.Linq ;  using   System.Text ;  using   Android.App ;  using   Android.Content ;  using   Android.OS ;  using   Android.Runtime ;  using   Android.Views ;  using   Android.Widget ;  namespace   TestAndroidApp.Droid  {      [Activity(Label =  BranchErrorActivity )] \n     public   class   BranchErrorActivity   :   Activity \n     { \n         private   string   logString   =   ; \n\n         protected   override   void   OnCreate ( Bundle   savedInstanceState ) \n         { \n             base . OnCreate ( savedInstanceState ); \n\n             LogMessage ( Branch initialization failed ); \n             LogMessage ( Error code:    +   Intent . Extras . GetInt ( ErrorCode ). ToString ()); \n             LogMessage ( Intent . Extras . GetString ( ErrorMessage )); \n         } \n\n         #region Utils \n\n         void   LogMessage ( string   message ) \n         { \n             Console . WriteLine ( message ); \n             logString   +=   DateTime . Now . ToLongTimeString ()   +       +   message   +   \\n ; \n         } \n\n         #endregion \n     }  }   VII. Initialize Branch and configure Branch session management  Branch must be initilialized in the OnCreate method of either the Application class or the first Activity launched by the app. The OnNewIntent method must be added to retrieve the latest link identifier when the app becomes active due to a Branch link click.  Branch initializes asynchronously, with Branch link parameters being returned following a network call to Branch. If initialization is successful, the InitSessionComplete method will be invoked. If initialization is unsuccessful, the SessionRequestError method will be invoked. Deep link routing logic should be located in the InitSessionComplete method.  In the code example below the following Branch initialization and session management steps have been added to MainActivity.cs:   An Activity to respond to the app's URI Scheme  An Activity is launched in  singleTask  mode  Override the OnCreate method and initialize the Branch SDK  Override the OnNewIntent method  Add an InitSessionComplete method for processing Branch link information (this is where deep link routing code should be located)  Add a SessionRequestError method to handle situations where Branch fails to initialize   using   Android.App ;  using   Android.Widget ;  using   Android.OS ;  using   BranchXamarinSDK ;  using   System ;  using   System.Collections.Generic ;  using   Android.Content ;  using   Newtonsoft.Json ;  namespace   TestAndroidApp.Droid  {      [Activity(Label =  TestAndroidApp , MainLauncher = true, Icon =  @mipmap/icon , LaunchMode = Android.Content.PM.LaunchMode.SingleTask)]      [IntentFilter(new[]   {   android.intent.action.VIEW   }, \n     Categories   =   new []   {   android.intent.category.DEFAULT ,   android.intent.category.BROWSABLE   }, \n     DataScheme   =   testandroidapp , \n     DataHost   =   open )]      [IntentFilter(new[]   {   android.intent.action.VIEW   }, \n     Categories   =   new []   {   android.intent.category.DEFAULT ,   android.intent.category.BROWSABLE   }, \n     DataScheme   =   https , \n     DataHost   =   testandroidapp.app.link )] \n\n     public   class   MainActivity   :   Activity ,   IBranchSessionInterface \n     { \n\n         protected   override   void   OnCreate ( Bundle   savedInstanceState ) \n         { \n             base . OnCreate ( savedInstanceState ); \n\n             BranchAndroid . Init ( this ,   Resources . GetString ( Resource . String . branch_key ),   this ); \n         } \n\n         // Ensure we get the updated link identifier when the app becomes active \n         // due to a Branch link click after having been in the background \n         protected   override   void   OnNewIntent ( Intent   intent ) \n         { \n             this . Intent   =   intent ; \n         } \n\n         public   void   InitSessionComplete ( Dictionary string ,   object   data ) \n         { \n             var   intent   =   new   Intent ( this ,   typeof ( BranchActivity )); \n             intent . PutExtra ( BranchData ,   JsonConvert . SerializeObject ( data )); \n\n             StartActivity ( intent ); \n         } \n\n         public   void   SessionRequestError ( BranchError   error ) \n         { \n             Console . WriteLine ( Branch session initialization error:    +   error . ErrorCode ); \n             Console . WriteLine ( error . ErrorMessage ); \n\n             var   intent   =   new   Intent ( this ,   typeof ( BranchErrorActivity )); \n             intent . PutExtra ( ErrorCode ,   error . ErrorCode ); \n             intent . PutExtra ( ErrorMessage ,   error . ErrorMessage ); \n\n             StartActivity ( intent ); \n         } \n     }  }", 
            "title": "# Integrating the Branch SDK with an Android Native project"
        }, 
        {
            "location": "/pages/apps/xamarin/#xamarin-forms-solutions", 
            "text": "", 
            "title": "Xamarin Forms solutions"
        }, 
        {
            "location": "/pages/apps/xamarin/#configuring-the-c-project", 
            "text": "These steps are required for all Forms projects, both iOS and Android.  I. Change the C# project's profile to PCL 4.5 - Profile78   Right-click on the project name and select:  Options     Browse the menu to  Build   General     Change the  Current Profile  to:  PCL 4.5 - Profile78      II. Add the Branch SDK with NuGet  The Branch Xamarin SDK is available as a NuGet package. The  Branch NuGet package  must be added to each of the Xamarin projects that will use Branch methods.     Right-click on each project and select  Add   Add NuGet Packages     If not already present, find the  Microsoft BCL Build Components  package version 1.0.21 and add it to the project    Find the  Branch Xamarin SDK  package version 3.0 and add it to the project     III. Create a class for Branch session handling  Branch initializes asynchronously, with Branch link parameters being returned following a network call to Branch. If initialization is successful, the InitSessionComplete method will be invoked. If initialization is unsuccessful, the SessionRequestError method will be invoked. Deep link routing logic should be located in the InitSessionComplete method.   Right-click on the C# project and select  Add   New File...     Select:  General   Empty Class     Rename the file:  TestXamarinFormsApp.cs     Enter the following code (replacing 'TestXamarinFormsApp' with the actual name of the app):     using   BranchXamarinSDK ;  using   System.Collections.Generic ;  using   System.ComponentModel ;  using   Xamarin.Forms ;  namespace   TestXamarinFormsApp  { \n     public   class   TestXamarinFormsApp   :   Application ,   IBranchSessionInterface \n     { \n\n         public   TestXamarinFormsApp () \n         { \n         } \n\n         #region IBranchSessionInterface implementation \n\n         public   void   InitSessionComplete ( Dictionary string ,   object   data ) \n         { \n         } \n\n         public   void   CloseSessionComplete () \n         { \n         } \n\n         public   void   SessionRequestError ( BranchError   error ) \n         { \n         } \n\n         #endregion \n     }  }   IV. Create a class for handling link data  Branch stores link data in an object referred to as the  Branch Universal Object , or  BUO .   Right-click on the C# project and select  Add   New File...     Select:  General   Empty Class     Rename the file:  TestXamarinFormsAppBUO.cs     Enter the following code (replace 'TestXamarinFormsApp' with the actual name of the app):   using   BranchXamarinSDK ;  using   System.Collections.Generic ;  using   System.ComponentModel ;  using   Xamarin.Forms ;  namespace   TestXamarinFormsApp  { \n     public   class   TestXamarinFormsAppBUO   :   Application ,   IBranchBUOSessionInterface \n     { \n\n         public   TestXamarinFormsAppBUO () \n         { \n         } \n\n         #region IBranchBUOSessionInterface implementation \n\n         public   void   InitSessionComplete ( BranchUniversalObject   buo ,   BranchLinkProperties   blp ) \n         { \n         } \n\n         public   void   SessionRequestError ( BranchError   error ) \n         { \n         } \n\n         #endregion \n     }  }", 
            "title": "# Configuring the C# project"
        }, 
        {
            "location": "/pages/apps/xamarin/#integrating-with-an-ios-forms-app", 
            "text": "I. Create an Apple device Provisioning Profile for the app   Open Xcode and create a new project with the same name as your Xamarin iOS project    On the Xcode project's  General  tab, enter the app's Bundle Identifier and select the appropriate Team (be sure to resolve any errors here)    Select the  Capabilities  tab and enable the  Associated Domains  entitlement    Create 'applinks:' entries for the Branch link domain assigned to the app (the link domain can be found at the bottom of the Branch dashboard's  Link Settings  page). For example, the entries for the app  TestXamarinFormsApp  would be:  applinks:testxamarinformsapp.app.link  applinks:testxamarinformsapp-alternate.app.link     Use Xcode to run this newly-created app on an iOS device. This will create and install a Provisioning Profile with the proper entitlements on that device.    Close Xcode     II. Enter the app's settings on the Branch dashboard   On the  Link Settings  page, check the  I have an iOS App  checkbox    Enter the app's URI Scheme in the  iOS URI Scheme  field (for an app with the URI Scheme  testxamarinformsapp , for example, the entry would be:  testxamarinformsapp:// )    Enter the app's Apple Store name in the  Apple Store Search  field (if the app is not yet available on the App Store select  Custom URL  and enter as a placeholder the URL of an appropriate web site - the exact site does not matter)    Check the  Enable Universal Links  checkbox    Enter the app's Bundle Identifier and Apple App Prefix as shown on the  Apple Developer Portal      III. Configure the Xamarin project's Info.plist file   Open the  Info.plist  file  Enter the app's  Bundle Identifier  from the  Apple Developer Portal  in the  Bundle Identifier  field.  IMPORTANT:  this field will automatically be populated with an all-lowercase value by Xamarin. The value is in fact case sensitive and must match the value in the  Apple Developer Portal  precisely.    Click on the  Advanced  tab     In the  URL Types  section, click the  Add URL Type  button   Identifier:  Branch Scheme  URL Schemes:  {the app's URI Scheme - 'testxamarinformsapp', for example}  Role:  Editor      IV. Configure the Xamarin project's Associated Domains entitlement   Open the  Entitlements.plist  file and browse to  Associated Domains  (if this file does not already exist, create it)  Create entries for both the app's link domain and its alternate link domain. The entries for the TestBed-Xamarin app would be:  applinks:testxamarinformsapp.app.link  applinks:testxamarinformsapp-alternate.app.link       V. Add Branch calls to the AppDelegate.cs file  To ensure that the Branch SDK initializes when the app starts and can retrieve link parameters whenever the app becomes active, Branch initialization occurs within the  FinishedLaunching  method of the AppDelegate.cs file. Branch calls are also required in the OpenUrl, ContinueUserActivity, and ReceiveRemoteNotification methods to ensure that Branch link information is handled properly whenever the app becomes active. The  AppDelegate.cs  file should look like this:  using   System ;  using   System.Collections.Generic ;  using   System.Linq ;  using   Foundation ;  using   UIKit ;  using   BranchXamarinSDK ;  using   TestXamarinFormsApp ;  namespace   TestXamarinFormsApp.iOS  {      [Register( AppDelegate )] \n     public   partial   class   AppDelegate   :   global :: Xamarin . Forms . Platform . iOS . FormsApplicationDelegate \n     { \n         public   override   bool   FinishedLaunching ( UIApplication   app ,   NSDictionary   options ) \n         { \n             global :: Xamarin . Forms . Forms . Init (); \n\n             // Debug mode - set to  false  before releasing to production \n             BranchIOS . Debug   =   true ; \n\n             TestXamarinFormsAppBUO   appBUO   =   new   TestXamarinFormsAppBUO (); \n             BranchIOS . Init ( key_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW ,   options ,   appBUO ); \n             LoadApplication ( appBUO ); \n\n             return   base . FinishedLaunching ( app ,   options ); \n         } \n\n         // Called when the app is opened via URI scheme \n         public   override   bool   OpenUrl ( UIApplication   application ,   NSUrl   url ,   string   sourceApplication ,   NSObject   annotation ) \n         { \n             return   BranchIOS . getInstance (). OpenUrl ( url ); \n         } \n\n         // Called when the app is opened from a Universal Link  \n         public   override   bool   ContinueUserActivity ( UIApplication   application ,   NSUserActivity   userActivity ,   UIApplicationRestorationHandler   completionHandler ) \n         { \n             return   BranchIOS . getInstance (). ContinueUserActivity ( userActivity ); \n         } \n\n         // Called when the app receives a push notification \n         public   override   void   ReceivedRemoteNotification ( UIApplication   application ,   NSDictionary   userInfo ) \n         { \n             BranchIOS . getInstance (). HandlePushNotification ( userInfo ); \n         } \n     }  }", 
            "title": "# Integrating with an iOS Forms app"
        }, 
        {
            "location": "/pages/apps/xamarin/#integrating-with-an-android-forms-app", 
            "text": "I. Ensure that the Android project is not using the Shared Mono Runtime   Right-click on the Android project and select:  Options     Select:  Android Build     On the  General  tab, un-check:  Use Shared Mono Runtime      II. Add app capabilities in the AndroidManifest.xml file  In the  Required permissions  section of  AndroidManifest.xml , configure the following permissions:   AccessNetworkState  Internet   Additional reading on the Android manifest   Working with android manifest.xml  Add permissions to android manifest   III. Add the app's Branch key to the Strings.xml file  Create a  Resources/values/Strings.xml  file that can be accessed by the app's Application class for the Android project and add the Branch key to this file.   In the Android project, browse to  Resources/values  Right-click on the  values  folder and select:  Add   New File...  Select:  XML   Empty XML File  Name the file:  Strings  Enter the following values:   ?xml version= 1.0  encoding= utf-8 ?  resources \n     string   name= app_name TestXamarinFormsApp /string \n     string   name= branch_key key_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW /string  /resources   IV. Configure the .Droid project's Application class  Within the .Droid project's Application class:   Set the Branch SDK's initialization parameters    Override the  OnCreate()  method to call  BranchAndroid.GetAutoInstance      If an Appplication class does not already exist for the project, create one:   Right-click on the .Droid project and select:  Add   New File...  Select:  General   Empty Class  Name the file:  {app name}  ('TestXamarinFormsApp', for example)   The file should have the following contents:  using   System ;  using   Android.App ;  using   Android.Content ;  using   Android.Runtime ;  using   BranchXamarinSDK ;  namespace   TestXamarinFormsApp.Droid  {      [Application (AllowBackup = true, Icon =  @drawable/icon , Label =  @string/app_name )]      [MetaData( io.branch.sdk.auto_link_disable , Value =  false )]      [MetaData( io.branch.sdk.TestMode , Value =  true )]      [MetaData( io.branch.sdk.BranchKey , Value =  @string/branch_key )] \n\n     public   class   App   :   Application \n     { \n         public   App ( IntPtr   javaReference ,   JniHandleOwnership   transfer )   :   base ( javaReference ,   transfer ) \n         { \n         } \n\n         public   override   void   OnCreate () \n         { \n             base . OnCreate (); \n             BranchAndroid . GetAutoInstance ( this . ApplicationContext ); \n         } \n     }  }      Key  Value      io.branch.sdk.TestMode  Setting this parameter to  true  enables Debug Mode, which causes simple uninstall/reinstalls of the app to trigger  install  events. Be sure to disable this before deploying to production. Note that enabling Debug Mode on Android also forces the app to use the Branch  Test  key if this key has been added to the project. Apps running with a  Test  key will be unable to receive data from Branch links created with the  Live  key.    io.branch.sdk.BranchKey  The app's Branch key. Both a  Live  key and a  Test  key can be added to the Strings.xml file. When  Test  Mode is enabled the app will automatically use the  Test  key, if one has been specified.     V. Initialize Branch  Branch must be initilialized in the OnCreate method of either the Application class or the first Activity launched by the app. The OnNewIntent method must be added to retrieve the latest link identifier when the app becomes active due to a Branch link click.  In the code example below the following Branch initialization and session management steps have been added to MainActivity.cs:   Register an Activity to respond to the app's URI Scheme  Ensure the Activity is launched in  singleTask  mode  Override the OnCreate method and initialize the Branch SDK  Override the OnNewIntent method   using   System ;  using   Android.App ;  using   Android.Content ;  using   Android.Content.PM ;  using   Android.Runtime ;  using   Android.Views ;  using   Android.Widget ;  using   Android.OS ;  using   BranchXamarinSDK ;  using   TestXamarinFormsApp ;  namespace   TestXamarinFormsApp.Droid  {      [Activity(Label =  TestXamarinFormsApp.Droid , LaunchMode = LaunchMode.SingleTask, Icon =  @drawable/icon , Theme =  @style/MyTheme , MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]      [IntentFilter(new[]   {   android.intent.action.VIEW   }, \n         Categories   =   new []   {   android.intent.category.DEFAULT ,   android.intent.category.BROWSABLE   }, \n         DataScheme   =   testxamarinformsapp , \n         DataHost   =   open )]      [IntentFilter(new[]   {   android.intent.action.VIEW   }, \n         Categories   =   new []   {   android.intent.category.DEFAULT ,   android.intent.category.BROWSABLE   }, \n         DataScheme   =   https , \n         DataHost   =   testxamarinformsapp.app.link )] \n\n     public   class   MainActivity   :   global :: Xamarin . Forms . Platform . Android . FormsApplicationActivity \n     { \n         protected   override   void   OnCreate ( Bundle   savedInstanceState ) \n         { \n             base . OnCreate ( savedInstanceState ); \n\n             global :: Xamarin . Forms . Forms . Init ( this ,   savedInstanceState ); \n\n             TestXamarinFormsAppBUO   linkData   =   new   TestXamarinFormsAppBUO (); \n             BranchAndroid . Init ( this ,   GetString ( Resource . String . branch_key ),   linkData ); \n             LoadApplication ( linkData ); \n         } \n\n         protected   override   void   OnNewIntent ( Intent   intent ) \n         { \n             this . Intent   =   intent ; \n         } \n     }  }", 
            "title": "# Integrating with an Android Forms app"
        }, 
        {
            "location": "/pages/apps/xamarin/#4-submitting-ios-apps-to-the-app-store", 
            "text": "Branch uses the Apple Advertising Identifier, or  IDFA , to identify users across our entire partner network, greatly increasing the accuracy of matching. Read more about matching accuracy on the  Matching Platform  page.", 
            "title": "4 - Submitting iOS Apps to the App Store"
        }, 
        {
            "location": "/pages/apps/xamarin/#notifying-apple-of-idfa-usage", 
            "text": "Be sure to let Apple know that you are using the IDFA when submitting apps to the App Store after integrating the Branch SDK.     Answer  Yes  when presented with the question:  Does this app use the Advertising Identifier (IDFA)?     Check the following two boxes:    Attribute this app installation to a previously served advertisement     Attribute an action taken within this app to a previously served advertisement", 
            "title": "Notifying Apple of IDFA usage"
        }, 
        {
            "location": "/pages/apps/xamarin/#test-deep-link", 
            "text": "", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/xamarin/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/xamarin/#create-content-reference", 
            "text": "The Branch Universal Object is a data object representing a piece of content that is referenced by a Branch link. Together with a set of Link Properties (marketing metadata such as Campaign and Channel as well as Branch-behavior related parameters such as $deepview_path), can be combined to generate a Branch link.  BranchUniversalObject   universalObject   =   new   BranchUniversalObject ();  universalObject . canonicalIdentifier   =   id12345 ;  universalObject . title   =   id12345 title ;  universalObject . contentDescription   =   My awesome piece of content! ;  universalObject . imageUrl   =   https://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png ;  universalObject . metadata . Add ( foo ,   bar );", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/xamarin/#create-deep-link", 
            "text": "Branch links can be created in-app (as well as in many other ways - see:  Branch link creation guide . When they are, and setIdentity has been called to associate a User ID with the current user session, Branch links will be associated with that User ID.  BranchLinkProperties   linkProperties   =   new   BranchLinkProperties ();  linkProperties . tags . Add ( tag1 );  linkProperties . tags . Add ( tag2 );  linkProperties . feature   =   sharing ;  linkProperties . channel   =   facebook ;  linkProperties . controlParams . Add ( $desktop_url ,   http://example.com );  Branch . GetInstance (). GetShortURL ( callback , \n                                   universalObject , \n                                   linkProperties );   Note \nYou can customize the Facebook OG tags of each URL if you want to dynamically share content by using the following  optional keys in the data dictionary . Please use this  Facebook tool  to debug the OG tags!     Key  Value      \"$og_title\"  The title you'd like to appear for the link in social media    \"$og_description\"  The description you'd like to appear for the link in social media    \"$og_image_url\"  The URL for the image you'd like to appear for the link in social media    \"$og_video\"  The URL for the video    \"$og_url\"  The URL you'd like to appear    \"$og_app_id\"  the OG app ID. Optional and rarely used.     Also, you do custom redirection by inserting the following  optional keys in the dictionary :     Key  Value      \"$desktop_url\"  Where to send the user on a desktop or laptop. By default it is the Branch-hosted text-me service    \"$android_url\"  The replacement URL for the Play Store to send the user if they don't have the app.  Only necessary if you want a mobile web splash    \"$ios_url\"  The replacement URL for the App Store to send the user if they don't have the app.  Only necessary if you want a mobile web splash    \"$ipad_url\"  Same as above but for iPad Store    \"$fire_url\"  Same as above but for Amazon Fire Store    \"$blackberry_url\"  Same as above but for Blackberry Store    \"$windows_phone_url\"  Same as above but for Windows Store     You have the ability to control the direct deep linking of each link by inserting the following  optional keys in the dictionary :     Key  Value      \"$deeplink_path\"  The value of the deep link path that you'd like us to append to the URI. For example, you could specify \"$deeplink_path\": \"radio/station/456\" and we'll open the app with the URI \"theapp://radio/station/456?link_click_id=branch-identifier\". This is primarily for supporting legacy deep linking infrastructure.    \"$always_deeplink\"  true or false. (default is not to deep link first) This key can be specified to have our linking service force try to open the app, even if we're not sure the user has the app installed. If the app is not installed, we fall back to the respective app store or $platform_url key. By default, we only open the app if we've seen a user initiate a session in the app from a Branch link (has been cookied and deep linked by Branch)", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/xamarin/#share-deep-link", 
            "text": "ShareLink (IBranchLinkShareInterface callback,\n           BranchUniversalObject universalObject,\n           BranchLinkProperties linkProperties,\n           string message)", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/xamarin/#read-deep-link", 
            "text": "", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/xamarin/#retrieve-session-install-or-open-parameters", 
            "text": "Session parameters will be available at any point. If there are no params, the dictionary will be empty. This refreshes with every new session (app installs AND app opens)  Dictionary string ,   object   sessionParams   =   Branch . GetInstance (). GetLatestReferringParams ();  \nor  BranchUniversalObject   buo   =   Branch . GetInstance (). GetLastReferringBranchUniversalObject ();  BranchLinkProperties   blp   =   Branch . GetInstance (). GetLastReferringBranchLinkProperties ();", 
            "title": "Retrieve session (install or open) parameters"
        }, 
        {
            "location": "/pages/apps/xamarin/#retrieve-install-install-only-parameters", 
            "text": "If you ever want to access the original session params (the parameters passed in for the first install event only), you can use this line. This is useful if you only want to reward users who newly installed the app from a referral link or something.  Branch   branch   =   Branch . GetInstance   ();  Dictionary string ,   object   installParams   =   branch . GetFirstReferringParams ();  \nor  BranchUniversalObject   buo   =   Branch . GetInstance (). GetFirstReferringBranchUniversalObject ();  BranchLinkProperties   blp   =   Branch . GetInstance (). GetFirstReferringBranchLinkProperties ();", 
            "title": "Retrieve install (install only) parameters"
        }, 
        {
            "location": "/pages/apps/xamarin/#navigate-to-content", 
            "text": "", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/xamarin/#display-content", 
            "text": "", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/xamarin/#track-content", 
            "text": "RegisterView (BranchUniversalObject universalObject)", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/xamarin/#track-users", 
            "text": "", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/xamarin/#persistent-identities", 
            "text": "Often, you might have the own user IDs, or want referral and event data to persist across platforms or uninstall/reinstall. It's helpful if you know the users access the service from different devices. This where we introduce the concept of an 'identity'.  To identify a user, just call:  Branch   branch   =   Branch . GetInstance   ();   branch . SetIdentity ( the user id ,   this );    // Where this implements IBranchIdentityInterface", 
            "title": "Persistent identities"
        }, 
        {
            "location": "/pages/apps/xamarin/#logout", 
            "text": "If you provide a logout function in the app, be sure to clear the user when the logout completes. This will ensure that all the stored parameters get cleared and all events are properly attributed to the right identity.  Warning  this call will clear the referral credits and attribution on the device.  Branch   branch   =   Branch . GetInstance   ();  branch . Logout ( this );   // Where this implements IBranchIdentityInterface", 
            "title": "Logout"
        }, 
        {
            "location": "/pages/apps/xamarin/#track-events", 
            "text": "Branch   branch   =   Branch . GetInstance   ();  branch . UserCompletedAction ( the_custom_event );   OR if you want to store some state with the event  Branch   branch   =   Branch . GetInstance   ();  Dictionary string ,   object   data   =   new   Dictionary string ,   object ();  data . Add ( sku ,   123456789 );  branch . UserCompletedAction ( purchase_event ,   data );   Some example events you might want to track:  complete_purchase  wrote_message  finished_level_ten", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/xamarin/#track-commerce", 
            "text": "", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/xamarin/#handle-referrals", 
            "text": "", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/xamarin/#referral-rewards", 
            "text": "In a standard referral system, you have 2 parties: the original user and the invitee. Our system is flexible enough to handle rewards for all users. Here are a couple example scenarios:  1) Reward the original user for taking action (eg. inviting, purchasing, etc)  2) Reward the invitee for installing the app from the original user's referral link  3) Reward the original user when the invitee takes action (eg. give the original user credit when their the invitee buys something)  These reward definitions are created on the dashboard, under the 'Reward Rules' section in the 'Referrals' tab on the dashboard.  Warning: For a referral program, you should not use unique awards for custom events and redeem pre-identify call. This can allow users to cheat the system.", 
            "title": "Referral rewards"
        }, 
        {
            "location": "/pages/apps/xamarin/#check-a-reward-balance", 
            "text": "Reward balances change randomly on the backend when certain actions are taken (defined by the rules), so you'll need to make an asynchronous call to retrieve the balance. Here is the syntax:  Branch   branch   =   Branch . GetInstance   ();  branch . LoadRewards ( this );  #region IBranchRewardsInterface implementation \n\n         public   void   RewardsLoaded   () \n         { \n             // Do something with the data... \n         } \n\n         public   void   RewardsRedeemed   () \n         { \n             // Do something with the data... \n         } \n\n         public   void   CreditHistory   ( List CreditHistoryEntry   history ) \n         { \n             // Do something with the data... \n         } \n\n         public   void   RewardsRequestError   ( BranchError   error ) \n         { \n             // Do something with the data... \n         }  #endregion", 
            "title": "Check a reward balance"
        }, 
        {
            "location": "/pages/apps/xamarin/#redeem-all-or-some-of-the-reward-balance", 
            "text": "We will store how many of the rewards have been deployed so that you don't have to track it on the end. In order to save that you gave the credits to the user, you can call redeem. Redemptions will reduce the balance of outstanding credits permanently.  Branch   branch   =   Branch . GetInstance   ();  branch . RedeemRewards ( this ,   amount ,   bucket );  #region IBranchRewardsInterface implementation \n\n         public   void   RewardsLoaded   () \n         { \n             // Do something with the data... \n         } \n\n         public   void   RewardsRedeemed   () \n         { \n             // Do something with the data... \n         } \n\n         public   void   CreditHistory   ( List CreditHistoryEntry   history ) \n         { \n             // Do something with the data... \n         } \n\n         public   void   RewardsRequestError   ( BranchError   error ) \n         { \n          // Do something with the data... \n         } \n\n         #endregion", 
            "title": "Redeem all or some of the reward balance"
        }, 
        {
            "location": "/pages/apps/xamarin/#get-credit-history", 
            "text": "This call will retrieve the entire history of credits and redemptions from the individual user.  It also implements the IBranchRewardsInterface(see above). To use this call, implement like so:  Branch   branch   =   Branch . GetInstance   ();  branch . GetCreditHistory ( this );   The response will return an array that has been parsed from the following JSON: [ \n     { \n         transaction :   { \n                            date :   2014-10-14T01:54:40.425Z , \n                            id :   50388077461373184 , \n                            bucket :   default , \n                            type :   0 , \n                            amount :   5 \n                        }, \n         referrer :   12345678 , \n         referree :   null \n     }, \n     { \n         transaction :   { \n                            date :   2014-10-14T01:55:09.474Z , \n                            id :   50388199301710081 , \n                            bucket :   default , \n                            type :   2 , \n                            amount :   -3 \n                        }, \n         referrer :   null , \n         referree :   12345678 \n     }  ]   referrer \n: The id of the referring user for this credit transaction. Returns null if no referrer is involved. Note this id is the user id in developer's own system that's previously passed to Branch's identify user API call.  referree \n: The id of the user who was referred for this credit transaction. Returns null if no referree is involved. Note this id is the user id in developer's own system that's previously passed to Branch's identify user API call.  type \n: This is the type of credit transaction   0  - A reward that was added automatically by the user completing an action or referral  1  - A reward that was added manually  2  - A redemption of credits that occurred through our API or SDKs  3  - This is a very unique case where we will subtract credits automatically when we detect fraud", 
            "title": "Get credit history"
        }, 
        {
            "location": "/pages/apps/xamarin/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/xamarin/#recommendations", 
            "text": "", 
            "title": "Recommendations"
        }, 
        {
            "location": "/pages/apps/xamarin/#unable-to-add-branch-required-nuget-packages-to-the-c-project", 
            "text": "Adding required NuGet packages to the C# project may fail if the project has not been configured to use  PCL 4.5 - Profile78   Right-click on the project name and select:  Options     Browse the menu to  Build   General     Change the  Current Profile  to:  PCL 4.5 - Profile78", 
            "title": "Unable to add Branch-required NuGet packages to the C# project"
        }, 
        {
            "location": "/pages/apps/xamarin/#android-app-fails-to-build-with-linking-errors", 
            "text": "The Newtonsoft JSON NuGet package is automatically added to a project when the Branch Xamarin SDK NuGet package is added. There is a known issue with this package that results in linking errors when building a project.  error XA0009: Error while loading assembly: /Users/david/Projects/TestXamarinFormsApp/Droid/obj/Debug/android/assets/mscorlib.dll  To resolve this issue with the Newtonsoft JSON NuGet package:   Right-click on the project and select Options    Go to  Android Build  and select the  Linker  tab    Select:  Release     Go to the  Ignore assemblies  box    Add:  System.Core     Rebuild the app", 
            "title": "Android app fails to build with linking errors"
        }, 
        {
            "location": "/pages/apps/xamarin/#deploying-ios-app-to-device-fails-with-provisioning-profile-erros-after-changing-entitlements", 
            "text": "Xamarin automatically populates the  Bundle Identifier  field in the  Info.plist  file with an all-lowercase value derived from the app's name. This value is in fact case sensitive and must match the value in the  Apple Developer Portal  precisely. The default Xamarin configuration may work when there are no entitlements configured and then suddenly begin failing after entitlements have been added.  This issue can be resolved by ensuring that the  Bundle Identifier  in the  Info.plist  matches the  Bundle Identifier  shown on the  Apple Developer Portal .   Open the  Info.plist  file   Enter the app's  Bundle Identifier  from the  Apple Developer Portal  in the  Bundle Identifier  field", 
            "title": "Deploying iOS app to device fails with Provisioning Profile erros after changing entitlements"
        }, 
        {
            "location": "/pages/apps/xamarin/#sample-apps", 
            "text": "There are four fully-functional demo apps included in this repository: a Xamarin Native and Xamarin Forms apps for both iOS and Android platforms. Use these apps as reference models for integrating the Branch SDK.  Testbed-Xamarin (Native apps)   iOS     Android      Testbed-XamarinForms (Forms apps)   iOS     Android      Should you run into issues with the SDK, please check that they are present in the appropriate demo app before submitting any issue as a bug.", 
            "title": "Sample apps"
        }, 
        {
            "location": "/pages/apps/api/", 
            "text": "Postman\n\n\n\n\n\n\nUse \nPostman\n to test Branch API for requests, responses, and code examples\n\n\n\n\n\n\nChange the \nbranch_key\n to match your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nLink\n\n\n\n\n\n\nLink create\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/url \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nchannel\n: \nfacebook\n,\n\n\n  \nfeature\n: \nonboarding\n,\n\n\n  \ncampaign\n: \nnew product\n,\n\n\n  \nstage\n: \nnew user\n,\n\n\n  \ntags\n: [\none\n, \ntwo\n, \nthree\n],\n\n\n  \ndata\n: {\n\n\n    \n$canonical_identifier\n: \ncontent/123\n,\n\n\n    \n$og_title\n: \nTitle from Deep Link\n,    \n\n\n    \n$og_description\n: \nDescription from Deep Link\n,\n\n\n    \n$og_image_url\n: \nhttp://www.lorempixel.com/400/400/\n,\n\n\n    \n$desktop_url\n: \nhttp://www.example.com\n,\n\n\n    \ncustom_boolean\n: true,\n\n\n    \ncustom_integer\n: 1243,\n\n\n    \ncustom_string\n: \neverything\n,\n\n\n    \ncustom_array\n: [1,2,3,4,5,6],\n\n\n    \ncustom_object\n: { \nrandom\n: \ndictionary\n }\n\n\n  }\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nurl\n:\n \nhttps://example.app.link/WgiqvsepqF\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\n...\n\n\n...\n\n\nParameters from \nConfiguring Links\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLink create bulk\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/url/bulk/key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt \n\\\n\n  -d \n[\n\n\n    {\n\n\n      \nchannel\n: \nfacebook\n,\n\n\n      \nfeature\n: \nonboarding\n,\n\n\n      \ncampaign\n: \nnew product\n,\n\n\n      \nstage\n: \nnew user\n,\n\n\n      \ntags\n: [\none\n, \ntwo\n, \nthree\n],\n\n\n      \ndata\n: {\n\n\n        \n$canonical_identifier\n: \ncontent/123\n,\n\n\n        \n$og_title\n: \nTitle from Deep Link\n,    \n\n\n        \n$og_description\n: \nDescription from Deep Link\n,\n\n\n        \n$og_image_url\n: \nhttp://www.lorempixel.com/400/400/\n,\n\n\n        \n$desktop_url\n: \nhttp://www.example.com\n,\n\n\n        \ncustom_boolean\n: true,\n\n\n        \ncustom_integer\n: 1243,\n\n\n        \ncustom_string\n: \neverything\n,\n\n\n        \ncustom_array\n: [1,2,3,4,5,6],\n\n\n        \ncustom_object\n: { \nrandom\n: \ndictionary\n }\n\n\n      }\n\n\n    },\n\n\n    {\n\n\n      \nchannel\n: \nfacebook\n,\n\n\n      \nfeature\n: \nonboarding\n,\n\n\n      \ncampaign\n: \nnew product\n,\n\n\n      \nstage\n: \nnew user\n,\n\n\n      \ntags\n: [\none\n, \ntwo\n, \nthree\n],\n\n\n      \ndata\n: {\n\n\n        \n$canonical_identifier\n: \ncontent/123\n,\n\n\n        \n$og_title\n: \nTitle from Deep Link\n,    \n\n\n        \n$og_description\n: \nDescription from Deep Link\n,\n\n\n        \n$og_image_url\n: \nhttp://www.lorempixel.com/400/400/\n,\n\n\n        \n$desktop_url\n: \nhttp://www.example.com\n\n\n      }\n\n\n    }\n\n\n  ]\n\n\n\n\n\n\n\n\n\nResponse\n\n\n[\n\n  \n{\n\n    \nurl\n:\n \nhttps://example.app.link/0AjuiLcpqF\n\n  \n},\n\n  \n{\n\n    \nurl\n:\n \nhttps://example.app.link/5IULiLcpqF\n\n  \n}\n\n\n]\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\n...\n\n\n...\n\n\nParameters from \nConfiguring Links\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLink read\n\n\n\n\n\n\nRequest\n\n\ncurl -XGET \nhttps://api.branch.io/v1/url?url=https://example.app.link/WgiqvsepqF\nbranch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nalias\n:\n \nnull\n,\n\n  \ncampaign\n:\n \nnew product\n,\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \ndata\n:\n \n{\n\n    \n$canonical_identifier\n:\n \ncontent/123\n,\n\n    \n$desktop_url\n:\n \nhttp://www.example.com\n,\n\n    \n$og_description\n:\n \nDescription from Deep Link\n,\n\n    \n$og_image_url\n:\n \nhttp://www.lorempixel.com/400/400/\n,\n\n    \n$og_title\n:\n \nTitle from Deep Link\n,\n\n    \n$one_time_use\n:\n \nfalse\n,\n\n    \ncustom_array\n:\n \n[\n\n      \n1\n,\n\n      \n2\n,\n\n      \n3\n,\n\n      \n4\n,\n\n      \n5\n,\n\n      \n6\n\n    \n],\n\n    \ncustom_boolean\n:\n \ntrue\n,\n\n    \ncustom_integer\n:\n \n1243\n,\n\n    \ncustom_object\n:\n \n{\n\n      \nrandom\n:\n \ndictionary\n\n    \n},\n\n    \ncustom_string\n:\n \neverything\n,\n\n    \nurl\n:\n \nhttps://eneff.app.link/cCeWJt6mqF\n,\n\n    \n~campaign\n:\n \nnew product\n,\n\n    \n~channel\n:\n \nfacebook\n,\n\n    \n~creation_source\n:\n \n0\n,\n\n    \n~feature\n:\n \nonboarding\n,\n\n    \n~id\n:\n \n423188696347619242\n,\n\n    \n~stage\n:\n \nnew user\n,\n\n    \n~tags\n:\n \n[\n\n      \none\n,\n\n      \ntwo\n,\n\n      \nthree\n\n    \n]\n\n  \n},\n\n  \nfeature\n:\n \nonboarding\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\n\n    \none\n,\n\n    \ntwo\n,\n\n    \nthree\n\n  \n],\n\n  \ntype\n:\n \n0\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nThe deep link url\n\n\n\u221a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLink update\n\n\n\n\n\n\nRequest\n\n\ncurl -XPUT \nhttps://api.branch.io/v1/url?url=https%3A%2F%2Fexample.app.link%2F5IULiLcpqF\n \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nbranch_secret\n: \nsecret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9\n,\n\n\n  \nchannel\n: \ntwitter\n,\n\n\n  \ndata\n:{\n\n\n    \nname\n:\nalex\n,\n\n\n    \nuser_id\n:\n12346\n,\n\n\n    \n$deeplink_path\n:\narticle/jan/123\n\n\n  }\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \ncampaign\n:\n \nnew product\n,\n\n  \nchannel\n:\n \ntwitter\n,\n\n  \nfeature\n:\n \nonboarding\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\n\n    \none\n,\n\n    \ntwo\n,\n\n    \nthree\n\n  \n],\n\n  \ndata\n:\n \n{\n\n    \n$deeplink_path\n:\n \narticle/jan/123\n,\n\n    \n$one_time_use\n:\n \nfalse\n,\n\n    \nname\n:\n \nalex\n,\n\n    \nuser_id\n:\n \n12346\n,\n\n    \n~campaign\n:\n \nnew product\n,\n\n    \n~channel\n:\n \ntwitter\n,\n\n    \n~creation_source\n:\n \n0\n,\n\n    \n~feature\n:\n \nonboarding\n,\n\n    \n~id\n:\n \n423196096467215333\n,\n\n    \n~stage\n:\n \nnew user\n,\n\n    \n~tags\n:\n \n[\n\n      \none\n,\n\n      \ntwo\n,\n\n      \nthree\n\n    \n],\n\n    \nurl\n:\n \nhttps://example.app.link/5IULiLcpqF\n\n  \n},\n\n  \ntype\n:\n \n0\n,\n\n  \nalias\n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nbranch_secret\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nThe deep link url\n\n\n\u221a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLink troubleshooting\n\n\n\n\n\n\ndata\n is overridden on \nLink update\n, not appended\n\n\n\n\n\n\nBulk link creator is limited to \n1000\n links at a time\n\n\n\n\n\n\n\n\n\n\nEvent\n\n\n\n\n\n\nEvent create\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/event \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nidentity\n: \nbob\n,\n\n\n  \nevent\n: \ncustom_event\n,\n\n\n  \nmetadata\n: {\n\n\n    \ncustom_data\n: \nanything\n,\n\n\n    \nhello\n: \nworld\n\n\n  }\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nevent\n\n\nstring\n\n\nName of the custom event\n\n\n\u221a\n\n\n\n\n\n\nidentity\n\n\nstring\n\n\nUnique user id, also known as the \nDeveloper Id\n on your \nBranch Identity Dashboard\n\n\n\n\n\n\n\n\nmetadata\n\n\n{}\n\n\nCustom key-value pairs related to the event\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvent create commerce\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST https://api.branch.io/v1/event \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nidentity\n: \n222\n,\n\n\n  \nevent\n: \npurchase\n,\n\n\n  \nmetadata\n: {\n\n\n    \nhello\n: \nworld\n,\n\n\n    \ncustom_data\n: \nthis\n\n\n  },\n\n\n  \ncommerce_data\n: {\n\n\n    \nrevenue\n: 50.0,\n\n\n    \ncurrency\n: \nUSD\n,\n\n\n    \ntransaction_id\n: \nfoo-transaction-id\n,\n\n\n    \nshipping\n: 0.0,\n\n\n    \ntax\n: 5.0,\n\n\n    \naffiliation\n: \nfoo-affiliation\n,\n\n\n    \nproducts\n: [\n\n\n      { \n\n\n        \nsku\n: \nfoo-sku-1\n,\n\n\n        \nname\n: \nfoo-item-1\n,\n\n\n        \nprice\n: 45.00,\n\n\n        \nquantity\n: 1,\n\n\n        \nbrand\n: \nfoo-brand\n,\n\n\n        \ncategory\n: \nElectronics\n,\n\n\n        \nvariant\n: \nfoo-variant-1\n\n\n      },\n\n\n      { \n\n\n        \nsku\n: \nfoo-sku-2\n,\n\n\n        \nprice\n: 2.50,\n\n\n        \nquantity\n: 2\n\n\n      }\n\n\n    ]\n\n\n  }\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{}\n\n\n\n\n\n\n\n\n\n\n\n\n\nUser\n\n\n\n\n\n\nUser create\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/profile \n\\\n\n  -d \n{\n\n\n    \nbranch_key\n:\nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n    \nidentity\n:\nsteve\n,\n\n\n    \nidentity_id\n:\n444\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nidentity_id\n:\n \n444\n,\n\n  \nlink\n:\n \nhttps://example.app.link/?%24identity_id=444\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nidentity\n\n\nstring\n\n\nUnique user id, also known as the \nDeveloper Id\n on your \nBranch Identity Dashboard\n\n\n\u221a\n\n\n\n\n\n\nidentity_id\n\n\nstring\n\n\nUnique user id for Branch, also known as the \nBranch Identity Id\n on your \nBranch Identity Dashboard\n\n\n\u221a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUser read\n\n\n\n\n\n\nRequest\n\n\n# identity\n\ncurl -XGET \nhttps://api.branch.io/v1/profile?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\nidentity=steve\n \n\n\n# identity id\n\ncurl -XGET \nhttps://api.branch.io/v1/profile?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\nidentity_id=444\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nidentity_id\n:\n \n444\n,\n\n  \nidentity\n:\n \nsteve\n,\n\n  \nlink\n:\n \nhttps://example.app.link/?%24identity_id=444\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nidentity\n\n\nstring\n\n\nUnique user id, also known as the \nDeveloper Id\n on your \nBranch Identity Dashboard\n\n\n\u221a*\n\n\n\n\n\n\nidentity_id\n\n\nstring\n\n\nUnique user id for Branch, also known as the \nBranch Identity Id\n on your \nBranch Identity Dashboard\n\n\n\u221a*\n\n\n\n\n\n\n\n\n\n\n*\n =  \nidentity\n \nOR\n \nidentity_id\n is required\n\n\n\n\n\n\n\n\n\n\n\n\nReferral\n\n\n\n\n\n\nReferral reward\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/credits \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nbranch_secret\n: \nsecret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9\n,\n\n\n  \nidentity\n: \nsteve\n,\n\n\n  \namount\n: \n10\n,\n\n\n  \nbucket\n: \ndefault\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nsuccess\n:\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nbranch_secret\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nidentity\n\n\nstring\n\n\nUnique user id, also known as the \nDeveloper Id\n on your \nBranch Identity Dashboard\n\n\n\u221a\n\n\n\n\n\n\namount\n\n\nstring\n\n\nNumber of credits\n\n\n\u221a\n\n\n\n\n\n\nbucket\n\n\nstring\n\n\nThe category where the credits are save to (defaults to \ndefault\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferral redeem\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/redeem \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nbranch_secret\n: \nsecret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9\n,\n\n\n  \nidentity\n: \nsteve\n,\n\n\n  \namount\n: \n5\n,\n\n\n  \nbucket\n: \ndefault\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n// success\n\n\n{}\n\n\n\n// failure\n\n\n{\n\n  \nerror\n:\n \n{\n\n    \ncode\n:\n \n402\n,\n\n    \nmessage\n:\n \nNot enough credits to redeem.\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferral read\n\n\n\n\n\n\nRequest\n\n\ncurl -XGET \nhttps://api.branch.io/v1/credits?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\nidentity=steve\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \ndefault\n:\n \n40\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferral history\n\n\n\n\n\n\nRequest\n\n\ncurl -XGET \nhttps://api.branch.io/v1/credithistory?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\nidentity=steve\n\n\n\n\n\n\n\n\n\nResponse\n\n\n[\n\n  \n{\n\n    \ntransaction\n:\n \n{\n\n      \ndate\n:\n \n2017-08-07T22:15:10.503Z\n,\n\n      \nid\n:\n \n423229952507361694\n,\n\n      \nbucket\n:\n \ndefault\n,\n\n      \ntype\n:\n \n2\n,\n\n      \namount\n:\n \n-\n5\n\n    \n},\n\n    \nevent\n:\n \n{\n\n      \nname\n:\n \nnull\n,\n\n      \nmetadata\n:\n \nnull\n\n    \n},\n\n    \nreferrer\n:\n \nnull\n,\n\n    \nreferree\n:\n \nnull\n\n  \n},\n\n  \n{\n\n    \ntransaction\n:\n \n{\n\n      \ndate\n:\n \n2017-08-07T22:15:01.818Z\n,\n\n      \nid\n:\n \n423229916080032437\n,\n\n      \nbucket\n:\n \ndefault\n,\n\n      \ntype\n:\n \n2\n,\n\n      \namount\n:\n \n-\n5\n\n    \n},\n\n    \nevent\n:\n \n{\n\n      \nname\n:\n \nnull\n,\n\n      \nmetadata\n:\n \nnull\n\n    \n},\n\n    \nreferrer\n:\n \nnull\n,\n\n    \nreferree\n:\n \nnull\n\n  \n},\n\n  \n{\n\n    \ntransaction\n:\n \n{\n\n      \ndate\n:\n \n2017-08-07T22:10:57.224Z\n,\n\n      \nid\n:\n \n423228890178439487\n,\n\n      \nbucket\n:\n \ndefault\n,\n\n      \ntype\n:\n \n1\n,\n\n      \namount\n:\n \n10\n\n    \n},\n\n    \nevent\n:\n \n{\n\n      \nname\n:\n \nnull\n,\n\n      \nmetadata\n:\n \nnull\n\n    \n},\n\n    \nreferrer\n:\n \nnull\n,\n\n    \nreferree\n:\n \nnull\n\n  \n},\n\n  \n{\n\n    \ntransaction\n:\n \n{\n\n      \ndate\n:\n \n2017-08-07T22:10:56.416Z\n,\n\n      \nid\n:\n \n423228886789240847\n,\n\n      \nbucket\n:\n \ndefault\n,\n\n      \ntype\n:\n \n1\n,\n\n      \namount\n:\n \n10\n\n    \n},\n\n    \nevent\n:\n \n{\n\n      \nname\n:\n \nnull\n,\n\n      \nmetadata\n:\n \nnull\n\n    \n},\n\n    \nreferrer\n:\n \nnull\n,\n\n    \nreferree\n:\n \nnull\n\n  \n}\n\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferral reconcile\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST https://api.branch.io/v1/reconcile \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nbranch_secret\n: \nsecret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9\n,\n\n\n  \nidentity\n: \nsteve\n,\n\n\n  \namount\n: \n20\n,\n\n\n  \nbucket\n: \ndefault\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nid\n:\n \n423232788708309278\n,\n\n  \napp_id\n:\n \n423194549918126821\n,\n\n  \nidentity_id\n:\n \n444\n,\n\n  \ntype\n:\n \n4\n,\n\n  \nbucket\n:\n \ndefault\n,\n\n  \namount\n:\n \n-\n20\n,\n\n  \ndate\n:\n \n2017-08-07T22:26:26.706Z\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferral troubleshooting\n\n\n\n\nReferral \ncredits\n cannot go below zero\n\n\n\n\n\n\n\n\nApp\n\n\n\n\n\n\nApp create\n\n\n\n\n\n\nRequest\n\n\ncurl\n \n-\nXPOST\n \nhttps\n:\n//api.branch.io/v1/app \\\n\n  \n-\nd\n \n{\n\n\n  \nuser_id\n: \nYOUR_USER_ID\n,\n\n\n  \napp_name\n: \neneff_test_3\n,\n\n\n  \ndev_name\n: \nYOUR_NAME\n,\n\n\n  \ndev_email\n: \nYOUR_EMAIL\n,\n\n\n\n  \nalways_open_app\n: \n1\n,\n\n\n\n  \nandroid_app\n: \n2\n, \n\n\n  \nandroid_url\n: \nhttps://www.example.com/ios\n, \n\n\n  \nandroid_uri_scheme\n: \nbranchtest://\n, \n\n\n  \nandroid_package_name\n: \ncom.branch.test\n, \n\n\n  \nandroid_app_links_enabled\n: \n1\n,  \n\n\n\n  \nios_app\n: \n2\n, \n\n\n  \nios_url\n: \nhttps://www.example.com/ios\n, \n\n\n  \nios_uri_scheme\n: \nbranchtest://\n, \n\n\n  \nios_store_country\n: \nUS\n, \n\n\n  \nuniversal_linking_enabled\n: \n1\n,   \n\n\n  \nios_bundle_id\n: \ncom.branch.test\n, \n\n\n  \nios_team_id\n: \nPW4Q8885U8\n, \n\n\n\n  \nfire_url\n: \nhttps://www.example.com/amazon\n, \n\n\n  \nwindows_phone_url\n: \nhttps://www.example.com/windows\n, \n\n\n  \nblackberry_url\n: \nhttps://www.example.com/blackberry\n, \n\n\n  \nweb_url\n: \nhttps://www.example.com/web\n, \n\n\n  \ndefault_desktop_url\n: \nhttps://www.example.com/desktop\n, \n\n\n\n  \ntext_message\n: \nclick here to download {{ link }}\n, \n\n\n\n  \nog_app_id\n: \nbranch 123\n, \n\n\n  \nog_title\n: \nbranch test\n, \n\n\n  \nog_description\n: \nbranch description\n, \n\n\n  \nog_image_url\n: \nhttp://lorempixel.com/400/400/\n, \n\n\n\n  \ndeepview_desktop\n: \nbranch_default\n, \n\n\n  \ndeepview_ios\n: \nbranch_default\n, \n\n\n  \ndeepview_android\n: \nbranch_default\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nalternate_short_url_domain\n:\n \na8p0-alternate.app.link\n,\n\n  \nalways_open_app\n:\n \n1\n,\n\n  \nandroid_app\n:\n \n2\n,\n\n  \nandroid_app_links_enabled\n:\n \n1\n,\n\n  \nandroid_package_name\n:\n \ncom.branch.test\n,\n\n  \nandroid_uri_scheme\n:\n \nbranchtest://\n,\n\n  \nandroid_url\n:\n \nhttps://www.example.com/ios\n,\n\n  \napp_key\n:\n \n423190238827926224\n,\n\n  \napp_name\n:\n \neneff_test_3\n,\n\n  \nblackberry_url\n:\n \nhttps://www.example.com/blackberry\n,\n\n  \nbranch_key\n:\n \nkey_live_hptFZsX5x7Nsvfq4MWdB5ohosCfQ6tjl\n,\n\n  \nbranch_secret\n:\n \nsecret_live_sHyeiy240rxQhDF2H2DJYrypRHoq4z1x\n,\n\n  \ncreation_date\n:\n \n2017-08-07T19:37:22.024Z\n,\n\n  \ndeepview_android\n:\n \nbranch_default\n,\n\n  \ndeepview_desktop\n:\n \nbranch_default\n,\n\n  \ndeepview_ios\n:\n \nbranch_default\n,\n\n  \ndefault_desktop_url\n:\n \nhttps://www.example.com/desktop\n,\n\n  \ndefault_short_url_domain\n:\n \na8p0.app.link\n,\n\n  \ndev_email\n:\n \nYOUR_EMAIL\n,\n\n  \ndev_name\n:\n \nYOUR_NAME\n,\n\n  \nfire_url\n:\n \nhttps://www.example.com/amazon\n,\n\n  \nid\n:\n \n423190238827926224\n,\n\n  \nios_app\n:\n \n2\n,\n\n  \nios_bundle_id\n:\n \ncom.branch.test\n,\n\n  \nios_store_country\n:\n \nUS\n,\n\n  \nios_team_id\n:\n \nPW4Q8885U8\n,\n\n  \nios_uri_scheme\n:\n \nbranchtest://\n,\n\n  \nios_url\n:\n \nhttps://www.example.com/ios\n,\n\n  \nog_app_id\n:\n \nbranch 123\n,\n\n  \nog_description\n:\n \nbranch description\n,\n\n  \nog_image_url\n:\n \nhttp://lorempixel.com/400/400/\n,\n\n  \nog_title\n:\n \nbranch test\n,\n\n  \norigin\n:\n \nAPI: creator id = YOUR_USER_ID, creator email = YOUR_EMAIL\n,\n\n  \nshort_url_domain\n:\n \n,\n\n  \ntext_message\n:\n \nclick here to download {{ link }}\n,\n\n  \nuniversal_linking_enabled\n:\n \n1\n,\n\n  \nweb_url\n:\n \nhttps://www.example.com/web\n,\n\n  \nwindows_phone_url\n:\n \nhttps://www.example.com/windows\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nstring\n\n\nThe Dashboard User Id obtained from \nBranch Account Dashboard\n\n\n\u221a\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\nThe name of the app\n\n\n\u221a\n\n\n\n\n\n\ndev_name\n\n\nstring\n\n\nThe main contact developer name\n\n\n\u221a\n\n\n\n\n\n\ndev_email\n\n\nstring\n\n\nThe main contact developer email. A email is sent on account creation\n\n\n\u221a\n\n\n\n\n\n\nandroid_app\n\n\nstring\n\n\nWhether an Android app is enabled. \n0\n or \n1\n indicating \ntrue\n\n\n\n\n\n\n\n\nandroid_url\n\n\nstring\n\n\nThe url of the Android store, or package name (e.g. \ncom.android.myapp\n). \nandroid_app\n must be set to \n2\n\n\n\n\n\n\n\n\nandroid_uri_scheme\n\n\nstring\n\n\nThe Android URI scheme\n\n\n\n\n\n\n\n\nandroid_package_name\n\n\nstring\n\n\nThe Android package name (e.g. \ncom.android.myapp\n)\n\n\n\n\n\n\n\n\nsha256_cert_fingerprints\n\n\n[string]\n\n\nThe SHA256 fingerprints for App Links\n\n\n\n\n\n\n\n\nandroid_app_links_enabled\n\n\nstring\n\n\nWhether App Links are enabled. \n0\n or \n1\n indicating \ntrue\n\n\n\n\n\n\n\n\nios_app\n\n\nstring\n\n\nWhether an iOS app is enabled, (\n0\n or \n1\n indicating \ntrue\n\n\n\n\n\n\n\n\nios_url\n\n\nstring\n\n\nThe url of iOS store, or app id (e.g. \nid512451233\n), or a fallback URL for iOS if present. \nios_app\n must be set to \n2\n\n\n\n\n\n\n\n\nios_uri_scheme\n\n\nstring\n\n\nThe iOS URI scheme\n\n\n\n\n\n\n\n\nios_store_country\n\n\nstring\n\n\nThe country code of the app, defaults to \nUS\n\n\n\n\n\n\n\n\nios_bundle_id\n\n\nstring\n\n\nThe iOS Bundle Id\n\n\n\n\n\n\n\n\nios_team_id\n\n\nstring\n\n\nThe iOS Team Id\n\n\n\n\n\n\n\n\nuniversal_linking_enabled\n\n\nstring\n\n\nWhether Universal Links should be enabled. \n0\n or \n1\n indicating \ntrue\n\n\n\n\n\n\n\n\nfire_url\n\n\nstring\n\n\nThe redirect on Fire phone\n\n\n\n\n\n\n\n\nwindows_phone_url\n\n\nstring\n\n\nThe redirect on Windows phone\n\n\n\n\n\n\n\n\nblackberry_url\n\n\nstring\n\n\nThe redirect on Blackberry phone\n\n\n\n\n\n\n\n\nweb_url\n\n\nstring\n\n\nBackup website if URLs are \nnull\n\n\n\n\n\n\n\n\ndefault_desktop_url\n\n\nstring\n\n\nThe default desktop redirect, or \nnull\n if set to hosted SMS\n\n\n\n\n\n\n\n\ntext_message\n\n\nstring\n\n\nText message to use for text-me feature, \n{{ link }}\n is required and will be replaced with a deep link\n\n\n\n\n\n\n\n\nog_app_id\n\n\nstring\n\n\nOpen Graph app id\n\n\n\n\n\n\n\n\nog_title\n\n\nstring\n\n\nOpen Graph title to be used with link\n\n\n\n\n\n\n\n\nog_description\n\n\nstring\n\n\nOpen Graph description to be used with link\n\n\n\n\n\n\n\n\nog_image_url\n\n\nstring\n\n\nOpen Graph image URL to be used with link\n\n\n\n\n\n\n\n\ndeepview_desktop\n\n\nstring\n\n\nThe current deepview selected for the desktop platform\n\n\n\n\n\n\n\n\ndeepview_ios\n\n\nstring\n\n\nThe current deepview selected for the iOS platform\n\n\n\n\n\n\n\n\ndeepview_android\n\n\nstring\n\n\nThe current deepview selected for the Android platform\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApp read\n\n\n\n\n\n\nRequest\n\n\ncurl\n \n-\nXGET\n \nhttps://api.branch.io/v1/app/key_live_kkDv1y82q6RdiaazE5wAyipkqCnI9i0a?branch_secret=secret_live_igBCicZbq9H3NvYgBishHWuQu4aMbQ0n\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nalternate_short_url_domain\n:\n \n84jv-alternate.app.link\n,\n\n  \nalways_open_app\n:\n \n1\n,\n\n  \nandroid_app\n:\n \n2\n,\n\n  \nandroid_app_links_enabled\n:\n \ntrue\n,\n\n  \nandroid_cd_enabled\n:\n \nnull\n,\n\n  \nandroid_cd_hashed\n:\n \nnull\n,\n\n  \nandroid_package_name\n:\n \ncom.branch.test\n,\n\n  \nandroid_uri_scheme\n:\n \nbranchtest://\n,\n\n  \nandroid_url\n:\n \nhttps://www.example.com/ios\n,\n\n  \napp_key\n:\n \n423188837653566156\n,\n\n  \napp_name\n:\n \neneff_test_3\n,\n\n  \nauto_fetch\n:\n \nnull\n,\n\n  \nblackberry_url\n:\n \nhttps://www.example.com/blackberry\n,\n\n  \nbranch_key\n:\n \nkey_live_kkDv1y82q6RdiaazE5wAyipkqCnI9i0a\n,\n\n  \nbranch_secret\n:\n \nsecret_live_igBCicZbq9H3NvYgBishHWuQu4aMbQ0n\n,\n\n  \ncreation_date\n:\n \n2017-08-07T19:31:47.958Z\n,\n\n  \ndeepview_android\n:\n \nbranch_default\n,\n\n  \ndeepview_desktop\n:\n \nbranch_default\n,\n\n  \ndeepview_ios\n:\n \nbranch_default\n,\n\n  \ndefault_desktop_url\n:\n \nhttps://www.example.com/desktop\n,\n\n  \ndefault_short_url_domain\n:\n \n84jv.app.link\n,\n\n  \ndesktop_uri_scheme\n:\n \nnull\n,\n\n  \ndev_email\n:\n \nYOUR_EMAIL\n,\n\n  \ndev_name\n:\n \nYOUR_NAME\n,\n\n  \nesp_config\n:\n \nnull\n,\n\n  \nfire_url\n:\n \nhttps://www.example.com/amazon\n,\n\n  \nid\n:\n \n423188837653566156\n,\n\n  \nios_app\n:\n \n2\n,\n\n  \nios_bundle_id\n:\n \ncom.branch.test\n,\n\n  \nios_cd_enabled\n:\n \nnull\n,\n\n  \nios_cd_hashed\n:\n \nnull\n,\n\n  \nios_store_country\n:\n \nUS\n,\n\n  \nios_team_id\n:\n \nPW4Q8885U8\n,\n\n  \nios_uri_scheme\n:\n \nbranchtest://\n,\n\n  \nios_url\n:\n \nhttps://www.example.com/ios\n,\n\n  \nmap_utm_params\n:\n \nnull\n,\n\n  \nog_app_id\n:\n \nbranch 123\n,\n\n  \nog_description\n:\n \nbranch description\n,\n\n  \nog_image_url\n:\n \nhttp://lorempixel.com/400/400/\n,\n\n  \nog_title\n:\n \nbranch test\n,\n\n  \norigin\n:\n \nAPI: creator id = YOUR_USER_ID, creator email = YOUR_EMAIL\n,\n\n  \nredirect_domains_whitelist\n:\n \nnull\n,\n\n  \nsha256_cert_fingerprints\n:\n \nnull\n,\n\n  \nshort_url_domain\n:\n \n,\n\n  \nsitemap_enabled\n:\n \nnull\n,\n\n  \ntext_message\n:\n \nclick here to download {{ link }}\n,\n\n  \nuniversal_linking_enabled\n:\n \ntrue\n,\n\n  \nweb_url\n:\n \nhttps://www.example.com/web\n,\n\n  \nwindows_phone_url\n:\n \nhttps://www.example.com/windows\n,\n\n  \nzuora_account_id\n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nbranch_secret\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApp update\n\n\n\n\n\n\nRequest\n\n\ncurl\n \n-\nXPUT\n \nhttps\n:\n//api.branch.io/v1/app/key_live_icCccJIpd7GlYY5oOmoEtpafuDiuyXhT \\\n\n  \n-\nd\n \n{\n\n\n  \nbranch_secret\n: \nsecret_live_D3sN7UDL27glpNKZfGPt6BlmKD9txUBp\n,  \n\n\n  \ndev_email\n: \nYOUR_EMAIL\n,\n\n\n  \napp_name\n: \neneff_test_3_updated\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nalternate_short_url_domain\n:\n \neneff-alternate.app.link\n,\n\n  \nalways_open_app\n:\n \nnull\n,\n\n  \nandroid_app\n:\n \n2\n,\n\n  \nandroid_app_links_enabled\n:\n \nfalse\n,\n\n  \nandroid_cd_enabled\n:\n \nnull\n,\n\n  \nandroid_cd_hashed\n:\n \nnull\n,\n\n  \nandroid_package_name\n:\n \ncom.eneff.branch.example\n,\n\n  \nandroid_uri_scheme\n:\n \nenefftest://\n,\n\n  \nandroid_url\n:\n \nhttps://www.example.com\n,\n\n  \napp_key\n:\n \n299552032371528050\n,\n\n  \napp_name\n:\n \neneff_test_3_updated\n,\n\n  \nauto_fetch\n:\n \nnull\n,\n\n  \nblackberry_url\n:\n \nnull\n,\n\n  \nbranch_key\n:\n \nkey_live_icCccJIpd7GlYY5oOmoEtpafuDiuyXhT\n,\n\n  \nbranch_secret\n:\n \nsecret_live_D3sN7UDL27glpNKZfGPt6BlmKD9txUBp\n,\n\n  \ncreation_date\n:\n \n2016-08-31T15:23:16.518Z\n,\n\n  \ndeepview_android\n:\n \nnull\n,\n\n  \ndeepview_desktop\n:\n \nnull\n,\n\n  \ndeepview_ios\n:\n \neneff_test_deepview_5blb\n,\n\n  \ndefault_desktop_url\n:\n \nhttps://www.example.com\n,\n\n  \ndefault_short_url_domain\n:\n \neneff.app.link\n,\n\n  \ndesktop_uri_scheme\n:\n \nnull\n,\n\n  \ndev_email\n:\n \nYOUR_EMAIL\n,\n\n  \ndev_name\n:\n \nYOUR_NAME\n,\n\n  \nesp_config\n:\n \nnull\n,\n\n  \nfire_url\n:\n \nnull\n,\n\n  \nid\n:\n \n299552032371528050\n,\n\n  \nios_app\n:\n \n2\n,\n\n  \nios_bundle_id\n:\n \ncom.eneff.branch.example\n,\n\n  \nios_cd_enabled\n:\n \nnull\n,\n\n  \nios_cd_hashed\n:\n \nnull\n,\n\n  \nios_store_country\n:\n \nUS\n,\n\n  \nios_team_id\n:\n \nPW4Q8885U8\n,\n\n  \nios_uri_scheme\n:\n \nenefftest://\n,\n\n  \nios_url\n:\n \n,\n\n  \nmap_utm_params\n:\n \nnull\n,\n\n  \nog_app_id\n:\n \nnull\n,\n\n  \nog_description\n:\n \nbranch description updated\n,\n\n  \nog_image_url\n:\n \nhttp://lorempixel.com/400/400/\n,\n\n  \nog_title\n:\n \nhello\n,\n\n  \norigin\n:\n \nnull\n,\n\n  \nredirect_domains_whitelist\n:\n \nnull\n,\n\n  \nsha256_cert_fingerprints\n:\n \nnull\n,\n\n  \nshort_url_domain\n:\n \n,\n\n  \nsitemap_enabled\n:\n \nnull\n,\n\n  \ntext_message\n:\n \nnull\n,\n\n  \nuniversal_linking_enabled\n:\n \ntrue\n,\n\n  \nweb_url\n:\n \nhttps://www.cookies.com\n,\n\n  \nwindows_phone_url\n:\n \nnull\n,\n\n  \nzuora_account_id\n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nbranch_secret\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\ndev_email\n\n\nstring\n\n\nThe main contact developer email\n\n\n\u221a\n\n\n\n\n\n\n...\n\n\n...\n\n\nParameters from \nApp Create\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAPI troubleshooting\n\n\n\n\n\n\nUse your \nbranch_key\n and \nbranch_secret\n from your \nBranch Settings Dashboard\n\n\n\n\n\n\nUse your \nuser_id\n from your \nBranch Account Dashboard\n\n\n\n\n\n\nValues have a \n255\n character max", 
            "title": "API"
        }, 
        {
            "location": "/pages/apps/api/#postman", 
            "text": "Use  Postman  to test Branch API for requests, responses, and code examples    Change the  branch_key  to match your  Branch Dashboard", 
            "title": "Postman"
        }, 
        {
            "location": "/pages/apps/api/#link", 
            "text": "", 
            "title": "Link"
        }, 
        {
            "location": "/pages/apps/api/#link-create", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/url  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     channel :  facebook ,     feature :  onboarding ,     campaign :  new product ,     stage :  new user ,     tags : [ one ,  two ,  three ],     data : {       $canonical_identifier :  content/123 ,       $og_title :  Title from Deep Link ,           $og_description :  Description from Deep Link ,       $og_image_url :  http://www.lorempixel.com/400/400/ ,       $desktop_url :  http://www.example.com ,       custom_boolean : true,       custom_integer : 1243,       custom_string :  everything ,       custom_array : [1,2,3,4,5,6],       custom_object : {  random :  dictionary  }    }  }     Response  { \n   url :   https://example.app.link/WgiqvsepqF  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    ...  ...  Parameters from  Configuring Links", 
            "title": "Link create"
        }, 
        {
            "location": "/pages/apps/api/#link-create-bulk", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/url/bulk/key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt  \\ \n  -d  [      {         channel :  facebook ,         feature :  onboarding ,         campaign :  new product ,         stage :  new user ,         tags : [ one ,  two ,  three ],         data : {           $canonical_identifier :  content/123 ,           $og_title :  Title from Deep Link ,               $og_description :  Description from Deep Link ,           $og_image_url :  http://www.lorempixel.com/400/400/ ,           $desktop_url :  http://www.example.com ,           custom_boolean : true,           custom_integer : 1243,           custom_string :  everything ,           custom_array : [1,2,3,4,5,6],           custom_object : {  random :  dictionary  }        }      },      {         channel :  facebook ,         feature :  onboarding ,         campaign :  new product ,         stage :  new user ,         tags : [ one ,  two ,  three ],         data : {           $canonical_identifier :  content/123 ,           $og_title :  Title from Deep Link ,               $og_description :  Description from Deep Link ,           $og_image_url :  http://www.lorempixel.com/400/400/ ,           $desktop_url :  http://www.example.com        }      }    ]     Response  [ \n   { \n     url :   https://example.app.link/0AjuiLcpqF \n   }, \n   { \n     url :   https://example.app.link/5IULiLcpqF \n   }  ]     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    ...  ...  Parameters from  Configuring Links", 
            "title": "Link create bulk"
        }, 
        {
            "location": "/pages/apps/api/#link-read", 
            "text": "Request  curl -XGET  https://api.branch.io/v1/url?url=https://example.app.link/WgiqvsepqF branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt     Response  { \n   alias :   null , \n   campaign :   new product , \n   channel :   facebook , \n   data :   { \n     $canonical_identifier :   content/123 , \n     $desktop_url :   http://www.example.com , \n     $og_description :   Description from Deep Link , \n     $og_image_url :   http://www.lorempixel.com/400/400/ , \n     $og_title :   Title from Deep Link , \n     $one_time_use :   false , \n     custom_array :   [ \n       1 , \n       2 , \n       3 , \n       4 , \n       5 , \n       6 \n     ], \n     custom_boolean :   true , \n     custom_integer :   1243 , \n     custom_object :   { \n       random :   dictionary \n     }, \n     custom_string :   everything , \n     url :   https://eneff.app.link/cCeWJt6mqF , \n     ~campaign :   new product , \n     ~channel :   facebook , \n     ~creation_source :   0 , \n     ~feature :   onboarding , \n     ~id :   423188696347619242 , \n     ~stage :   new user , \n     ~tags :   [ \n       one , \n       two , \n       three \n     ] \n   }, \n   feature :   onboarding , \n   stage :   new user , \n   tags :   [ \n     one , \n     two , \n     three \n   ], \n   type :   0  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    url  string  The deep link url  \u221a", 
            "title": "Link read"
        }, 
        {
            "location": "/pages/apps/api/#link-update", 
            "text": "Request  curl -XPUT  https://api.branch.io/v1/url?url=https%3A%2F%2Fexample.app.link%2F5IULiLcpqF   \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     branch_secret :  secret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9 ,     channel :  twitter ,     data :{       name : alex ,       user_id : 12346 ,       $deeplink_path : article/jan/123    }  }     Response  { \n   campaign :   new product , \n   channel :   twitter , \n   feature :   onboarding , \n   stage :   new user , \n   tags :   [ \n     one , \n     two , \n     three \n   ], \n   data :   { \n     $deeplink_path :   article/jan/123 , \n     $one_time_use :   false , \n     name :   alex , \n     user_id :   12346 , \n     ~campaign :   new product , \n     ~channel :   twitter , \n     ~creation_source :   0 , \n     ~feature :   onboarding , \n     ~id :   423196096467215333 , \n     ~stage :   new user , \n     ~tags :   [ \n       one , \n       two , \n       three \n     ], \n     url :   https://example.app.link/5IULiLcpqF \n   }, \n   type :   0 , \n   alias :   null  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    branch_secret  string  From your  Branch Settings Dashboard  \u221a    url  string  The deep link url  \u221a", 
            "title": "Link update"
        }, 
        {
            "location": "/pages/apps/api/#link-troubleshooting", 
            "text": "data  is overridden on  Link update , not appended    Bulk link creator is limited to  1000  links at a time", 
            "title": "Link troubleshooting"
        }, 
        {
            "location": "/pages/apps/api/#event", 
            "text": "", 
            "title": "Event"
        }, 
        {
            "location": "/pages/apps/api/#event-create", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/event  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     identity :  bob ,     event :  custom_event ,     metadata : {       custom_data :  anything ,       hello :  world    }  }     Response  {}     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    event  string  Name of the custom event  \u221a    identity  string  Unique user id, also known as the  Developer Id  on your  Branch Identity Dashboard     metadata  {}  Custom key-value pairs related to the event", 
            "title": "Event create"
        }, 
        {
            "location": "/pages/apps/api/#event-create-commerce", 
            "text": "Request  curl -X POST https://api.branch.io/v1/event  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     identity :  222 ,     event :  purchase ,     metadata : {       hello :  world ,       custom_data :  this    },     commerce_data : {       revenue : 50.0,       currency :  USD ,       transaction_id :  foo-transaction-id ,       shipping : 0.0,       tax : 5.0,       affiliation :  foo-affiliation ,       products : [        {            sku :  foo-sku-1 ,           name :  foo-item-1 ,           price : 45.00,           quantity : 1,           brand :  foo-brand ,           category :  Electronics ,           variant :  foo-variant-1        },        {            sku :  foo-sku-2 ,           price : 2.50,           quantity : 2        }      ]    }  }     Response  {}", 
            "title": "Event create commerce"
        }, 
        {
            "location": "/pages/apps/api/#user", 
            "text": "", 
            "title": "User"
        }, 
        {
            "location": "/pages/apps/api/#user-create", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/profile  \\ \n  -d  {       branch_key : key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,       identity : steve ,       identity_id : 444  }     Response  { \n   identity_id :   444 , \n   link :   https://example.app.link/?%24identity_id=444  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    identity  string  Unique user id, also known as the  Developer Id  on your  Branch Identity Dashboard  \u221a    identity_id  string  Unique user id for Branch, also known as the  Branch Identity Id  on your  Branch Identity Dashboard  \u221a", 
            "title": "User create"
        }, 
        {
            "location": "/pages/apps/api/#user-read", 
            "text": "Request  # identity \ncurl -XGET  https://api.branch.io/v1/profile?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt identity=steve   # identity id \ncurl -XGET  https://api.branch.io/v1/profile?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt identity_id=444     Response  { \n   identity_id :   444 , \n   identity :   steve , \n   link :   https://example.app.link/?%24identity_id=444  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    identity  string  Unique user id, also known as the  Developer Id  on your  Branch Identity Dashboard  \u221a*    identity_id  string  Unique user id for Branch, also known as the  Branch Identity Id  on your  Branch Identity Dashboard  \u221a*      *  =   identity   OR   identity_id  is required", 
            "title": "User read"
        }, 
        {
            "location": "/pages/apps/api/#referral", 
            "text": "", 
            "title": "Referral"
        }, 
        {
            "location": "/pages/apps/api/#referral-reward", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/credits  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     branch_secret :  secret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9 ,     identity :  steve ,     amount :  10 ,     bucket :  default  }     Response  { \n   success :   true  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    branch_secret  string  From your  Branch Settings Dashboard  \u221a    identity  string  Unique user id, also known as the  Developer Id  on your  Branch Identity Dashboard  \u221a    amount  string  Number of credits  \u221a    bucket  string  The category where the credits are save to (defaults to  default )", 
            "title": "Referral reward"
        }, 
        {
            "location": "/pages/apps/api/#referral-redeem", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/redeem  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     branch_secret :  secret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9 ,     identity :  steve ,     amount :  5 ,     bucket :  default  }     Response  // success  {}  // failure  { \n   error :   { \n     code :   402 , \n     message :   Not enough credits to redeem. \n   }  }", 
            "title": "Referral redeem"
        }, 
        {
            "location": "/pages/apps/api/#referral-read", 
            "text": "Request  curl -XGET  https://api.branch.io/v1/credits?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt identity=steve     Response  { \n   default :   40  }", 
            "title": "Referral read"
        }, 
        {
            "location": "/pages/apps/api/#referral-history", 
            "text": "Request  curl -XGET  https://api.branch.io/v1/credithistory?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt identity=steve     Response  [ \n   { \n     transaction :   { \n       date :   2017-08-07T22:15:10.503Z , \n       id :   423229952507361694 , \n       bucket :   default , \n       type :   2 , \n       amount :   - 5 \n     }, \n     event :   { \n       name :   null , \n       metadata :   null \n     }, \n     referrer :   null , \n     referree :   null \n   }, \n   { \n     transaction :   { \n       date :   2017-08-07T22:15:01.818Z , \n       id :   423229916080032437 , \n       bucket :   default , \n       type :   2 , \n       amount :   - 5 \n     }, \n     event :   { \n       name :   null , \n       metadata :   null \n     }, \n     referrer :   null , \n     referree :   null \n   }, \n   { \n     transaction :   { \n       date :   2017-08-07T22:10:57.224Z , \n       id :   423228890178439487 , \n       bucket :   default , \n       type :   1 , \n       amount :   10 \n     }, \n     event :   { \n       name :   null , \n       metadata :   null \n     }, \n     referrer :   null , \n     referree :   null \n   }, \n   { \n     transaction :   { \n       date :   2017-08-07T22:10:56.416Z , \n       id :   423228886789240847 , \n       bucket :   default , \n       type :   1 , \n       amount :   10 \n     }, \n     event :   { \n       name :   null , \n       metadata :   null \n     }, \n     referrer :   null , \n     referree :   null \n   }  ]", 
            "title": "Referral history"
        }, 
        {
            "location": "/pages/apps/api/#referral-reconcile", 
            "text": "Request  curl -X POST https://api.branch.io/v1/reconcile  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     branch_secret :  secret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9 ,     identity :  steve ,     amount :  20 ,     bucket :  default  }     Response  { \n   id :   423232788708309278 , \n   app_id :   423194549918126821 , \n   identity_id :   444 , \n   type :   4 , \n   bucket :   default , \n   amount :   - 20 , \n   date :   2017-08-07T22:26:26.706Z  }", 
            "title": "Referral reconcile"
        }, 
        {
            "location": "/pages/apps/api/#referral-troubleshooting", 
            "text": "Referral  credits  cannot go below zero", 
            "title": "Referral troubleshooting"
        }, 
        {
            "location": "/pages/apps/api/#app", 
            "text": "", 
            "title": "App"
        }, 
        {
            "location": "/pages/apps/api/#app-create", 
            "text": "Request  curl   - XPOST   https : //api.branch.io/v1/app \\ \n   - d   {     user_id :  YOUR_USER_ID ,     app_name :  eneff_test_3 ,     dev_name :  YOUR_NAME ,     dev_email :  YOUR_EMAIL ,     always_open_app :  1 ,     android_app :  2 ,      android_url :  https://www.example.com/ios ,      android_uri_scheme :  branchtest:// ,      android_package_name :  com.branch.test ,      android_app_links_enabled :  1 ,       ios_app :  2 ,      ios_url :  https://www.example.com/ios ,      ios_uri_scheme :  branchtest:// ,      ios_store_country :  US ,      universal_linking_enabled :  1 ,        ios_bundle_id :  com.branch.test ,      ios_team_id :  PW4Q8885U8 ,      fire_url :  https://www.example.com/amazon ,      windows_phone_url :  https://www.example.com/windows ,      blackberry_url :  https://www.example.com/blackberry ,      web_url :  https://www.example.com/web ,      default_desktop_url :  https://www.example.com/desktop ,      text_message :  click here to download {{ link }} ,      og_app_id :  branch 123 ,      og_title :  branch test ,      og_description :  branch description ,      og_image_url :  http://lorempixel.com/400/400/ ,      deepview_desktop :  branch_default ,      deepview_ios :  branch_default ,      deepview_android :  branch_default  }     Response  { \n   alternate_short_url_domain :   a8p0-alternate.app.link , \n   always_open_app :   1 , \n   android_app :   2 , \n   android_app_links_enabled :   1 , \n   android_package_name :   com.branch.test , \n   android_uri_scheme :   branchtest:// , \n   android_url :   https://www.example.com/ios , \n   app_key :   423190238827926224 , \n   app_name :   eneff_test_3 , \n   blackberry_url :   https://www.example.com/blackberry , \n   branch_key :   key_live_hptFZsX5x7Nsvfq4MWdB5ohosCfQ6tjl , \n   branch_secret :   secret_live_sHyeiy240rxQhDF2H2DJYrypRHoq4z1x , \n   creation_date :   2017-08-07T19:37:22.024Z , \n   deepview_android :   branch_default , \n   deepview_desktop :   branch_default , \n   deepview_ios :   branch_default , \n   default_desktop_url :   https://www.example.com/desktop , \n   default_short_url_domain :   a8p0.app.link , \n   dev_email :   YOUR_EMAIL , \n   dev_name :   YOUR_NAME , \n   fire_url :   https://www.example.com/amazon , \n   id :   423190238827926224 , \n   ios_app :   2 , \n   ios_bundle_id :   com.branch.test , \n   ios_store_country :   US , \n   ios_team_id :   PW4Q8885U8 , \n   ios_uri_scheme :   branchtest:// , \n   ios_url :   https://www.example.com/ios , \n   og_app_id :   branch 123 , \n   og_description :   branch description , \n   og_image_url :   http://lorempixel.com/400/400/ , \n   og_title :   branch test , \n   origin :   API: creator id = YOUR_USER_ID, creator email = YOUR_EMAIL , \n   short_url_domain :   , \n   text_message :   click here to download {{ link }} , \n   universal_linking_enabled :   1 , \n   web_url :   https://www.example.com/web , \n   windows_phone_url :   https://www.example.com/windows  }     Parameters     Key  Value  Usage  Required      user_id  string  The Dashboard User Id obtained from  Branch Account Dashboard  \u221a    app_name  string  The name of the app  \u221a    dev_name  string  The main contact developer name  \u221a    dev_email  string  The main contact developer email. A email is sent on account creation  \u221a    android_app  string  Whether an Android app is enabled.  0  or  1  indicating  true     android_url  string  The url of the Android store, or package name (e.g.  com.android.myapp ).  android_app  must be set to  2     android_uri_scheme  string  The Android URI scheme     android_package_name  string  The Android package name (e.g.  com.android.myapp )     sha256_cert_fingerprints  [string]  The SHA256 fingerprints for App Links     android_app_links_enabled  string  Whether App Links are enabled.  0  or  1  indicating  true     ios_app  string  Whether an iOS app is enabled, ( 0  or  1  indicating  true     ios_url  string  The url of iOS store, or app id (e.g.  id512451233 ), or a fallback URL for iOS if present.  ios_app  must be set to  2     ios_uri_scheme  string  The iOS URI scheme     ios_store_country  string  The country code of the app, defaults to  US     ios_bundle_id  string  The iOS Bundle Id     ios_team_id  string  The iOS Team Id     universal_linking_enabled  string  Whether Universal Links should be enabled.  0  or  1  indicating  true     fire_url  string  The redirect on Fire phone     windows_phone_url  string  The redirect on Windows phone     blackberry_url  string  The redirect on Blackberry phone     web_url  string  Backup website if URLs are  null     default_desktop_url  string  The default desktop redirect, or  null  if set to hosted SMS     text_message  string  Text message to use for text-me feature,  {{ link }}  is required and will be replaced with a deep link     og_app_id  string  Open Graph app id     og_title  string  Open Graph title to be used with link     og_description  string  Open Graph description to be used with link     og_image_url  string  Open Graph image URL to be used with link     deepview_desktop  string  The current deepview selected for the desktop platform     deepview_ios  string  The current deepview selected for the iOS platform     deepview_android  string  The current deepview selected for the Android platform", 
            "title": "App create"
        }, 
        {
            "location": "/pages/apps/api/#app-read", 
            "text": "Request  curl   - XGET   https://api.branch.io/v1/app/key_live_kkDv1y82q6RdiaazE5wAyipkqCnI9i0a?branch_secret=secret_live_igBCicZbq9H3NvYgBishHWuQu4aMbQ0n     Response  { \n   alternate_short_url_domain :   84jv-alternate.app.link , \n   always_open_app :   1 , \n   android_app :   2 , \n   android_app_links_enabled :   true , \n   android_cd_enabled :   null , \n   android_cd_hashed :   null , \n   android_package_name :   com.branch.test , \n   android_uri_scheme :   branchtest:// , \n   android_url :   https://www.example.com/ios , \n   app_key :   423188837653566156 , \n   app_name :   eneff_test_3 , \n   auto_fetch :   null , \n   blackberry_url :   https://www.example.com/blackberry , \n   branch_key :   key_live_kkDv1y82q6RdiaazE5wAyipkqCnI9i0a , \n   branch_secret :   secret_live_igBCicZbq9H3NvYgBishHWuQu4aMbQ0n , \n   creation_date :   2017-08-07T19:31:47.958Z , \n   deepview_android :   branch_default , \n   deepview_desktop :   branch_default , \n   deepview_ios :   branch_default , \n   default_desktop_url :   https://www.example.com/desktop , \n   default_short_url_domain :   84jv.app.link , \n   desktop_uri_scheme :   null , \n   dev_email :   YOUR_EMAIL , \n   dev_name :   YOUR_NAME , \n   esp_config :   null , \n   fire_url :   https://www.example.com/amazon , \n   id :   423188837653566156 , \n   ios_app :   2 , \n   ios_bundle_id :   com.branch.test , \n   ios_cd_enabled :   null , \n   ios_cd_hashed :   null , \n   ios_store_country :   US , \n   ios_team_id :   PW4Q8885U8 , \n   ios_uri_scheme :   branchtest:// , \n   ios_url :   https://www.example.com/ios , \n   map_utm_params :   null , \n   og_app_id :   branch 123 , \n   og_description :   branch description , \n   og_image_url :   http://lorempixel.com/400/400/ , \n   og_title :   branch test , \n   origin :   API: creator id = YOUR_USER_ID, creator email = YOUR_EMAIL , \n   redirect_domains_whitelist :   null , \n   sha256_cert_fingerprints :   null , \n   short_url_domain :   , \n   sitemap_enabled :   null , \n   text_message :   click here to download {{ link }} , \n   universal_linking_enabled :   true , \n   web_url :   https://www.example.com/web , \n   windows_phone_url :   https://www.example.com/windows , \n   zuora_account_id :   null  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    branch_secret  string  From your  Branch Settings Dashboard  \u221a", 
            "title": "App read"
        }, 
        {
            "location": "/pages/apps/api/#app-update", 
            "text": "Request  curl   - XPUT   https : //api.branch.io/v1/app/key_live_icCccJIpd7GlYY5oOmoEtpafuDiuyXhT \\ \n   - d   {     branch_secret :  secret_live_D3sN7UDL27glpNKZfGPt6BlmKD9txUBp ,       dev_email :  YOUR_EMAIL ,     app_name :  eneff_test_3_updated  }     Response  { \n   alternate_short_url_domain :   eneff-alternate.app.link , \n   always_open_app :   null , \n   android_app :   2 , \n   android_app_links_enabled :   false , \n   android_cd_enabled :   null , \n   android_cd_hashed :   null , \n   android_package_name :   com.eneff.branch.example , \n   android_uri_scheme :   enefftest:// , \n   android_url :   https://www.example.com , \n   app_key :   299552032371528050 , \n   app_name :   eneff_test_3_updated , \n   auto_fetch :   null , \n   blackberry_url :   null , \n   branch_key :   key_live_icCccJIpd7GlYY5oOmoEtpafuDiuyXhT , \n   branch_secret :   secret_live_D3sN7UDL27glpNKZfGPt6BlmKD9txUBp , \n   creation_date :   2016-08-31T15:23:16.518Z , \n   deepview_android :   null , \n   deepview_desktop :   null , \n   deepview_ios :   eneff_test_deepview_5blb , \n   default_desktop_url :   https://www.example.com , \n   default_short_url_domain :   eneff.app.link , \n   desktop_uri_scheme :   null , \n   dev_email :   YOUR_EMAIL , \n   dev_name :   YOUR_NAME , \n   esp_config :   null , \n   fire_url :   null , \n   id :   299552032371528050 , \n   ios_app :   2 , \n   ios_bundle_id :   com.eneff.branch.example , \n   ios_cd_enabled :   null , \n   ios_cd_hashed :   null , \n   ios_store_country :   US , \n   ios_team_id :   PW4Q8885U8 , \n   ios_uri_scheme :   enefftest:// , \n   ios_url :   , \n   map_utm_params :   null , \n   og_app_id :   null , \n   og_description :   branch description updated , \n   og_image_url :   http://lorempixel.com/400/400/ , \n   og_title :   hello , \n   origin :   null , \n   redirect_domains_whitelist :   null , \n   sha256_cert_fingerprints :   null , \n   short_url_domain :   , \n   sitemap_enabled :   null , \n   text_message :   null , \n   universal_linking_enabled :   true , \n   web_url :   https://www.cookies.com , \n   windows_phone_url :   null , \n   zuora_account_id :   null  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    branch_secret  string  From your  Branch Settings Dashboard  \u221a    dev_email  string  The main contact developer email  \u221a    ...  ...  Parameters from  App Create", 
            "title": "App update"
        }, 
        {
            "location": "/pages/apps/api/#api-troubleshooting", 
            "text": "Use your  branch_key  and  branch_secret  from your  Branch Settings Dashboard    Use your  user_id  from your  Branch Account Dashboard    Values have a  255  character max", 
            "title": "API troubleshooting"
        }, 
        {
            "location": "/pages/web/setup/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nIntegrate App\n\n\n\n\nTODO\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n\n  \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1.0\n\n\n  \ntitle\n/\ntitle\n\n\n/\nhead\n\n\nbody\n\n\n  \nscript\n\n\n    \n// load Branch\n\n\n    \n(\nfunction\n(\nb\n,\nr\n,\na\n,\nn\n,\nc\n,\nh\n,\n_\n,\ns\n,\nd\n,\nk\n){\nif\n(\n!\nb\n[\nn\n]\n||!\nb\n[\nn\n].\n_q\n){\nfor\n(;\ns\n_\n.\nlength\n;)\nc\n(\nh\n,\n_\n[\ns\n++\n]);\nd\n=\nr\n.\ncreateElement\n(\na\n);\nd\n.\nasync\n=\n1\n;\nd\n.\nsrc\n=\nhttps://cdn.branch.io/branch-latest.min.js\n;\nk\n=\nr\n.\ngetElementsByTagName\n(\na\n)[\n0\n];\nk\n.\nparentNode\n.\ninsertBefore\n(\nd\n,\nk\n);\nb\n[\nn\n]\n=\nh\n}})(\nwindow\n,\ndocument\n,\nscript\n,\nbranch\n,\nfunction\n(\nb\n,\nr\n){\nb\n[\nr\n]\n=\nfunction\n(){\nb\n.\n_q\n.\npush\n([\nr\n,\narguments\n])}},{\n_q\n:\n[],\n_v\n:\n1\n},\naddListener applyCode autoAppIndex banner closeBanner closeJourney creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode trackCommerceEvent\n.\nsplit\n(\n \n),\n \n0\n);\n\n\n    \n// init Branch\n\n\n    \nbranch\n.\ninit\n(\nkey_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3\n);\n\n\n  \n/\nscript\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\nChange \nkey_live_nmEmfIlcPqjEsuDHIQZ8GdcpsFbXW3gG\n to match your \nBranch Dashboard\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nInitialize Branch features\n\n\n\n\n\n\nLoads Branch into your app\n\n\n\n\n\n\nbranch.init()\n is queued so all other Branch functions will always happen afterwards\n\n\nbranch\n.\ninit\n(\nkey_live_nmEmfIlcPqjEsuDHIQZ8GdcpsFbXW3gG\n,\n \nfunction\n(\nerr\n,\ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\ndata\n);\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nCreates a deep link URL with encapsulated data\n\n\n\n\n\n\nNeeds \nInitialize Branch\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\nvar\n \nlinkData\n \n=\n \n{\n\n  \ncampaign\n:\n \ncontent 123\n,\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \nfeature\n:\n \ndashboard\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\n \ntag1\n,\n \ntag2\n,\n \ntag3\n \n],\n\n  \nalias\n:\n \n,\n\n  \ndata\n:\n \n{\n\n    \ncustom_bool\n:\n \ntrue\n,\n\n    \ncustom_int\n:\n \nDate\n.\nnow\n(),\n\n    \ncustom_string\n:\n \nhello\n,\n\n    \n$og_title\n:\n \nTitle\n,\n\n    \n$og_description\n:\n \nDescription\n,\n\n    \n$og_image_url\n:\nhttp://lorempixel.com/400/400\n\n  \n}\n\n\n};\n\n\n\nbranch\n.\nlink\n(\nlinkData\n,\n \nfunction\n(\nerr\n,\n \nlink\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nlink\n);\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n!-- shareable elements --\n\n\nbutton\n \nid\n=\nbutton\ndeep link\n/\nbutton\n\n\na\n \nid\n=\nanchor\ndeep link\n/\na\n\n\n\n\n\n// create link\n\n\nvar\n \nlinkData\n \n=\n \n{\n\n  \ncampaign\n:\n \nString\n(\nDate\n.\nnow\n())\n\n\n};\n\n\nbranch\n.\nlink\n(\nlinkData\n,\n \nfunction\n(\nerr\n,\n \nlink\n)\n \n{\n\n  \n// share link\n\n  \ndocument\n.\ngetElementById\n(\nbutton\n).\nonclick\n \n=\n \nfunction\n()\n \n{\n\n    \nwindow\n.\nopen\n(\nlink\n \n||\n \nerr\n);\n\n  \n};\n\n  \ndocument\n.\ngetElementById\n(\nanchor\n).\nhref\n \n=\n \nlink\n \n||\n \nerr\n;\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nMake a deep link redirect to your website \n\n\nhttps://a60f.app.link/mwSWBbPRjF?$fallback_url=https://example.com\n\n\n\n\n\n\n\n\nWebsite will open with \n_branch_match_id\n\n\nhttps://example.com/?$fallback_url=https://example.com\n_branch_match_id=418480444086051524\n\n\n\n\n\n\n\n\nRead \n_branch_match_id\n\n\nbranch\n.\ninit\n(\nkey_live_nmEmfIlcPqjEsuDHIQZ8GdcpsFbXW3gG\n,\n \nfunction\n(\nerr\n,\ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\ndata\n);\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n  \n\n\nbranch\n.\nsetIdentity\n(\n123456\n);\n\n\n\n\n\nbranch\n.\nsetIdentity\n(\n123456\n,\n \nfunction\n \n(\nerr\n,\ndata\n)\n \n{\n\n\n\n});\n\n\n\n\n\n\n\n\n\nRemoves the identity of a user\n\n\nbranch\n.\nlogout\n();\n\n\n\n\n\nbranch\n.\nlogout\n(\nfunction\n(\nerr\n){\n\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\nbranch\n.\ntrack\n(\nsignup\n);\n\n\n\n\n\nbranch\n.\ntrack\n(\nsignup\n,\n \n{\n \nmetadata\n:\n \n123\n \n});\n\n\n\n\n\nbranch\n.\ntrack\n(\nsignup\n,\n \n{\n \ncustom\n:\n \n123\n \n},\n \nfunction\n \n(\nerr\n){\n\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nSample testing apps\n\n\n\n\nhttps://cdn.branch.io/example.html\n\n\nhttp://cdn.branch.io/branchster-angular\n\n\n\n\n\n\n\n\nBower or Npm compatibility\n\n\n\n\nUse \nbower install branch-sdk\n or \nnpm install branch-sdk\n\n\n\n\n\n\n\n\nCommonJS and RequireJS compatibility\n\n\n\n\nAdd \nrequire('branch')\n or \ndefine(['branch'], function(branch) { ... });\n\n\n\n\n\n\n\n\nNo Access-Control Error\n\n\n\n\n\n\nMake sure the Branch key is the same within the deep link and website\n\n\nXMLHttpRequest cannot load https://api.branch.io/v1/open. No \nAccess-Control-Allow-Origin\n header is present on the requested resource. Origin \nnull\n is therefore not allowed access. The response had HTTP status code 400.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/web/setup/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/web/setup/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/web/setup/#integrate-app", 
            "text": "TODO", 
            "title": "Integrate App"
        }, 
        {
            "location": "/pages/web/setup/#initialize-branch", 
            "text": "!doctype html  html  head     meta   name = viewport   content = width=device-width, initial-scale=1.0     title / title  / head  body     script       // load Branch       ( function ( b , r , a , n , c , h , _ , s , d , k ){ if ( ! b [ n ] ||! b [ n ]. _q ){ for (; s _ . length ;) c ( h , _ [ s ++ ]); d = r . createElement ( a ); d . async = 1 ; d . src = https://cdn.branch.io/branch-latest.min.js ; k = r . getElementsByTagName ( a )[ 0 ]; k . parentNode . insertBefore ( d , k ); b [ n ] = h }})( window , document , script , branch , function ( b , r ){ b [ r ] = function (){ b . _q . push ([ r , arguments ])}},{ _q : [], _v : 1 }, addListener applyCode autoAppIndex banner closeBanner closeJourney creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode trackCommerceEvent . split (   ),   0 );       // init Branch       branch . init ( key_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3 );     / script  / body  / html    Change  key_live_nmEmfIlcPqjEsuDHIQZ8GdcpsFbXW3gG  to match your  Branch Dashboard", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/web/setup/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/web/setup/#initialize-branch-features", 
            "text": "Loads Branch into your app    branch.init()  is queued so all other Branch functions will always happen afterwards  branch . init ( key_live_nmEmfIlcPqjEsuDHIQZ8GdcpsFbXW3gG ,   function ( err , data )   { \n   console . log ( data );  });", 
            "title": "Initialize Branch features"
        }, 
        {
            "location": "/pages/web/setup/#create-deep-link", 
            "text": "Creates a deep link URL with encapsulated data    Needs  Initialize Branch    Uses  Deep Link Properties    Validate with the  Branch Dashboard  var   linkData   =   { \n   campaign :   content 123 , \n   channel :   facebook , \n   feature :   dashboard , \n   stage :   new user , \n   tags :   [   tag1 ,   tag2 ,   tag3   ], \n   alias :   , \n   data :   { \n     custom_bool :   true , \n     custom_int :   Date . now (), \n     custom_string :   hello , \n     $og_title :   Title , \n     $og_description :   Description , \n     $og_image_url : http://lorempixel.com/400/400 \n   }  };  branch . link ( linkData ,   function ( err ,   link )   { \n   console . log ( link );  });", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/web/setup/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Uses  Deep Link Properties  !-- shareable elements --  button   id = button deep link / button  a   id = anchor deep link / a   // create link  var   linkData   =   { \n   campaign :   String ( Date . now ())  };  branch . link ( linkData ,   function ( err ,   link )   { \n   // share link \n   document . getElementById ( button ). onclick   =   function ()   { \n     window . open ( link   ||   err ); \n   }; \n   document . getElementById ( anchor ). href   =   link   ||   err ;  });", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/web/setup/#read-deep-link", 
            "text": "Make a deep link redirect to your website   https://a60f.app.link/mwSWBbPRjF?$fallback_url=https://example.com    Website will open with  _branch_match_id  https://example.com/?$fallback_url=https://example.com _branch_match_id=418480444086051524    Read  _branch_match_id  branch . init ( key_live_nmEmfIlcPqjEsuDHIQZ8GdcpsFbXW3gG ,   function ( err , data )   { \n   console . log ( data );  });", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/web/setup/#navigate-to-content", 
            "text": "", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/web/setup/#display-content", 
            "text": "", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/web/setup/#track-content", 
            "text": "", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/web/setup/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    Validate with the  Branch Dashboard     branch . setIdentity ( 123456 );   branch . setIdentity ( 123456 ,   function   ( err , data )   {  });     Removes the identity of a user  branch . logout ();   branch . logout ( function ( err ){  });", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/web/setup/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard  branch . track ( signup );   branch . track ( signup ,   {   metadata :   123   });   branch . track ( signup ,   {   custom :   123   },   function   ( err ){  });", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/web/setup/#track-commerce", 
            "text": "", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/web/setup/#handle-referrals", 
            "text": "", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/web/setup/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/web/setup/#sample-testing-apps", 
            "text": "https://cdn.branch.io/example.html  http://cdn.branch.io/branchster-angular", 
            "title": "Sample testing apps"
        }, 
        {
            "location": "/pages/web/setup/#bower-or-npm-compatibility", 
            "text": "Use  bower install branch-sdk  or  npm install branch-sdk", 
            "title": "Bower or Npm compatibility"
        }, 
        {
            "location": "/pages/web/setup/#commonjs-and-requirejs-compatibility", 
            "text": "Add  require('branch')  or  define(['branch'], function(branch) { ... });", 
            "title": "CommonJS and RequireJS compatibility"
        }, 
        {
            "location": "/pages/web/setup/#no-access-control-error", 
            "text": "Make sure the Branch key is the same within the deep link and website  XMLHttpRequest cannot load https://api.branch.io/v1/open. No  Access-Control-Allow-Origin  header is present on the requested resource. Origin  null  is therefore not allowed access. The response had HTTP status code 400.", 
            "title": "No Access-Control Error"
        }, 
        {
            "location": "/pages/links/behavior/", 
            "text": "Default behavior\n\n\n\n\n\n\nApp is installed\n\n\n\n\nUser \nclicks\n on a Branch deep link\n\n\nDevice \nopens\n app\n\n\nBranch passes deep link \ndata\n into app\n\n\n\n\n\n\n\n\nApp is not installed\n\n\n\n\nUser \nclicks\n on a Branch deep link\n\n\nDevice \nnavigates\n to the App Store, Google Playstore, or Fallback URL\n\n\nUser \ninstalls\n and \nopens\n app\n\n\nBranch passes deep link \ndata\n into app\n\n\n\n\n\n\n\n\nCustom behavior\n\n\n\n\n\n\nPass data from deep link to app\n\n\n\n\nAdd query string \nhttps://s3z3.app.link/fzmLEhobLD?$custom_data=123\n \n\n\nAdd link data (TODO)\n\n\nAdd quick link key-values (TODO)\n\n\n\n\n\n\n\n\nChange redirect when app is not installed\n\n\n\n\nAdd query string \nhttps://s3z3.app.link?$ios_url=https://example.com\n\n\nAdd link data \n$ios_url = 'https://example.com'\n (\ndocs\n)\n\n\nAdd link data \n$fallback_url = 'https://example.com'\n (\ndocs\n)\n\n\nAdd link data for a deep view \n$ios_deepview = 'deepviewId'\n  (\ndocs\n)\n\n\nEnable a \nDeep View\n globally on the \nBranch Dashboard\n\n\nAdd \niOS/Android Custom URL\n on the \nBranch Dashboard\n\n\nAdd \nDefault URL\n (\n$fallback_url\n) on the \nBranch Dashboard\n\n\n(ordered by precedence)\n\n\n\n\n\n\n\n\nChange redirect when app is installed\n\n\n\n\niOS:\n need to override \nUniversal Links\n\n\nAdd \n$web_only = true\n (\ndocs\n)\n\n\nAdd redirect \n$ios_url = 'https://google.com'\n (\ndocs\n)\n\n\nor:\n Append \n/e/\n to the deep link\n\n\ne.g. \nhttps://s3z3.app.link/fzmLEhobLD\n -\n \nhttps://s3z3.app.link/e/fzmLEhobLD\n\n\n\n\n\n\n\n\n\n\nAndroid:\n need to override \nApp Links\n\n\nUncheck \nEnable App Links\n and \nSave\n the \nBranch Dashboard\n\n\nAdd redirect \n$android_url = 'https://google.com'\n (\ndocs\n)\n\n\nAdd a broken URI Scheme with \n$android_deeplink_path = 'random'\n (\ndocs\n)\n\n\n\n\n\n\n\n\n\n\n\n\nSocial behavior\n\n\n\n\nOG Tags TODO\n\n\nDeep view TODO\n\n\n\n\nSupported platforms\n\n\n\n\n\n\nApps which support Branch deep links\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nUsage\n\n\nAndroid\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nFacebook NewsFeed\n\n\n\u2705\n\n\nDeep Views\n must be enabled\n\n\n\u2705\n\n\n\n\n\n\n\n\nFacebook Messanger\n\n\n\u2705\n\n\nDeep Views\n must be enabled\n\n\n\u2705\n\n\n\n\n\n\n\n\nInstagram\n\n\n\u2705\n\n\nDeep Views\n must be enabled\n\n\n\u2705\n\n\n\n\n\n\n\n\nSnapChat\n\n\n\u2705\n\n\nDeep Views\n must be enabled\n\n\n\ud83c\udd7e\ufe0f\n\n\napp.link\n deep links are not clickable\n\n\n\n\n\n\nTwitter\n\n\n\u2705\n\n\nDeep Views\n must be enabled\n\n\n\u2705\n\n\n\n\n\n\n\n\nPinterest\n\n\n\u2705\n\n\nDeep Views\n must be enabled\n\n\n\u2705\n\n\n\n\n\n\n\n\nLine\n\n\n\u2705\n\n\nDeep Views\n must be enabled\n\n\n\u2705\n\n\n\n\n\n\n\n\nSkype\n\n\n\u2705\n\n\nDeep Views\n must be enabled\n\n\n\u2705\n\n\n\n\n\n\n\n\nSlack\n\n\n\u2705\n\n\n\n\n\u2705\n\n\n\n\n\n\n\n\nChrome address bar\n\n\n\u2705\n\n\n\n\n\u2705\n\n\n\n\n\n\n\n\nChrome web page\n\n\n\u2705\n\n\n\n\n\u2705\n\n\n\n\n\n\n\n\nFireFox address bar\n\n\n\ud83c\udd7e\ufe0f\n\n\n\n\n\u2705\n\n\n\n\n\n\n\n\nFireFox web page\n\n\n\u2705\n\n\n\n\n\u2705\n\n\n\n\n\n\n\n\nSafari address bar\n\n\n\ud83c\udd7e\ufe0f\n\n\n\n\n\n\n\n\n\n\n\n\nSafari web page\n\n\n\u2705\n\n\n\n\n\n\n\n\n\n\n\n\nWeChat\n\n\n\u2705\n\n\nDeep Views\n must enabled\n\n\n\u2705\n\n\n\n\n\n\n\n\nWhatsApp\n\n\n\u2705\n\n\n\n\n\u2705\n\n\n\n\n\n\n\n\nHangouts\n\n\n\u2705\n\n\n\n\n\u2705\n\n\n\n\n\n\n\n\niMessage\n\n\n\u2705\n\n\n\n\n\n\n\n\n\n\n\n\nApple Mail\n\n\n\u2705\n\n\n\n\n\n\n\n\n\n\n\n\nGmail\n\n\n\u2705\n\n\n\n\n\u2705", 
            "title": "Link behavior"
        }, 
        {
            "location": "/pages/links/behavior/#default-behavior", 
            "text": "", 
            "title": "Default behavior"
        }, 
        {
            "location": "/pages/links/behavior/#app-is-installed", 
            "text": "User  clicks  on a Branch deep link  Device  opens  app  Branch passes deep link  data  into app", 
            "title": "App is installed"
        }, 
        {
            "location": "/pages/links/behavior/#app-is-not-installed", 
            "text": "User  clicks  on a Branch deep link  Device  navigates  to the App Store, Google Playstore, or Fallback URL  User  installs  and  opens  app  Branch passes deep link  data  into app", 
            "title": "App is not installed"
        }, 
        {
            "location": "/pages/links/behavior/#custom-behavior", 
            "text": "", 
            "title": "Custom behavior"
        }, 
        {
            "location": "/pages/links/behavior/#pass-data-from-deep-link-to-app", 
            "text": "Add query string  https://s3z3.app.link/fzmLEhobLD?$custom_data=123    Add link data (TODO)  Add quick link key-values (TODO)", 
            "title": "Pass data from deep link to app"
        }, 
        {
            "location": "/pages/links/behavior/#change-redirect-when-app-is-not-installed", 
            "text": "Add query string  https://s3z3.app.link?$ios_url=https://example.com  Add link data  $ios_url = 'https://example.com'  ( docs )  Add link data  $fallback_url = 'https://example.com'  ( docs )  Add link data for a deep view  $ios_deepview = 'deepviewId'   ( docs )  Enable a  Deep View  globally on the  Branch Dashboard  Add  iOS/Android Custom URL  on the  Branch Dashboard  Add  Default URL  ( $fallback_url ) on the  Branch Dashboard  (ordered by precedence)", 
            "title": "Change redirect when app is not installed"
        }, 
        {
            "location": "/pages/links/behavior/#change-redirect-when-app-is-installed", 
            "text": "iOS:  need to override  Universal Links  Add  $web_only = true  ( docs )  Add redirect  $ios_url = 'https://google.com'  ( docs )  or:  Append  /e/  to the deep link  e.g.  https://s3z3.app.link/fzmLEhobLD  -   https://s3z3.app.link/e/fzmLEhobLD      Android:  need to override  App Links  Uncheck  Enable App Links  and  Save  the  Branch Dashboard  Add redirect  $android_url = 'https://google.com'  ( docs )  Add a broken URI Scheme with  $android_deeplink_path = 'random'  ( docs )", 
            "title": "Change redirect when app is installed"
        }, 
        {
            "location": "/pages/links/behavior/#social-behavior", 
            "text": "OG Tags TODO  Deep view TODO", 
            "title": "Social behavior"
        }, 
        {
            "location": "/pages/links/behavior/#supported-platforms", 
            "text": "Apps which support Branch deep links      iOS  Usage  Android  Usage      Facebook NewsFeed  \u2705  Deep Views  must be enabled  \u2705     Facebook Messanger  \u2705  Deep Views  must be enabled  \u2705     Instagram  \u2705  Deep Views  must be enabled  \u2705     SnapChat  \u2705  Deep Views  must be enabled  \ud83c\udd7e\ufe0f  app.link  deep links are not clickable    Twitter  \u2705  Deep Views  must be enabled  \u2705     Pinterest  \u2705  Deep Views  must be enabled  \u2705     Line  \u2705  Deep Views  must be enabled  \u2705     Skype  \u2705  Deep Views  must be enabled  \u2705     Slack  \u2705   \u2705     Chrome address bar  \u2705   \u2705     Chrome web page  \u2705   \u2705     FireFox address bar  \ud83c\udd7e\ufe0f   \u2705     FireFox web page  \u2705   \u2705     Safari address bar  \ud83c\udd7e\ufe0f       Safari web page  \u2705       WeChat  \u2705  Deep Views  must enabled  \u2705     WhatsApp  \u2705   \u2705     Hangouts  \u2705   \u2705     iMessage  \u2705       Apple Mail  \u2705       Gmail  \u2705   \u2705", 
            "title": "Supported platforms"
        }, 
        {
            "location": "/pages/links/data/", 
            "text": "Link data\n\n\nStructure\n\n\n\n\n\n\nDeep link data structure\n\n\n{\n\n  \ntags\n:\n \n[\n \ntag1\n,\n \ntag2\n \n],\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \nfeature\n:\n \ndashboard\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \nalias\n:\n \nmyalias\n,\n\n  \ndata\n:\n \n{\n\n    \nmydata\n:\n \nsomething\n,\n\n    \nfoo\n:\n \nbar\n,\n\n    \n$desktop_url\n:\n \nhttp://myappwebsite.com\n,\n\n    \n$ios_url\n:\n \nhttp://myappwebsite.com/ios\n,\n\n    \n$android_url\n:\n \nhttp://myappwebsite.com/android\n,\n\n    \n$og_app_id\n:\n \n12345\n,\n\n    \n$og_title\n:\n \nMy App\n,\n\n    \n$og_description\n:\n \nMy app\\\ns description.\n,\n\n    \n$og_image_url\n:\n \nhttp://myappwebsite.com/image.png\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nBranch reserved keys\n\n\n\n\n\n\n\n\nPrefix\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$\n\n\nBranch reserved keyword\n\n\n\n\n\n\n~\n\n\nBranch analytical data\n\n\n\n\n\n\n+\n\n\nBranch added values\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n+match_guaranteed\n\n\nfalse\n\n\nTODO\n\n\n\n\n\n\n+is_first_session\n\n\nfalse\n\n\nTODO\n\n\n\n\n\n\n+clicked_branch_link\n\n\nfalse\n\n\nTODO\n\n\n\n\n\n\n+non_branch_link\n\n\nfalse\n\n\nTODO\n\n\n\n\n\n\n\n\n\n\n\n\nAnalytical labels\n\n\n\n\n\n\nFor \nCreate Deep Link\n and \nShare Deep Link\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nchannel\n\n\n\n\nUse channel to tag the route that your link reaches users. For example, tag links with \n'Facebook'\n or \n'LinkedIn'\n to help track clicks and installs through those paths separately\n\n\n\n\n\n\nfeature\n\n\n\n\nThis is the feature of your app that the link might be associated with. For example, if you had built a referral program, you would label links with the feature \u2018referral\u2019\n\n\n\n\n\n\ncampaign\n\n\n\n\nUse this field to organize the links by actual campaign. For example, if you launched a new feature or product and want to run a campaign around that\n\n\n\n\n\n\nstage\n\n\n\n\nUse this to categorize the progress or category of a user when the link was generated. For example, if you had an invite system accessible on level 1, level 3 and 5, you could differentiate links generated at each level with this parameter\n\n\n\n\n\n\ntags\n\n\n\n\nThis is a free form entry with unlimited values \n['string']\n. Use it to organize your link data with labels that don\u2019t fit within the bounds of the above\n\n\n\n\n\n\nalias\n\n\n\n\nSpecify a link alias in place of the standard encoded short URL e.g. \nyourdomain.com/youralias\n. Link aliases are unique, immutable objects that cannot be deleted. You cannot change the alias of existing links. Aliases on the legacy \nbnc.lt\n domain are incompatible with Universal Links and Spotlight\n\n\n\n\n\n\ntype\n\n\n0\n\n\nMust be an \nint\n. Set to \n1\n to limit deep link to a single use. Set to \n2\n to make the link show up under \nQuick Links\n while adding \n$marketing_title\n to \ndata\n. Does not work with the Native SDKs.\n\n\n\n\n\n\n\n\n\n\n\n\nCustom data\n\n\n\n\n\n\nPass any custom data to be read inside your app\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nrandom\n\n\n123\n\n\nAny key-value pair\n\n\n\n\n\n\nhello\n\n\n'world'\n\n\nAny key-value pair\n\n\n\n\n\n\ncustom_data\n\n\ntrue\n\n\nAny key-value pair\n\n\n\n\n\n\nany_value\n\n\n{ 'random': 'dictionary' }\n\n\nAny key-value pair\n\n\n\n\n\n\nlook_at\n\n\n[1,2,3,4,5,6]\n\n\nAny key-value pair\n\n\n\n\n\n\nnav_here\n\n\ncontent/123\n\n\nAny key-value pair\n\n\n\n\n\n\n\n\n\n\n\n\nRedirections\n\n\n\n\nNavigate to different locations based on device information\n\n\n\n\nNavigation URLs must be websites, not deep links\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$fallback_url\n\n\n\n\nChange the redirect endpoint for all platforms - so you don\u2019t have to enable it by platform. Note that Branch will forward all robots to this URL, which \noverrides any OG tags\n entered in the link.  System-wide Default URL (set in Link Settings)\n\n\n\n\n\n\n$desktop_url\n\n\n\n\nChange the redirect endpoint on desktops Text-Me-The-App page (set in Link Settings)\n\n\n\n\n\n\n$ios_url\n\n\n\n\nChange the redirect endpoint for iOS  App Store page for your app (set in Link Settings)\n\n\n\n\n\n\n$ipad_url\n\n\n\n\nChange the redirect endpoint for iPads \n$ios_url\n value\n\n\n\n\n\n\n$android_url\n\n\n\n\nChange the redirect endpoint for Android  Play Store page for your app (set in Link Settings)\n\n\n\n\n\n\n$windows_phone_url\n\n\n\n\nChange the redirect endpoint for Windows OS Windows Phone default URL (set in Link Settings)\n\n\n\n\n\n\n$blackberry_url\n\n\n\n\nChange the redirect endpoint for Blackberry OS  BlackBerry default URL (set in Link Settings)\n\n\n\n\n\n\n$fire_url\n\n\n\n\nChange the redirect endpoint for Amazon Fire OS Fire default URL (set in Link Settings)\n\n\n\n\n\n\n$ios_wechat_url\n\n\n\n\nChange the redirect endpoint for WeChat on iOS devices \n$ios_url value\n\n\n\n\n\n\n$android_wechat_url\n\n\n\n\nChange the redirect endpoint for WeChat on Android devices  \n$android_url\n value\n\n\n\n\n\n\n$after_click_url\n\n\n\n\nURL redirect to after the main click redirect has completed\n\n\n\n\n\n\n$web_only\n\n\nfalse\n\n\nForce to open the \n$fallback_url\n instead of the app\n\n\n\n\n\n\n\n\n\n\n\n\nDeep linking\n\n\n\n\n\n\nNavigate to different locations based on device information\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$deeplink_path\n\n\nopen?link_click_id=1234\n\n\nSet the deep link path for all platforms - so you don\u2019t have to enable it by platform. When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within\n\n\n\n\n\n\n$android_deeplink_path\n\n\n\n\nSet the deep link path for Android apps When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within\n\n\n\n\n\n\n$ios_deeplink_path\n\n\n\n\nSet the deep link path for iOS apps. When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within\n\n\n\n\n\n\n$match_duration\n\n\n7200\n\n\nLets you control the snapshotting match timeout (the time that a click will wait for an app open to match) also known as attribution window. Specified in seconds\n\n\n\n\n\n\n$always_deeplink\n\n\ntrue\n\n\nSet to \nfalse\n to make links always fall back to your mobile site. Does not apply to Universal Links or Android App Links.\n\n\n\n\n\n\n$ios_redirect_timeout\n\n\n750\n\n\nControl the timeout that the client-side JS waits after trying to open up the app before redirecting to the App Store. Specified in milliseconds\n\n\n\n\n\n\n$android_redirect_timeout\n\n\n750\n\n\nControl the timeout that the client side JS waits after trying to open up the app before redirecting to the Play Store. Specified in milliseconds\n\n\n\n\n\n\n$one_time_use\n\n\nfalse\n\n\nSet to \ntrue\n to limit deep linking behavior of the generated link to a single use. Can also be set using type\n\n\n\n\n\n\n$custom_sms_text\n\n\n\n\nText for SMS link sent for desktop clicks to this link. Must contain \n{{ link }}\n Value of Text me the app page in Settings\n\n\n\n\n\n\n$marketing_title\n\n\n\n\nThe Marketing Title for the deep link in the \nQuick Links\n\n\n\n\n\n\n\n\n\n\n\n\nContent\n\n\n\n\n\n\nset\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$publicly_indexable\n\n\n1\n\n\nCannot modify here. Needs to be set by the Branch Universal Object\n\n\n\n\n\n\n$keywords\n\n\n\n\nKeywords for which this content should be discovered by. Just assign an array of strings with the keywords you\u2019d like to use\n\n\n\n\n\n\n$canonical_identifier\n\n\n\n\nThis is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities\n\n\n\n\n\n\n$exp_date\n\n\n0\n\n\nCannot modify here. Needs to be set by the Branch Universal Object. Must be epoch timestamp with milliseconds\n\n\n\n\n\n\n$content_type\n\n\n\n\nThis is a label for the type of content present. Apple recommends that you use uniform type identifier as described here\n\n\n\n\n\n\n\n\n\n\n\n\nDeepView\n\n\n\n\n\n\nset\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$ios_deepview\n\n\ndefault_template\n\n\nThe name of the deepview template to use for iOS\n\n\n\n\n\n\n$android_deepview\n\n\ndefault_template\n\n\nThe name of the deepview template to use for Android\n\n\n\n\n\n\n$desktop_deepview\n\n\ndefault_template\n\n\nThe name of the deepview template to use for the Desktop\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Graph\n\n\n\n\n\n\nset\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$og_title\n\n\n\n\nSet the title of the link as it will be seen in social media displays\n\n\n\n\n\n\n$og_description\n\n\n\n\nSet the description of the link as it will be seen in social media displays\n\n\n\n\n\n\n$og_image_url\n\n\n\n\nSet the image of the link as it will be seen in social media displays\n\n\n\n\n\n\n$og_image_width\n\n\n\n\nSet the image\u2019s width in pixels for social media displays\n\n\n\n\n\n\n$og_image_height\n\n\n\n\nSet the image\u2019s height in pixels for social media displays\n\n\n\n\n\n\n$og_video\n\n\n\n\nSet a video as it will be seen in social media displays\n\n\n\n\n\n\n$og_url\n\n\n\n\nSet the base URL of the link as it will be seen in social media displays\n\n\n\n\n\n\n$og_type\n\n\n\n\nSet the type of custom card format link as it will be seen in social media displays\n\n\n\n\n\n\n$og_redirect\n\n\n\n\n(Advanced, not recommended) Set a custom URL that we redirect the social media robots to in order to retrieve all the appropriate tags\n\n\n\n\n\n\n$og_app_id\n\n\n\n\n(Rarely used) Sets the app id tag\n\n\n\n\n\n\n\n\n\n\n\n\nTwitter\n\n\n\n\n\n\nset\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$twitter_card\n\n\n\n\nSet the Twitter card type of the link\n\n\n\n\n\n\n$twitter_title\n\n\n\n\nSet the title of the Twitter card\n\n\n\n\n\n\n$twitter_description\n\n\n\n\nSet the description of the Twitter card\n\n\n\n\n\n\n$twitter_image_url\n\n\n\n\nSet the image URL for the Twitter card\n\n\n\n\n\n\n$twitter_site\n\n\n\n\nSet the site for Twitter\n\n\n\n\n\n\n$twitter_app_country\n\n\n\n\nSet the app country for the app card\n\n\n\n\n\n\n$twitter_player\n\n\n\n\nSet the video player\u2019s URL. Defaults to the value of \n$og_video\n.\n\n\n\n\n\n\n$twitter_player_width\n\n\n\n\nSet the player\u2019s width in pixels\n\n\n\n\n\n\n$twitter_player_height\n\n\n\n\nSet the player\u2019s height in pixels\n\n\n\n\n\n\n\n\n\n\n\n\nUniversal Object\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\nLink Property\n\n\n\n\n\n\n\n\n\n\ncanonicalIdentifier\n\n\n\n\n(Required)\n This is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities\n\n\n$canonical_identifier\n\n\n\n\n\n\ncanonicalUrl\n\n\n\n\nThe canonical URL, used for SEO purposes\n\n\n$canonical_url\n\n\n\n\n\n\ntitle\n\n\n\n\nThe name for the piece of content\n\n\n$og_title\n\n\n\n\n\n\ncontentDescription\n\n\n\n\nA description for the content\n\n\n$og_description\n\n\n\n\n\n\ncontentImageUrl\n\n\n\n\nThe image URL for the content. Must be an absolute path\n\n\n$og_image_url\n\n\n\n\n\n\nprice\n\n\n\n\nThe price of the item\n\n\n$amount\n\n\n\n\n\n\ncurrency\n\n\n\n\nThe currency representing the price in ISO 4217 currency code\n\n\n$currency\n\n\n\n\n\n\ncontentIndexingMode\n\n\n\"public\"\n\n\nCan be set to either \n\"public\"\n or \n\"private\"\n. Public indicates that you\u2019d like this content to be discovered by other apps.\n\n\n$publicly_indexable\n\n\n\n\n\n\ncontentMetadata\n\n\n\n\nAny custom key-value data e.g. \n{ \"custom\": \"data\" }", 
            "title": "Link data"
        }, 
        {
            "location": "/pages/links/data/#link-data", 
            "text": "", 
            "title": "Link data"
        }, 
        {
            "location": "/pages/links/data/#structure", 
            "text": "Deep link data structure  { \n   tags :   [   tag1 ,   tag2   ], \n   channel :   facebook , \n   feature :   dashboard , \n   stage :   new user , \n   alias :   myalias , \n   data :   { \n     mydata :   something , \n     foo :   bar , \n     $desktop_url :   http://myappwebsite.com , \n     $ios_url :   http://myappwebsite.com/ios , \n     $android_url :   http://myappwebsite.com/android , \n     $og_app_id :   12345 , \n     $og_title :   My App , \n     $og_description :   My app\\ s description. , \n     $og_image_url :   http://myappwebsite.com/image.png \n   }  }     Branch reserved keys     Prefix  Usage      $  Branch reserved keyword    ~  Branch analytical data    +  Branch added values        Key  Default  Usage      +match_guaranteed  false  TODO    +is_first_session  false  TODO    +clicked_branch_link  false  TODO    +non_branch_link  false  TODO", 
            "title": "Structure"
        }, 
        {
            "location": "/pages/links/data/#analytical-labels", 
            "text": "For  Create Deep Link  and  Share Deep Link     Key  Default  Usage      channel   Use channel to tag the route that your link reaches users. For example, tag links with  'Facebook'  or  'LinkedIn'  to help track clicks and installs through those paths separately    feature   This is the feature of your app that the link might be associated with. For example, if you had built a referral program, you would label links with the feature \u2018referral\u2019    campaign   Use this field to organize the links by actual campaign. For example, if you launched a new feature or product and want to run a campaign around that    stage   Use this to categorize the progress or category of a user when the link was generated. For example, if you had an invite system accessible on level 1, level 3 and 5, you could differentiate links generated at each level with this parameter    tags   This is a free form entry with unlimited values  ['string'] . Use it to organize your link data with labels that don\u2019t fit within the bounds of the above    alias   Specify a link alias in place of the standard encoded short URL e.g.  yourdomain.com/youralias . Link aliases are unique, immutable objects that cannot be deleted. You cannot change the alias of existing links. Aliases on the legacy  bnc.lt  domain are incompatible with Universal Links and Spotlight    type  0  Must be an  int . Set to  1  to limit deep link to a single use. Set to  2  to make the link show up under  Quick Links  while adding  $marketing_title  to  data . Does not work with the Native SDKs.", 
            "title": "Analytical labels"
        }, 
        {
            "location": "/pages/links/data/#custom-data", 
            "text": "Pass any custom data to be read inside your app     Key  Value  Usage      random  123  Any key-value pair    hello  'world'  Any key-value pair    custom_data  true  Any key-value pair    any_value  { 'random': 'dictionary' }  Any key-value pair    look_at  [1,2,3,4,5,6]  Any key-value pair    nav_here  content/123  Any key-value pair", 
            "title": "Custom data"
        }, 
        {
            "location": "/pages/links/data/#redirections", 
            "text": "Navigate to different locations based on device information   Navigation URLs must be websites, not deep links     Key  Default  Usage      $fallback_url   Change the redirect endpoint for all platforms - so you don\u2019t have to enable it by platform. Note that Branch will forward all robots to this URL, which  overrides any OG tags  entered in the link.  System-wide Default URL (set in Link Settings)    $desktop_url   Change the redirect endpoint on desktops Text-Me-The-App page (set in Link Settings)    $ios_url   Change the redirect endpoint for iOS  App Store page for your app (set in Link Settings)    $ipad_url   Change the redirect endpoint for iPads  $ios_url  value    $android_url   Change the redirect endpoint for Android  Play Store page for your app (set in Link Settings)    $windows_phone_url   Change the redirect endpoint for Windows OS Windows Phone default URL (set in Link Settings)    $blackberry_url   Change the redirect endpoint for Blackberry OS  BlackBerry default URL (set in Link Settings)    $fire_url   Change the redirect endpoint for Amazon Fire OS Fire default URL (set in Link Settings)    $ios_wechat_url   Change the redirect endpoint for WeChat on iOS devices  $ios_url value    $android_wechat_url   Change the redirect endpoint for WeChat on Android devices   $android_url  value    $after_click_url   URL redirect to after the main click redirect has completed    $web_only  false  Force to open the  $fallback_url  instead of the app", 
            "title": "Redirections"
        }, 
        {
            "location": "/pages/links/data/#deep-linking", 
            "text": "Navigate to different locations based on device information     Key  Default  Usage      $deeplink_path  open?link_click_id=1234  Set the deep link path for all platforms - so you don\u2019t have to enable it by platform. When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within    $android_deeplink_path   Set the deep link path for Android apps When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within    $ios_deeplink_path   Set the deep link path for iOS apps. When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within    $match_duration  7200  Lets you control the snapshotting match timeout (the time that a click will wait for an app open to match) also known as attribution window. Specified in seconds    $always_deeplink  true  Set to  false  to make links always fall back to your mobile site. Does not apply to Universal Links or Android App Links.    $ios_redirect_timeout  750  Control the timeout that the client-side JS waits after trying to open up the app before redirecting to the App Store. Specified in milliseconds    $android_redirect_timeout  750  Control the timeout that the client side JS waits after trying to open up the app before redirecting to the Play Store. Specified in milliseconds    $one_time_use  false  Set to  true  to limit deep linking behavior of the generated link to a single use. Can also be set using type    $custom_sms_text   Text for SMS link sent for desktop clicks to this link. Must contain  {{ link }}  Value of Text me the app page in Settings    $marketing_title   The Marketing Title for the deep link in the  Quick Links", 
            "title": "Deep linking"
        }, 
        {
            "location": "/pages/links/data/#content", 
            "text": "set     Key  Default  Usage      $publicly_indexable  1  Cannot modify here. Needs to be set by the Branch Universal Object    $keywords   Keywords for which this content should be discovered by. Just assign an array of strings with the keywords you\u2019d like to use    $canonical_identifier   This is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities    $exp_date  0  Cannot modify here. Needs to be set by the Branch Universal Object. Must be epoch timestamp with milliseconds    $content_type   This is a label for the type of content present. Apple recommends that you use uniform type identifier as described here", 
            "title": "Content"
        }, 
        {
            "location": "/pages/links/data/#deepview", 
            "text": "set     Key  Default  Usage      $ios_deepview  default_template  The name of the deepview template to use for iOS    $android_deepview  default_template  The name of the deepview template to use for Android    $desktop_deepview  default_template  The name of the deepview template to use for the Desktop", 
            "title": "DeepView"
        }, 
        {
            "location": "/pages/links/data/#open-graph", 
            "text": "set     Key  Default  Usage      $og_title   Set the title of the link as it will be seen in social media displays    $og_description   Set the description of the link as it will be seen in social media displays    $og_image_url   Set the image of the link as it will be seen in social media displays    $og_image_width   Set the image\u2019s width in pixels for social media displays    $og_image_height   Set the image\u2019s height in pixels for social media displays    $og_video   Set a video as it will be seen in social media displays    $og_url   Set the base URL of the link as it will be seen in social media displays    $og_type   Set the type of custom card format link as it will be seen in social media displays    $og_redirect   (Advanced, not recommended) Set a custom URL that we redirect the social media robots to in order to retrieve all the appropriate tags    $og_app_id   (Rarely used) Sets the app id tag", 
            "title": "Open Graph"
        }, 
        {
            "location": "/pages/links/data/#twitter", 
            "text": "set     Key  Default  Usage      $twitter_card   Set the Twitter card type of the link    $twitter_title   Set the title of the Twitter card    $twitter_description   Set the description of the Twitter card    $twitter_image_url   Set the image URL for the Twitter card    $twitter_site   Set the site for Twitter    $twitter_app_country   Set the app country for the app card    $twitter_player   Set the video player\u2019s URL. Defaults to the value of  $og_video .    $twitter_player_width   Set the player\u2019s width in pixels    $twitter_player_height   Set the player\u2019s height in pixels", 
            "title": "Twitter"
        }, 
        {
            "location": "/pages/links/data/#universal-object", 
            "text": "", 
            "title": "Universal Object"
        }, 
        {
            "location": "/pages/links/data/#properties", 
            "text": "Key  Default  Usage  Link Property      canonicalIdentifier   (Required)  This is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities  $canonical_identifier    canonicalUrl   The canonical URL, used for SEO purposes  $canonical_url    title   The name for the piece of content  $og_title    contentDescription   A description for the content  $og_description    contentImageUrl   The image URL for the content. Must be an absolute path  $og_image_url    price   The price of the item  $amount    currency   The currency representing the price in ISO 4217 currency code  $currency    contentIndexingMode  \"public\"  Can be set to either  \"public\"  or  \"private\" . Public indicates that you\u2019d like this content to be discovered by other apps.  $publicly_indexable    contentMetadata   Any custom key-value data e.g.  { \"custom\": \"data\" }", 
            "title": "Properties"
        }, 
        {
            "location": "/pages/links/link-domain/", 
            "text": "Default app.link subdomain\n\n\nEvery app on the Branch platform is assigned a subdomain of the form \nxxxx.app.link\n. This is unique to your app and must be used in several places when integrating the SDK.\n\n\n\n\nTip\n\n\nBecause of the way that Apple implements Universal Links, every app also has a shadow subdomain of the form \nxxxx-alternate.app.link\n. This is used in select places but will not be shown to your users.\n\n\n\n\nRetrieving the subdomain assigned to your app\n\n\n\n\nGo to the \nLink Settings\n page on the dashboard.\n\n\nScroll down to the \nLink Domain\n area.\n\n\nCopy the value listed there.\n\n\n\n\n\n\n\n\nTest environment domain\n\n\nThe assigned subdomain for your test environment is of the form \nxxxx.test-app-link\n and must be configured separately. Branch automatically handles HTTPS traffic for custom subdomains and root domains. Branch will acquire the necessary SSL certificate if you follow the simple setup instructions below. Branch will also automatically renew the certificates when needed.\n\n\n\n\nChanging your app.link subdomain\n\n\nYou can brand your links with a custom subdomain like \nyou.app.link\n. \n\n\n\n\nOne change only\n\n\nYou can only change your app.link subdomain once. Keep in mind that if you change this and you have implemented \nuniversal links\n or \napp links\n, you must update your implementation. The links on your old subdomain will no longer work.\n\n\n\n\n\n\nGo to \nLink Settings\n in the dashboard.\n\n\nScroll to the \nLink Domain\n setting at the bottom.\n\n\nClick \nChange my app.link subdomain\n.\n\n\nChoose a subdomain that matches your brand. You cannot choose one that is in use by someone else, and it cannot have special characters. \n\n\nPress \nGet\n.\n\n\n\n\nSetting a custom link domain\n\n\nIf you want to use a custom domain or subdomain for your Branch links instead of the \nXXXX.app.link\n domain, setting one up is simple.\n\n\n\n\nAvoid switching later\n\n\nWe recommend that you choose one domain or subdomain to use with Branch and stick with it, as switching can cause significant problems with your existing links.\n\n\n\n\n\n\nUpdates to Universal \n App Links configuration\n\n\nIf you enable (or change) your link domain/subdomain, you will need to make updates to your Universal Links (iOS) and App Links (Android) configuration. Review the \niOS\n and \nAndroid\n integration guides.\n\n\n\n\nCustom SUBDOMAIN (go.branch.com)\n\n\n\n\nDo not use www\n\n\nSome browsers have special rules for processing URLs beginning with \nwww\n. We strongly recommend you do not include a \nwww\n prefix in your custom subdomain.\n\n\n\n\n\n\nCreate a CNAME for your subdomain and point it to \ncustom.bnc.lt\n\n\nGo to \nLink Settings\n on the Branch dashboard, and find the \nLink Domain\n section.\n\n\nClick \nUse my own domain\n.\n\n\nYou should see a message telling you the status of your domain under the domain field. If you don't, please type your domain in again. \n\n\nClick \nConfirm\n.\n\n\n\n\nCustom ROOT domain (branch.com)\n\n\n\n\nUse this domain for Branch links only\n\n\nOnce you enable this root domain for Branch links, you will not be able to use it for hosting anything else. We recommend using a subdomain, or purchasing a new root domain for this purpose. \nYou cannot use your main website domain for hosting Branch links\n.\n\n\n\n\n\n\nGo to \nLink Settings\n on the Branch dashboard, and find the \nLink Domain\n section.\n\n\nClick \nUse my own domain\n. \n\n\nEnter your custom domain into the text box. Resolve any errors. \n\n\nWork with your domain registrar to make the Branch-provided nameservers listed under the domain field authoritative for your domain. \nNote that this means you cannot host anything else on this domain \u2014 only Branch links.\n \n\n\nClick \nConfirm\n.\n\n\n\n\n\n\nHeads Up!\n\n\n\n\nThe nameservers in the above image are for example purposes only. The nameservers you use will be unique to your application.\n\n\nIf you are configuring the domain through AWS's Route 53, make sure you are editing the nameservers under the \n\"Registered Domains\"\n tab, and not the \n\"Hosted zones\"\n section.\n\n\n\n\n\n\nAbout the legacy bnc.lt domain\n\n\nThe bnc.lt domain is no longer available for new apps. If you have existing links with this domain as the base, they will continue to function.", 
            "title": "Link domain"
        }, 
        {
            "location": "/pages/links/link-domain/#default-applink-subdomain", 
            "text": "Every app on the Branch platform is assigned a subdomain of the form  xxxx.app.link . This is unique to your app and must be used in several places when integrating the SDK.   Tip  Because of the way that Apple implements Universal Links, every app also has a shadow subdomain of the form  xxxx-alternate.app.link . This is used in select places but will not be shown to your users.", 
            "title": "Default app.link subdomain"
        }, 
        {
            "location": "/pages/links/link-domain/#retrieving-the-subdomain-assigned-to-your-app", 
            "text": "Go to the  Link Settings  page on the dashboard.  Scroll down to the  Link Domain  area.  Copy the value listed there.     Test environment domain  The assigned subdomain for your test environment is of the form  xxxx.test-app-link  and must be configured separately. Branch automatically handles HTTPS traffic for custom subdomains and root domains. Branch will acquire the necessary SSL certificate if you follow the simple setup instructions below. Branch will also automatically renew the certificates when needed.", 
            "title": "Retrieving the subdomain assigned to your app"
        }, 
        {
            "location": "/pages/links/link-domain/#changing-your-applink-subdomain", 
            "text": "You can brand your links with a custom subdomain like  you.app.link .    One change only  You can only change your app.link subdomain once. Keep in mind that if you change this and you have implemented  universal links  or  app links , you must update your implementation. The links on your old subdomain will no longer work.    Go to  Link Settings  in the dashboard.  Scroll to the  Link Domain  setting at the bottom.  Click  Change my app.link subdomain .  Choose a subdomain that matches your brand. You cannot choose one that is in use by someone else, and it cannot have special characters.   Press  Get .", 
            "title": "Changing your app.link subdomain"
        }, 
        {
            "location": "/pages/links/link-domain/#setting-a-custom-link-domain", 
            "text": "If you want to use a custom domain or subdomain for your Branch links instead of the  XXXX.app.link  domain, setting one up is simple.   Avoid switching later  We recommend that you choose one domain or subdomain to use with Branch and stick with it, as switching can cause significant problems with your existing links.    Updates to Universal   App Links configuration  If you enable (or change) your link domain/subdomain, you will need to make updates to your Universal Links (iOS) and App Links (Android) configuration. Review the  iOS  and  Android  integration guides.", 
            "title": "Setting a custom link domain"
        }, 
        {
            "location": "/pages/links/link-domain/#custom-subdomain-gobranchcom", 
            "text": "Do not use www  Some browsers have special rules for processing URLs beginning with  www . We strongly recommend you do not include a  www  prefix in your custom subdomain.    Create a CNAME for your subdomain and point it to  custom.bnc.lt  Go to  Link Settings  on the Branch dashboard, and find the  Link Domain  section.  Click  Use my own domain .  You should see a message telling you the status of your domain under the domain field. If you don't, please type your domain in again.   Click  Confirm .", 
            "title": "Custom SUBDOMAIN (go.branch.com)"
        }, 
        {
            "location": "/pages/links/link-domain/#custom-root-domain-branchcom", 
            "text": "Use this domain for Branch links only  Once you enable this root domain for Branch links, you will not be able to use it for hosting anything else. We recommend using a subdomain, or purchasing a new root domain for this purpose.  You cannot use your main website domain for hosting Branch links .    Go to  Link Settings  on the Branch dashboard, and find the  Link Domain  section.  Click  Use my own domain .   Enter your custom domain into the text box. Resolve any errors.   Work with your domain registrar to make the Branch-provided nameservers listed under the domain field authoritative for your domain.  Note that this means you cannot host anything else on this domain \u2014 only Branch links.    Click  Confirm .    Heads Up!   The nameservers in the above image are for example purposes only. The nameservers you use will be unique to your application.  If you are configuring the domain through AWS's Route 53, make sure you are editing the nameservers under the  \"Registered Domains\"  tab, and not the  \"Hosted zones\"  section.", 
            "title": "Custom ROOT domain (branch.com)"
        }, 
        {
            "location": "/pages/links/link-domain/#about-the-legacy-bnclt-domain", 
            "text": "The bnc.lt domain is no longer available for new apps. If you have existing links with this domain as the base, they will continue to function.", 
            "title": "About the legacy bnc.lt domain"
        }, 
        {
            "location": "/pages/links/create/", 
            "text": "Dashboard\n\n\nApp\n\n\nAPI", 
            "title": "Creating links"
        }, 
        {
            "location": "/pages/links/create/#dashboard", 
            "text": "", 
            "title": "Dashboard"
        }, 
        {
            "location": "/pages/links/create/#app", 
            "text": "", 
            "title": "App"
        }, 
        {
            "location": "/pages/links/create/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/pages/analytics/behavior/", 
            "text": "Analytical behavior\n\n\n\n\nWhenever a user \nclicks\n on a deep link and \nopens\n the app\n\n\nThis triggers either an \ninstall\n or an \nopen\n\n\ninstalls\n represent Branch recognizing the app_id and device_id for the first time\n\n\ninstalls\n represent new app users and the success rate of your Branch deep links\n\n\ninstalls\n do \nnot\n represent App Store downloads\n\n\nnon-Branch installs\n are installs outside of Branch deep link clicks\n\n\nopens\n are non-installs\n\n\nIf a user uninstalls and reinstalls the app, this will be an \nopen\n because Branch recognizes the device\n\n\nIf a user has the app and clicks a Branch deep link, this will be an \nopen\n because the user is not new\n\n\n\n\n\n\n\n\nDashboard pages\n\n\n\n\n\n\nQuick Links\n\n\n\n\n\n\nSources\n\n\n\n\n\n\nContent\n\n\n\n\nDashboard Content\n\n\nUpdates every 1.5 hours \n\n\nBased on the deep links which are shared (clicks which lead to open/installs)\n\n\nEach content must be meaningful unique\n\n\n$canonical_identifier\n\n\n$og_title\n\n\n$og_description\n\n\n$og_image_url\n\n\n\n\n\n\n\n\n\n\n\n\nLiveview", 
            "title": "Behavior"
        }, 
        {
            "location": "/pages/analytics/behavior/#analytical-behavior", 
            "text": "Whenever a user  clicks  on a deep link and  opens  the app  This triggers either an  install  or an  open  installs  represent Branch recognizing the app_id and device_id for the first time  installs  represent new app users and the success rate of your Branch deep links  installs  do  not  represent App Store downloads  non-Branch installs  are installs outside of Branch deep link clicks  opens  are non-installs  If a user uninstalls and reinstalls the app, this will be an  open  because Branch recognizes the device  If a user has the app and clicks a Branch deep link, this will be an  open  because the user is not new", 
            "title": "Analytical behavior"
        }, 
        {
            "location": "/pages/analytics/behavior/#dashboard-pages", 
            "text": "", 
            "title": "Dashboard pages"
        }, 
        {
            "location": "/pages/analytics/behavior/#quick-links", 
            "text": "", 
            "title": "Quick Links"
        }, 
        {
            "location": "/pages/analytics/behavior/#sources", 
            "text": "", 
            "title": "Sources"
        }, 
        {
            "location": "/pages/analytics/behavior/#content", 
            "text": "Dashboard Content  Updates every 1.5 hours   Based on the deep links which are shared (clicks which lead to open/installs)  Each content must be meaningful unique  $canonical_identifier  $og_title  $og_description  $og_image_url", 
            "title": "Content"
        }, 
        {
            "location": "/pages/analytics/behavior/#liveview", 
            "text": "", 
            "title": "Liveview"
        }, 
        {
            "location": "/pages/analytics/referrals/", 
            "text": "Implementing\n\n\n\n\n\n\nReferrer has his/her identity set.\n\n\n\n\n\n\nReferrer creates a deep link.\n\n\n\n\n\n\nReferrer shares the deep link.\n\n\n\n\n\n\nReferee clicks on the deep link.\n\n\n\n\n\n\nReferee has his/her identity set.\n\n\n\n\n\n\nReferee triggers a custom event.\n\n\n\n\n\n\nCatch the event in your Branch Rules Dashboard (\nhttps://dashboard.branch.io/referrals/rules\n) as a referral rule to assign referral points.\n\n\n\n\n\n\n\n\n\n\nTroubleshooting\n\n\n\u2013 The Referrer and Referee are connected by the deep link.\n\n\n\u2013 Referring points happen whenever the custom event occurs in the app which triggers the referral rule.\n\n\n\u2013 It is best to assign referring points on a custom event rather than Branch events (install and open) to prevent referral abuse.\n\n\n\u2013 Make sure you set the identity of both the referrer and referee to prevent anonymous users from showing up in your Branch Influencer's Dashboard (\nhttps://dashboard.branch.io/referrals/influencers\n)\n\n\n\u2013 Referrals are based on a session, not a device. If a user closes and opens the app before triggering the referral rule, then the referral points will not be delivered.\n\n\n\u2013 If your referrals are based on custom install event, then you will need to uninstall the app and simulate a Branch install to test referrals (\nhttps://dev.branch.io/getting-started/integration-testing/guide/ios/#use-debug-mode-to-simulate-fresh-installs\n)\n\n\n\n\nA rule with All acting users will trigger credits event if a referral did not happen. To only reward credits on a referral, use Referring users or Referred acting users.\n\n\n\n\n\n\n\n\nTracking referrals\n\n\n\u2013 Branch Influencer's Dashboard (\nhttps://dashboard.branch.io/referrals/influencers\n)\n\n\n\u2013 The Export Button in the Branch LiveView Dashboard (\nhttps://dashboard.branch.io/liveview/link_clicks\n)\n\n\n\u2013 Create a Webhook to send data to your server (\nhttps://dashboard.branch.io/webhook\n)\n\n\n\u2013 Request a whitelisting to our Data Export API (\nhttps://dev.branch.io/methods-endpoints/data-export-api/guide/\n)\n\n\n\n\n\n\nQuerying referrals\n\n\n\n\n\n\nQuery the events export the custom referral event that triggered the referral rule\n\n\n\n\n\n\nThe developer identity of this event is your referee\n\n\n\n\n\n\nThe session referring developer identity is your referrer", 
            "title": "Referrals"
        }, 
        {
            "location": "/pages/analytics/referrals/#implementing", 
            "text": "Referrer has his/her identity set.    Referrer creates a deep link.    Referrer shares the deep link.    Referee clicks on the deep link.    Referee has his/her identity set.    Referee triggers a custom event.    Catch the event in your Branch Rules Dashboard ( https://dashboard.branch.io/referrals/rules ) as a referral rule to assign referral points.", 
            "title": "Implementing"
        }, 
        {
            "location": "/pages/analytics/referrals/#troubleshooting", 
            "text": "\u2013 The Referrer and Referee are connected by the deep link.  \u2013 Referring points happen whenever the custom event occurs in the app which triggers the referral rule.  \u2013 It is best to assign referring points on a custom event rather than Branch events (install and open) to prevent referral abuse.  \u2013 Make sure you set the identity of both the referrer and referee to prevent anonymous users from showing up in your Branch Influencer's Dashboard ( https://dashboard.branch.io/referrals/influencers )  \u2013 Referrals are based on a session, not a device. If a user closes and opens the app before triggering the referral rule, then the referral points will not be delivered.  \u2013 If your referrals are based on custom install event, then you will need to uninstall the app and simulate a Branch install to test referrals ( https://dev.branch.io/getting-started/integration-testing/guide/ios/#use-debug-mode-to-simulate-fresh-installs )   A rule with All acting users will trigger credits event if a referral did not happen. To only reward credits on a referral, use Referring users or Referred acting users.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/analytics/referrals/#tracking-referrals", 
            "text": "\u2013 Branch Influencer's Dashboard ( https://dashboard.branch.io/referrals/influencers )  \u2013 The Export Button in the Branch LiveView Dashboard ( https://dashboard.branch.io/liveview/link_clicks )  \u2013 Create a Webhook to send data to your server ( https://dashboard.branch.io/webhook )  \u2013 Request a whitelisting to our Data Export API ( https://dev.branch.io/methods-endpoints/data-export-api/guide/ )", 
            "title": "Tracking referrals"
        }, 
        {
            "location": "/pages/analytics/referrals/#querying-referrals", 
            "text": "Query the events export the custom referral event that triggered the referral rule    The developer identity of this event is your referee    The session referring developer identity is your referrer", 
            "title": "Querying referrals"
        }, 
        {
            "location": "/pages/analytics/growth-attribution/", 
            "text": "", 
            "title": "Growth"
        }, 
        {
            "location": "/pages/analytics/user-value attribution/", 
            "text": "", 
            "title": "User Value"
        }, 
        {
            "location": "/pages/analytics/revenue-attribution/", 
            "text": "", 
            "title": "Revenue"
        }, 
        {
            "location": "/pages/web/deep-views/", 
            "text": "Overview\n\n\nA Deepview is a mobile web splash page, hosted by Branch, that gives a preview of the in-app content behind a given Branch link. When a visitor opens one of your Branch links and does not have your app installed, you can show them a Deepview instead of sending them directly to the App/Play Store.\n\n\nDeepviews are discoverable in all search portals (Google, Apple Spotlight, Bing, etc), opening up new mechanisms for people to find your app, and drive much higher conversions to install than sending visitors to the App/Play Store directly. Here's an example flow:\n\n\n\n\n\n\nIf you already have a mobile website\n\n\nThe \nWebsite to App Routing\n feature can be used to recreate the functionality of Deepviews using your own website. If you already host your own content previews, this is a good alternative!\n\n\n\n\n\n\nWarning\n\n\nFor Deepviews to function as intended, you should \nintegrate the Branch SDK\n into your app and \nconfigure deep link routing\n.\n\n\n\n\nSetup\n\n\nEnable Deepviews\n\n\n\n\nHead to the \nDeepviews configuration page\n on the Branch dashboard.\n\n\nDeepviews are configured separately for visitors on each platform (iOS, Android, and desktop). Select the platforms you want and click \nEnable\n.\n\n\n\n\n\n\n\n\nWarning\n\n\nIf you enable desktop Deepviews, they will override any \nText-Me-The-App\n page you have configured.\n\n\n\n\n\n\nChanging the app icon\n\n\nIf we pulled the wrong app icon, you can upload a new one in the \nSocial Media Display Customization\n section of the \ndashboard Settings\n.\n\n\n\n\nView Analytics\n\n\nBranch lets you track the flow of users through Deepviews. You can find this information on the \nsummary page\n of the Branch dashboard.\n\n\n\n\nThere are various metrics to understand when deep linking from your mobile website.\n\n\n\n\nViews:\n a user viewed the mobile site.\n\n\nClicks:\n a user clicked on the Deepview CTA\n\n\nInstalls:\n a user installed the app for the first time\n\n\nUpgrades:\n a user re-opened or upgraded the app from a previous version\n\n\n\n\nOnly users who do not have the app will go through this flow. You can view the total counts and conversion rate from each step on this chart.\n\n\nAdvanced\n\n\nCustomizing Deepviews\n\n\nThe default Deepview template simply displays the content from three of the link's \ncontrol parameters\n. You can specify the content of these parameters when creating your link to control what will display in that link\u2019s Deepview. If nothing is set for a particular link, we will gracefully fall back to the OG values set for your entire app in \nSettings \n Link Settings \n Social Media Display Customization.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n$og_title\n\n\nThe title you'd like to appear on the deepview\n\n\n\n\n\n\n$og_description\n\n\nThe description you'd like to appear on the deepview\n\n\n\n\n\n\n$og_image_url\n\n\nThe URL for the image you'd like to appear on the deepview\n\n\n\n\n\n\n\n\n\n\nHosting your own OG tags\n\n\nIf you want to use OG tags you host elsewhere, leave these parameters empty and specify a \n$desktop_url\n control parameter when you create the link. Branch will perform a one-time scrape to populate the Deepview using the OG tags from the URL you specify.\n\n\n\n\nIf you're creating a link by appending query parameters, just append the parameters to the URL. Please make sure to URL encode everything, lest the link will break.\n\n\nhttps://[branchsubdomain]?%24og_title=MyApp%20is%20disrupting%20apps\n$og_image_url=http%3A%2F%2Fmyapp.com%2Fimage.png\n\n\n\n\n\nWhen you create links via a mobile SDK, you simply need to set the OG tag parameters.\n\n\n\n\n\nBranchUniversalObject\n \n*\nbranchUniversalObject\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nitem/12345\n];\n\n\n// Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \n@\nMy Content Title\n;\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \n@\nMy Content Description\n;\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \n@\nhttps://example.com/mycontent-12345.png\n;\n\n\n\n// Add any additional custom OG tags here\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\n$og_video\n \nvalue\n:\n@\nhttp://mysite/video.mpg\n];\n\n\n\n\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/12345\n)\n\n\n// Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \nMy Content Title\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \nMy Content Description\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \nhttps://example.com/mycontent-12345.png\n\n\n\n// Add any additional custom OG tags here\n\n\nbranchUniversalObject\n.\naddMetadataKey\n(\n$og_video\n,\n \nvalue\n:\n \nhttp://mysite/video.mpg\n)\n\n\n\n\n\n\n\n\n\n \nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n                \n.\nsetCanonicalIdentifier\n(\nitem/12345\n)\n\n\n// Facebook OG tags -- This will overwrite any defaults you have set on the Branch Dashboard\n\n                \n.\nsetTitle\n(\nMy Content Title\n)\n\n                \n.\nsetContentDescription\n(\nMy Content Description\n)\n\n                \n.\nsetContentImageUrl\n(\nhttps://example.com/mycontent-12345.png\n)\n\n\n\n// Add any additional custom OG tags here\n\n                \n.\naddContentMetadata\n(\n$og_video\n,\n \nhttp://mysite/video.mpg\n);\n\n\n\n\n\n\nEdit the Title, Description and Image URL in the \nSocial Media\n section.\n\n\n\n\nNote:\n the \nDeep Link\n section accepts most link control parameters, but \n$og_title\n, \n$og_description\n and \n$og_image_url\n \ncannot\n be specified there.\n\n\nEnable per-link Deepviews\n\n\nIf you don't want to enable Deepviews globally, you can do it for each platform on a per link basis by inserting custom link control parameters \nlink control parameters\n.\n\n\nEnable Desktop Deepviews by appending query parameters:\n\n\nhttps://[branchsubdomain]?%24desktop_deepview=default_template\n%24ios_deepview=default_template\n\n\n\n\n\nEnable iOS and Android Deepviews through the SDK:\n\n\n\n\n\nBranchLinkProperties\n \n*\nlinkProperties\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlinkProperties\n.\nfeature\n \n=\n \n@\nsharing\n;\n\n\nlinkProperties\n.\nchannel\n \n=\n \n@\nfacebook\n;\n\n\n[\nlinkProperties\n \naddControlParam\n:\n@\n$ios_deepview\n \nwithValue\n:\n@\ndefault_template\n];\n\n\n[\nlinkProperties\n \naddControlParam\n:\n@\n$android_deepview\n \nwithValue\n:\n@\ndefault_template\n];\n\n\n\n\nlet\n \nlinkProperties\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlinkProperties\n.\nfeature\n \n=\n \nsharing\n\n\nlinkProperties\n.\nchannel\n \n=\n \nfacebook\n\n\nlinkProperties\n.\naddControlParam\n(\n$ios_deepview\n,\n \nwithValue\n:\n \ndefault_template\n)\n\n\nlinkProperties\n.\naddControlParam\n(\n$android_deepview\n,\n \nwithValue\n:\n \ndefault_template\n)\n\n\n\n\n\n\n\n\n\nLinkProperties linkProperties = new LinkProperties()\n               .setChannel(\nfacebook\n)\n               .setFeature(\nsharing\n)\n               .addControlParameter(\n$ios_deepview\n, \ndefault_template\n)\n               .addControlParameter(\n$android_deepview\n, \ndefault_template\n);\n\n\n\n\n\nFinally, enable Deepviews for an individual link on the \nMarketing dashboard\n by selecting Deepviews as a redirect option under the second page.\n\n\n\n\nDisable per-link Deepviews\n\n\nIf you've enabled Deepviews globally, it's likely that you'll want to disable them now and again for specific use cases. To do so, just follow the instructions for \nenabling Deepviews for one link\n and set one or more of the key values to \nfalse\n.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n$ios_deepview\n\n\nfalse\n\n\n\n\n\n\n$android_deepview\n\n\nfalse\n\n\n\n\n\n\n$desktop_deepview\n\n\nfalse\n\n\n\n\n\n\n\n\nWhen creating Quick Links on the Branch dashboard\n\n\nYou can disable Deepviews for an individual link on the \nMarketing dashboard\n by selecting Deepviews as a redirect option in Configure Options \n Redirects and setting it to false.\n\n\n\n\nCreate New Deepview Templates\n\n\nYou can create new Deepview templates using the \nDeepviews configuration page\n on the Branch dashboard, either by duplicating the default Branch Public Template, or by creating a new one from scratch. New Deepview templates are shared between all platforms (iOS, Android, and desktop), and cannot be deleted after creation.\n\n\n\n\nThe Deepview editing screen contains two tabs: \nBasic\n and \nEditor\n.\n\n\nBasic\n\n\nThe Basic tab displays your new template, and allows you to modify the default fallback OG tags used if none are specified for a link.\n\n\n\n\nDeepview Settings\n\n\n\n\n\n\n\n\nSetting\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nTitle\n\n\nInternal name for your reference\n\n\n\n\n\n\nKey\n\n\nThe value that you will reference when creating a link. E.g., \n$ios_deepview: [key]\n\n\n\n\n\n\n\n\nApp Settings\n\n\n\n\nThese fields are duplicates of the \nSocial Media\n section of your app's \nmain link settings page\n. Any updates will be applied in both locations.\n\n\n\n\n\n\n\n\n\n\nSetting\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nOG Title\n\n\nDefault value used if \n$og_title\n is not specified for a link.\n\n\n\n\n\n\nOG Description\n\n\nDefault value used if \n$og_description\n is not specified for a link.\n\n\n\n\n\n\nOG Image Url\n\n\nDefault value used if \n$og_image_url\n is not specified for a link.\n\n\n\n\n\n\n\n\nEdit Deepview Templates\n\n\nYou can use the Deepview editor to edit created templates. You cannot edit pre-created templates. The Editor tab allows you to edit the raw HTML and CSS for your template. The rendered template will update as you modify the markup.\n\n\n\n\n\n\nJavascript not allowed\n\n\nBefore rendering the template, we sanitize the markup of Javascript for security reasons. This includes script tags and event attributes on tags.\n\n\n\n\nInject Other Data Into Deepviews\n\n\nBy customizing your Deepview template, you have the ability to pass through other parameters from your link's \ndata dictionary\n.\n\n\nHere's a full list of liquid available tags:\n\n\napp\n\n\nThis is the App object, which contains app data not specific to any link. This will allow you to surface information like your app name or other properties. You can surface this object in your Deepview like so:\n\n\n{{\napp\n}}\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\napp.branch_key\n\n\nYour Branch key from \nSettings\n.\n\n\n\n\n\n\napp.name\n\n\nThe name of your app from \nSettings\n.\n\n\n\n\n\n\napp.og_title\n\n\nThe \nLink Title\n set in the \nSocial Media Display Customization\n section of your app's \nLink Settings\n.\n\n\n\n\n\n\napp.og_description\n\n\nThe \nDescription\n set in the \nSocial Media Display Customization\n section of your app's \nLink Settings\n.\n\n\n\n\n\n\napp.og_image_url\n\n\nThe \nThumbnail Image\n set in the \nSocial Media Display Customization\n section of your app's \nLink Settings\n.\n\n\n\n\n\n\n\n\n\n\nIf you want to show your app's name inside a Deepview, you would expose it like so: \nh1\nGet {% raw %}{{app.name}}{% endraw %}\n/h1\n\n\n\n\nlink data\n\n\nLink Object, which contains all of your link's parameters, including your deep link values from the data dictionary. See the \nConfiguring Links\n page for more information. You can surface this object in your Deepview like so:\n\n\n{{\nlink_data\n}}\n\n\n\n\n\n\n\nIf you want to expose a key value pair of \n'welcome_message' : 'Welcome to my App'\n, you would do the following: \nh1\n{% raw %}{{link_data.welcome_message}}{% endraw %}\n/h1\n, and this would render \nWelcome to my App\n.\n\n\n\n\naction\n\n\nThe URL of the Branch link itself. If you create a new call to action in your Deepview, use this. You can surface this object in your Deepview like so:\n\n\n{{\naction\n}}\n\n\n\n\n\n\n\nCreate a new call to action link: \na href=\"{% raw %}{{action}}{% endraw %}\"\nClick\n/a\n.\n\n\n\n\nGlossary\n\n\nActive Deepviews\n\n\nActive deepviews should only show when the app is \nnot\n installed (or when direct deep linking doesn't work like in the Facebook webview), and pause on the deepview page. These let the user preview the content, ultimately deciding if they want to install the app. The user must click the call-to-action of \nGet The App\n in order to be sent to the appropriate App or Play Store page.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nDefault Template\n\n\n\n\n\n\n\n\n\n\n$ios_deepview\n\n\nThe name of the template to use for iOS.\n\n\ndefault_template\n\n\n\n\n\n\n$android_deepview\n\n\nThe name of the template to use for Android.\n\n\ndefault_template\n\n\n\n\n\n\n$desktop_deepview\n\n\nThe name of the template to use for the desktop.\n\n\ndefault_template\n\n\n\n\n\n\n\n\nPassive Deepviews\n\n\nPassive deepviews should also only appear when the app is \nnot\n installed, but instead of pausing on the deepview page, they will attempt to redirect to the App/Play Store immediately without the user taking action. These should be used when you don't want a blank white screen to be left in a browser after the user clicks a link to go install your app. Note that these are automatically enabled in Safari iOS 10.3 and Facebook iOS webviews if you're attempting to redirect to your Store page.\n\n\nTo disable passive deepviews, simply set the value to \nfalse\n in the link data.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\n$ios_passive_deepview\n\n\nThe name of the template to use for iOS.\n\n\ndefault_template\n\n\n\n\n\n\n$android_passive_deepview\n\n\nThe name of the template to use for Android.\n\n\ndefault_template\n\n\n\n\n\n\n\n\nIf you're creating a link by appending query parameters, you simply need to append the parameters to the URL. Please make sure to URL encode everything, lest the link will break.", 
            "title": "Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#overview", 
            "text": "A Deepview is a mobile web splash page, hosted by Branch, that gives a preview of the in-app content behind a given Branch link. When a visitor opens one of your Branch links and does not have your app installed, you can show them a Deepview instead of sending them directly to the App/Play Store.  Deepviews are discoverable in all search portals (Google, Apple Spotlight, Bing, etc), opening up new mechanisms for people to find your app, and drive much higher conversions to install than sending visitors to the App/Play Store directly. Here's an example flow:    If you already have a mobile website  The  Website to App Routing  feature can be used to recreate the functionality of Deepviews using your own website. If you already host your own content previews, this is a good alternative!    Warning  For Deepviews to function as intended, you should  integrate the Branch SDK  into your app and  configure deep link routing .", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/web/deep-views/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/web/deep-views/#enable-deepviews", 
            "text": "Head to the  Deepviews configuration page  on the Branch dashboard.  Deepviews are configured separately for visitors on each platform (iOS, Android, and desktop). Select the platforms you want and click  Enable .     Warning  If you enable desktop Deepviews, they will override any  Text-Me-The-App  page you have configured.    Changing the app icon  If we pulled the wrong app icon, you can upload a new one in the  Social Media Display Customization  section of the  dashboard Settings .", 
            "title": "Enable Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#view-analytics", 
            "text": "Branch lets you track the flow of users through Deepviews. You can find this information on the  summary page  of the Branch dashboard.   There are various metrics to understand when deep linking from your mobile website.   Views:  a user viewed the mobile site.  Clicks:  a user clicked on the Deepview CTA  Installs:  a user installed the app for the first time  Upgrades:  a user re-opened or upgraded the app from a previous version   Only users who do not have the app will go through this flow. You can view the total counts and conversion rate from each step on this chart.", 
            "title": "View Analytics"
        }, 
        {
            "location": "/pages/web/deep-views/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/web/deep-views/#customizing-deepviews", 
            "text": "The default Deepview template simply displays the content from three of the link's  control parameters . You can specify the content of these parameters when creating your link to control what will display in that link\u2019s Deepview. If nothing is set for a particular link, we will gracefully fall back to the OG values set for your entire app in  Settings   Link Settings   Social Media Display Customization.     Key  Value      $og_title  The title you'd like to appear on the deepview    $og_description  The description you'd like to appear on the deepview    $og_image_url  The URL for the image you'd like to appear on the deepview      Hosting your own OG tags  If you want to use OG tags you host elsewhere, leave these parameters empty and specify a  $desktop_url  control parameter when you create the link. Branch will perform a one-time scrape to populate the Deepview using the OG tags from the URL you specify.   If you're creating a link by appending query parameters, just append the parameters to the URL. Please make sure to URL encode everything, lest the link will break.  https://[branchsubdomain]?%24og_title=MyApp%20is%20disrupting%20apps $og_image_url=http%3A%2F%2Fmyapp.com%2Fimage.png   When you create links via a mobile SDK, you simply need to set the OG tag parameters.   BranchUniversalObject   * branchUniversalObject   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ item/12345 ];  // Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard  branchUniversalObject . title   =   @ My Content Title ;  branchUniversalObject . contentDescription   =   @ My Content Description ;  branchUniversalObject . imageUrl   =   @ https://example.com/mycontent-12345.png ;  // Add any additional custom OG tags here  [ branchUniversalObject   addMetadataKey : @ $og_video   value : @ http://mysite/video.mpg ];   let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   item/12345 )  // Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard  branchUniversalObject . title   =   My Content Title  branchUniversalObject . contentDescription   =   My Content Description  branchUniversalObject . imageUrl   =   https://example.com/mycontent-12345.png  // Add any additional custom OG tags here  branchUniversalObject . addMetadataKey ( $og_video ,   value :   http://mysite/video.mpg )       BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n                 . setCanonicalIdentifier ( item/12345 )  // Facebook OG tags -- This will overwrite any defaults you have set on the Branch Dashboard \n                 . setTitle ( My Content Title ) \n                 . setContentDescription ( My Content Description ) \n                 . setContentImageUrl ( https://example.com/mycontent-12345.png )  // Add any additional custom OG tags here \n                 . addContentMetadata ( $og_video ,   http://mysite/video.mpg );    Edit the Title, Description and Image URL in the  Social Media  section.   Note:  the  Deep Link  section accepts most link control parameters, but  $og_title ,  $og_description  and  $og_image_url   cannot  be specified there.", 
            "title": "Customizing Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#enable-per-link-deepviews", 
            "text": "If you don't want to enable Deepviews globally, you can do it for each platform on a per link basis by inserting custom link control parameters  link control parameters .  Enable Desktop Deepviews by appending query parameters:  https://[branchsubdomain]?%24desktop_deepview=default_template %24ios_deepview=default_template   Enable iOS and Android Deepviews through the SDK:   BranchLinkProperties   * linkProperties   =   [[ BranchLinkProperties   alloc ]   init ];  linkProperties . feature   =   @ sharing ;  linkProperties . channel   =   @ facebook ;  [ linkProperties   addControlParam : @ $ios_deepview   withValue : @ default_template ];  [ linkProperties   addControlParam : @ $android_deepview   withValue : @ default_template ];   let   linkProperties :   BranchLinkProperties   =   BranchLinkProperties ()  linkProperties . feature   =   sharing  linkProperties . channel   =   facebook  linkProperties . addControlParam ( $ios_deepview ,   withValue :   default_template )  linkProperties . addControlParam ( $android_deepview ,   withValue :   default_template )     LinkProperties linkProperties = new LinkProperties()\n               .setChannel( facebook )\n               .setFeature( sharing )\n               .addControlParameter( $ios_deepview ,  default_template )\n               .addControlParameter( $android_deepview ,  default_template );   Finally, enable Deepviews for an individual link on the  Marketing dashboard  by selecting Deepviews as a redirect option under the second page.", 
            "title": "Enable per-link Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#disable-per-link-deepviews", 
            "text": "If you've enabled Deepviews globally, it's likely that you'll want to disable them now and again for specific use cases. To do so, just follow the instructions for  enabling Deepviews for one link  and set one or more of the key values to  false .     Key  Value      $ios_deepview  false    $android_deepview  false    $desktop_deepview  false     When creating Quick Links on the Branch dashboard  You can disable Deepviews for an individual link on the  Marketing dashboard  by selecting Deepviews as a redirect option in Configure Options   Redirects and setting it to false.", 
            "title": "Disable per-link Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#create-new-deepview-templates", 
            "text": "You can create new Deepview templates using the  Deepviews configuration page  on the Branch dashboard, either by duplicating the default Branch Public Template, or by creating a new one from scratch. New Deepview templates are shared between all platforms (iOS, Android, and desktop), and cannot be deleted after creation.   The Deepview editing screen contains two tabs:  Basic  and  Editor .  Basic  The Basic tab displays your new template, and allows you to modify the default fallback OG tags used if none are specified for a link.   Deepview Settings     Setting  Usage      Title  Internal name for your reference    Key  The value that you will reference when creating a link. E.g.,  $ios_deepview: [key]     App Settings   These fields are duplicates of the  Social Media  section of your app's  main link settings page . Any updates will be applied in both locations.      Setting  Usage      OG Title  Default value used if  $og_title  is not specified for a link.    OG Description  Default value used if  $og_description  is not specified for a link.    OG Image Url  Default value used if  $og_image_url  is not specified for a link.", 
            "title": "Create New Deepview Templates"
        }, 
        {
            "location": "/pages/web/deep-views/#edit-deepview-templates", 
            "text": "You can use the Deepview editor to edit created templates. You cannot edit pre-created templates. The Editor tab allows you to edit the raw HTML and CSS for your template. The rendered template will update as you modify the markup.    Javascript not allowed  Before rendering the template, we sanitize the markup of Javascript for security reasons. This includes script tags and event attributes on tags.", 
            "title": "Edit Deepview Templates"
        }, 
        {
            "location": "/pages/web/deep-views/#inject-other-data-into-deepviews", 
            "text": "By customizing your Deepview template, you have the ability to pass through other parameters from your link's  data dictionary .  Here's a full list of liquid available tags:  app  This is the App object, which contains app data not specific to any link. This will allow you to surface information like your app name or other properties. You can surface this object in your Deepview like so:  {{ app }}      Key  Usage      app.branch_key  Your Branch key from  Settings .    app.name  The name of your app from  Settings .    app.og_title  The  Link Title  set in the  Social Media Display Customization  section of your app's  Link Settings .    app.og_description  The  Description  set in the  Social Media Display Customization  section of your app's  Link Settings .    app.og_image_url  The  Thumbnail Image  set in the  Social Media Display Customization  section of your app's  Link Settings .      If you want to show your app's name inside a Deepview, you would expose it like so:  h1 Get {% raw %}{{app.name}}{% endraw %} /h1   link data  Link Object, which contains all of your link's parameters, including your deep link values from the data dictionary. See the  Configuring Links  page for more information. You can surface this object in your Deepview like so:  {{ link_data }}    If you want to expose a key value pair of  'welcome_message' : 'Welcome to my App' , you would do the following:  h1 {% raw %}{{link_data.welcome_message}}{% endraw %} /h1 , and this would render  Welcome to my App .   action  The URL of the Branch link itself. If you create a new call to action in your Deepview, use this. You can surface this object in your Deepview like so:  {{ action }}    Create a new call to action link:  a href=\"{% raw %}{{action}}{% endraw %}\" Click /a .", 
            "title": "Inject Other Data Into Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#glossary", 
            "text": "", 
            "title": "Glossary"
        }, 
        {
            "location": "/pages/web/deep-views/#active-deepviews", 
            "text": "Active deepviews should only show when the app is  not  installed (or when direct deep linking doesn't work like in the Facebook webview), and pause on the deepview page. These let the user preview the content, ultimately deciding if they want to install the app. The user must click the call-to-action of  Get The App  in order to be sent to the appropriate App or Play Store page.     Key  Value  Default Template      $ios_deepview  The name of the template to use for iOS.  default_template    $android_deepview  The name of the template to use for Android.  default_template    $desktop_deepview  The name of the template to use for the desktop.  default_template", 
            "title": "Active Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#passive-deepviews", 
            "text": "Passive deepviews should also only appear when the app is  not  installed, but instead of pausing on the deepview page, they will attempt to redirect to the App/Play Store immediately without the user taking action. These should be used when you don't want a blank white screen to be left in a browser after the user clicks a link to go install your app. Note that these are automatically enabled in Safari iOS 10.3 and Facebook iOS webviews if you're attempting to redirect to your Store page.  To disable passive deepviews, simply set the value to  false  in the link data.     Key  Value  Default      $ios_passive_deepview  The name of the template to use for iOS.  default_template    $android_passive_deepview  The name of the template to use for Android.  default_template     If you're creating a link by appending query parameters, you simply need to append the parameters to the URL. Please make sure to URL encode everything, lest the link will break.", 
            "title": "Passive Deepviews"
        }, 
        {
            "location": "/pages/web/journeys/", 
            "text": "", 
            "title": "Journeys App Banners"
        }, 
        {
            "location": "/pages/web/text-me-the-app/", 
            "text": "Overview\n\n\nWhen users click your links on desktop, they have the option to text themselves a link to download your app. We provide this by default on every Branch link, but you can also create your own fully-branded Text Me The App page.\n\n\n\n\nLeft: Branch default. Right: a customized version.\n\n\nThis document will cover how to create a custom Text Me The App page, as well as a general FAQ for this product.\n\n\nSetup\n\n\nIf you don't want to use Branch's default Text Me The App Page or show a desktop deepview, follow these instructions. This will let you customize a Text Me The App page using Branch.\n\n\nSet Destination URL\n\n\n\n\nVisit the \nDesktop SMS\n page on the Branch dashboard.\n\n\nSelect \nCustom Landing Page with SMS\n, after you toggle to \nOn\n.\n\n\nEnter the destination URL.\n\n\n\n\n\n\n\n\nMake sure you can access this page\n\n\nBecause you will be making changes to this URL, be sure you have access to the page and can make changes to its HTML.\n\n\n\n\nInsert SendSMS() snippet into your page\n\n\nWhen you have set your destination URL from the previous step, go to that page and edit the HTML. Paste the following code snippet into it; this is a fully-functional web page that you can use as a template for your Text Me The App page.\n\n\n!DOCTYPE HTML\n\n\nhtml\n \nlang\n=\nen-US\n\n\nhead\n\n\nmeta\n \ncharset\n=\nUTF-8\n\n    \nscript\n \ntype\n=\ntext/javascript\n\n        \n(\nfunction\n(\nb\n,\nr\n,\na\n,\nn\n,\nc\n,\nh\n,\n_\n,\ns\n,\nd\n,\nk\n){\nif\n(\n!\nb\n[\nn\n]\n||!\nb\n[\nn\n].\n_q\n){\nfor\n(;\ns\n_\n.\nlength\n;)\nc\n(\nh\n,\n_\n[\ns\n++\n]);\nd\n=\nr\n.\ncreateElement\n(\na\n);\nd\n.\nasync\n=\n1\n;\nd\n.\nsrc\n=\nhttps://cdn.branch.io/branch-latest.min.js\n;\nk\n=\nr\n.\ngetElementsByTagName\n(\na\n)[\n0\n];\nk\n.\nparentNode\n.\ninsertBefore\n(\nd\n,\nk\n);\nb\n[\nn\n]\n=\nh\n}})(\nwindow\n,\ndocument\n,\nscript\n,\nbranch\n,\nfunction\n(\nb\n,\nr\n){\nb\n[\nr\n]\n=\nfunction\n(){\nb\n.\n_q\n.\npush\n([\nr\n,\narguments\n])}},{\n_q\n:\n[],\n_v\n:\n1\n},\naddListener applyCode banner closeBanner creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode\n.\nsplit\n(\n \n),\n \n0\n);\n\n\n        \nbranch\n.\ninit\n(\nYOUR-BRANCH-KEY\n);\n\n            \nfunction\n \nsendSMS\n(\nform\n)\n \n{\n\n                \nvar\n \nphone\n \n=\n \nform\n.\nphone\n.\nvalue\n;\n\n                \nvar\n \nlinkData\n \n=\n \n{\n\n                    \ntags\n:\n \n[],\n\n                    \nchannel\n:\n \nWebsite\n,\n\n                    \nfeature\n:\n \nTextMeTheApp\n,\n\n                    \ndata\n:\n \n{\n\n                        \nfoo\n:\n \nbar\n\n                    \n}\n\n                \n};\n\n                \nvar\n \noptions\n \n=\n \n{};\n\n                \nvar\n \ncallback\n \n=\n \nfunction\n(\nerr\n,\n \nresult\n)\n \n{\n\n                    \nif\n \n(\nerr\n)\n \n{\n\n                        \nalert\n(\nSorry, something went wrong.\n);\n\n                    \n}\n\n                    \nelse\n \n{\n\n                        \nalert\n(\nSMS sent!\n);\n\n                    \n}\n\n                \n};\n\n                \nbranch\n.\nsendSMS\n(\nphone\n,\n \nlinkData\n,\n \noptions\n,\n \ncallback\n);\n\n                \nform\n.\nphone\n.\nvalue\n \n=\n \n;\n\n            \n}\n\n    \n/\nscript\n\n\n/\nhead\n\n\nbody\n\n        Send SMS\n        \nform\n \nonsubmit\n=\nsendSMS(this); return false;\n\n            \ninput\n \nid\n=\nphone\n \nname\n=\nphone\n \ntype\n=\ntel\n \nplaceholder\n=\n(650) 123-4567\n \n/\n\n            \nbr\n/\n\n            \ninput\n \ntype\n=\nsubmit\n/\n\n        \n/\nform\n\n    \n/\nbody\n\n\n/\nhtml\n\n\n\n\n\nAnd that's it. From here, you can customize the HTML and CSS, and Branch will take care of the rest. If you want to further customize the page or SMS message itself, read further.\n\n\nAdvanced\n\n\nUse your own SMS service\n\n\nBranch uses Twilio to provide your users the ability to text themselves the app for free, but you can roll your own SMS service by using the following basic logic:\n\n\n\n\nDoes \n~referring_link\n exist? (a.k.a. did the user end up on this Text Me The App page because of a Branch link?) If so, use this link when sending the SMS.\n\n\nIf not (\n~referring_link\n is null), generate a new Branch link by making a call to the Web SDK's \nlink()\n method. Use this link when sending the SMS.\n\n\n\n\nThe \n~referring_link\n parameter is returned in the Web SDK's init() callback, buried in the referring link data. See the code below:\n\n\nbranch.init('YOUR-BRANCH-KEY', function(err, data) {\n    if (data.data['~referring_link']) {\n        console.log(\"data.data['~referring_link']:\", data.data['~referring_link']);\n    }\n});\n\n\nUse a custom form with SendSMS()\n\n\nIf you have an existing form for users to input their phone number, you can put our Text Me The App behind it. Add the following code somewhere inside the \nhead\n/head\n tags on your website.\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\nfunction\n \nsendSMS\n(\nform\n)\n \n{\n\n  \nbranch\n.\nsendSMS\n(\n\n    \nphone\n: \nform.phone.text\n,\n\n    \n{\n\n      \nchannel\n:\n \nWebsite\n,\n\n      \nfeature\n:\n \nText-Me-The-App\n,\n\n      \ndata\n:\n \n{\n\n        \nfoo\n:\n \nbar\n\n      \n}\n\n    \n},\n\n    \n{\n \nmake_new_link\n: \nfalse\n \n},\n \n// Default: false. If set to true, sendSMS will generate a new link even if one already exists.\n\n    \nfunction\n(\nerr\n)\n \n{\n \nconsole\n.\nlog\n(\nerr\n);\n \n}\n\n  \n}\n\n\n});\n\n\n/script\n\n\n\n\n\nCall sendSMS when someone enters something into your form.\n\n\nCustomize SMS message content\n\n\nThe default text for SMS messages is \"Click here to download [App Name] {{ link }}\".\n\n\nIf you want to customize this, Branch allows you to set a default for all messages, or customize the message for each link.\n\n\nCustomize all messages\n\n\nYou can create your own custom default message that will be sent if the specific link someone clicks doesn't have a customized message itself. Navigate back to the Desktop SMS page on the \nBranch dashboard\n. You should see the following section below.\n\n\n\n\nEditing this field will modify \nall\n SMS messages sent.\n\n\nCustom link-specific messages\n\n\nIf you don't want to edit the global SMS text, you can define a special SMS message for each individual link. Whether you want to switch the language of a message for a different region or include device specific date, you can specify the message in the \nDeep Link Data\n section at the bottom of the link editing screen.\n\n\n\n\nUse the \n$custom_sms_text\n parameter and then enter your custom message in the value section. Make sure to include the \n{{ link }}\n tag in your custom message! Read the following scenario below to see this in action.\n\n\nThe developer of FlowerPower wants to customize the SMS messages based on the country of the recipient. For each Branch link, they would specify in the deep link data a different custom message.\n\n\nFor ads in France:\n\nCliquez pour t\u00e9l\u00e9charger FlowerPower ici {{ link }}\n\n\nFor ads in Spain:\n\nHaz click aqu\u00ed para descargar FlowerPower {{ link }}\n\n\nFor ads in Germany:\n\nKlicken Sie auf das FlowerPower hier herunterladen {{ link }}\n\n\nUse liquid tags to further customize messages\n\n\nYou can access almost any value of your link's parameters by using liquid tags. The customization options are only limited to your imagination.\n\n\n\n\nThe tag \n{{ link }}\n is replaced with your Branch link\n\n\n{{ link.channel }}\n and \n{{ link.campaign }}\n output the channel and campaign, if these were set when creating the link.\n\n\n{{ link.data.key }}\n will output a parameter of your link's data dictionary, where \nkey\n is the name of the parameter\n\n\n\n\nHere's an example to illustrate this scenario.\n\n\nDmitri is creating Branch links to deep link to each of the different flowers in his app FlowerPower. He creates each link with a key/value pair of the key \nflower\n and the flower name, e.g. \nFlower : Rose\n, \nFlower : Tulip\n. He wants to customize his SMS messages based on name of the flower, so he sets his custom link messages as:\n\n\n{{ link.data.flower }}\ns on the mind? Click here to buy some for your home! \n{{ link }}\n\n\n\n\nGlossary\n\n\nSendSMS() parameters\n\n\nThe \nsendSMS()\n method requires a phone number and \nlink parameters\n. You may optionally specify configuration options and a callback.\n\n\nbranch\n.\nsendSMS\n(\n\n    \nphone\n,\n\n    \nlinkData\n,\n\n    \noptions\n,\n\n    \ncallback\n \n(\nerr\n,\n \ndata\n)\n\n\n);\n\n\n\n\n\nYour call to this method, once filled in with the user's phone number, could look like the following:\n\n\nbranch\n.\nsendSMS\n(\n\n    \nphone\n:\n \n9999999999\n,\n\n    \n{\n\n        \ntags\n:\n \n[\ntag1\n,\n \ntag2\n],\n\n        \nchannel\n:\n \nfacebook\n,\n\n        \nfeature\n:\n \ndashboard\n,\n\n        \nstage\n:\n \nnew user\n,\n\n        \ndata\n:\n \n{\n\n            \nfoo\n:\n \nbar\n\n        \n}\n\n    \n},\n\n    \n{\n \nmake_new_link\n:\n \nfalse\n \n},\n \n// Default: false. If set to true, sendSMS will generate a new link even if one already exists.\n\n    \nfunction\n(\nerr\n)\n \n{\n \nconsole\n.\nlog\n(\nerr\n);\n \n}\n\n\n});\n\n\n\n\n\nSetting default replacement values for liquid tags\n\n\nIf a specific tag isn't always going to be filled, you can use a \n|\n character to specify a default to fallback on if the tag is missing from your link dictionary.\n\n\nE.g. \n{{ link.data.author | default:\"Alex\" }}\n\n\nIf the \nlink.data.author\n information isn't found, the tag will just be replaced with \nAlex\n instead of being replaced by an empty string.\n\n\nFAQ\n\n\nWhat are the SMS rate limits?\n\n\nWe enforce the following rate limits when sending SMS through Branch:\n\n\n1. 5 texts to the same number within an hour.\n1. 100 texts from the same IP within an hour.\n\n\n\n\n\nCan I use this service for international phone numbers?\n\n\nYes. Branch uses Twilio to send SMS messages, which means SMS will be delivered all around the world.\n\n\nI've sent myself multiple texts just now and only received the first few, what's going on?\n\n\nThis occurs when a carrier filters you SMS out due to spam. We try our hardest to rate limit a specific user, however, if bypassed, carriers may block your SMS. The reason is that carriers will agressively block content if it's similar and repeatedly sent to the same number. The solution is to wait 24-48 hours.\n\n\nHow come my (non US) phone number isn't working?\n\n\nWith full numbers, you are required to use \"+\" and the country code. If you know your users are only in a certain country, you can automatically prepend \"+\" and the country code so that they only need to enter their regular number. To do this, you must \nconfigure a custom url\n and complete subsequent steps to create a custom text-me-the-app page. Then, you can alter the code snippet in \nstep 2\n with the following:\n\n\n    \nvar\n \nphone\n \n=\n \n+91\n \n+\n \nform\n.\nphone\n.\nvalue\n;\n\n\n\n\n\nIn the example above, \"+91\" is the code for the country your users are based in.\n\n\nWhy have the SMS links sent from Text Me The App expired?\n\n\nA: All links links generated from the Text Me the App feature will expire after 7 days.", 
            "title": "Text Me The App"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#overview", 
            "text": "When users click your links on desktop, they have the option to text themselves a link to download your app. We provide this by default on every Branch link, but you can also create your own fully-branded Text Me The App page.   Left: Branch default. Right: a customized version.  This document will cover how to create a custom Text Me The App page, as well as a general FAQ for this product.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#setup", 
            "text": "If you don't want to use Branch's default Text Me The App Page or show a desktop deepview, follow these instructions. This will let you customize a Text Me The App page using Branch.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#set-destination-url", 
            "text": "Visit the  Desktop SMS  page on the Branch dashboard.  Select  Custom Landing Page with SMS , after you toggle to  On .  Enter the destination URL.     Make sure you can access this page  Because you will be making changes to this URL, be sure you have access to the page and can make changes to its HTML.", 
            "title": "Set Destination URL"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#insert-sendsms-snippet-into-your-page", 
            "text": "When you have set your destination URL from the previous step, go to that page and edit the HTML. Paste the following code snippet into it; this is a fully-functional web page that you can use as a template for your Text Me The App page.  !DOCTYPE HTML  html   lang = en-US  head  meta   charset = UTF-8 \n     script   type = text/javascript \n         ( function ( b , r , a , n , c , h , _ , s , d , k ){ if ( ! b [ n ] ||! b [ n ]. _q ){ for (; s _ . length ;) c ( h , _ [ s ++ ]); d = r . createElement ( a ); d . async = 1 ; d . src = https://cdn.branch.io/branch-latest.min.js ; k = r . getElementsByTagName ( a )[ 0 ]; k . parentNode . insertBefore ( d , k ); b [ n ] = h }})( window , document , script , branch , function ( b , r ){ b [ r ] = function (){ b . _q . push ([ r , arguments ])}},{ _q : [], _v : 1 }, addListener applyCode banner closeBanner creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode . split (   ),   0 ); \n\n         branch . init ( YOUR-BRANCH-KEY ); \n             function   sendSMS ( form )   { \n                 var   phone   =   form . phone . value ; \n                 var   linkData   =   { \n                     tags :   [], \n                     channel :   Website , \n                     feature :   TextMeTheApp , \n                     data :   { \n                         foo :   bar \n                     } \n                 }; \n                 var   options   =   {}; \n                 var   callback   =   function ( err ,   result )   { \n                     if   ( err )   { \n                         alert ( Sorry, something went wrong. ); \n                     } \n                     else   { \n                         alert ( SMS sent! ); \n                     } \n                 }; \n                 branch . sendSMS ( phone ,   linkData ,   options ,   callback ); \n                 form . phone . value   =   ; \n             } \n     / script  / head  body \n        Send SMS\n         form   onsubmit = sendSMS(this); return false; \n             input   id = phone   name = phone   type = tel   placeholder = (650) 123-4567   / \n             br / \n             input   type = submit / \n         / form \n     / body  / html   And that's it. From here, you can customize the HTML and CSS, and Branch will take care of the rest. If you want to further customize the page or SMS message itself, read further.", 
            "title": "Insert SendSMS() snippet into your page"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#use-your-own-sms-service", 
            "text": "Branch uses Twilio to provide your users the ability to text themselves the app for free, but you can roll your own SMS service by using the following basic logic:   Does  ~referring_link  exist? (a.k.a. did the user end up on this Text Me The App page because of a Branch link?) If so, use this link when sending the SMS.  If not ( ~referring_link  is null), generate a new Branch link by making a call to the Web SDK's  link()  method. Use this link when sending the SMS.   The  ~referring_link  parameter is returned in the Web SDK's init() callback, buried in the referring link data. See the code below:  branch.init('YOUR-BRANCH-KEY', function(err, data) {\n    if (data.data['~referring_link']) {\n        console.log(\"data.data['~referring_link']:\", data.data['~referring_link']);\n    }\n});", 
            "title": "Use your own SMS service"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#use-a-custom-form-with-sendsms", 
            "text": "If you have an existing form for users to input their phone number, you can put our Text Me The App behind it. Add the following code somewhere inside the  head /head  tags on your website.  script   type = text/javascript  function   sendSMS ( form )   { \n   branch . sendSMS ( \n     phone :  form.phone.text , \n     { \n       channel :   Website , \n       feature :   Text-Me-The-App , \n       data :   { \n         foo :   bar \n       } \n     }, \n     {   make_new_link :  false   },   // Default: false. If set to true, sendSMS will generate a new link even if one already exists. \n     function ( err )   {   console . log ( err );   } \n   }  });  /script   Call sendSMS when someone enters something into your form.", 
            "title": "Use a custom form with SendSMS()"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#customize-sms-message-content", 
            "text": "The default text for SMS messages is \"Click here to download [App Name] {{ link }}\".  If you want to customize this, Branch allows you to set a default for all messages, or customize the message for each link.", 
            "title": "Customize SMS message content"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#customize-all-messages", 
            "text": "You can create your own custom default message that will be sent if the specific link someone clicks doesn't have a customized message itself. Navigate back to the Desktop SMS page on the  Branch dashboard . You should see the following section below.   Editing this field will modify  all  SMS messages sent.", 
            "title": "Customize all messages"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#custom-link-specific-messages", 
            "text": "If you don't want to edit the global SMS text, you can define a special SMS message for each individual link. Whether you want to switch the language of a message for a different region or include device specific date, you can specify the message in the  Deep Link Data  section at the bottom of the link editing screen.   Use the  $custom_sms_text  parameter and then enter your custom message in the value section. Make sure to include the  {{ link }}  tag in your custom message! Read the following scenario below to see this in action.  The developer of FlowerPower wants to customize the SMS messages based on the country of the recipient. For each Branch link, they would specify in the deep link data a different custom message.  For ads in France: Cliquez pour t\u00e9l\u00e9charger FlowerPower ici {{ link }}  For ads in Spain: Haz click aqu\u00ed para descargar FlowerPower {{ link }}  For ads in Germany: Klicken Sie auf das FlowerPower hier herunterladen {{ link }}", 
            "title": "Custom link-specific messages"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#use-liquid-tags-to-further-customize-messages", 
            "text": "You can access almost any value of your link's parameters by using liquid tags. The customization options are only limited to your imagination.   The tag  {{ link }}  is replaced with your Branch link  {{ link.channel }}  and  {{ link.campaign }}  output the channel and campaign, if these were set when creating the link.  {{ link.data.key }}  will output a parameter of your link's data dictionary, where  key  is the name of the parameter   Here's an example to illustrate this scenario.  Dmitri is creating Branch links to deep link to each of the different flowers in his app FlowerPower. He creates each link with a key/value pair of the key  flower  and the flower name, e.g.  Flower : Rose ,  Flower : Tulip . He wants to customize his SMS messages based on name of the flower, so he sets his custom link messages as:  {{ link.data.flower }} s on the mind? Click here to buy some for your home!  {{ link }}", 
            "title": "Use liquid tags to further customize messages"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#glossary", 
            "text": "", 
            "title": "Glossary"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#sendsms-parameters", 
            "text": "The  sendSMS()  method requires a phone number and  link parameters . You may optionally specify configuration options and a callback.  branch . sendSMS ( \n     phone , \n     linkData , \n     options , \n     callback   ( err ,   data )  );   Your call to this method, once filled in with the user's phone number, could look like the following:  branch . sendSMS ( \n     phone :   9999999999 , \n     { \n         tags :   [ tag1 ,   tag2 ], \n         channel :   facebook , \n         feature :   dashboard , \n         stage :   new user , \n         data :   { \n             foo :   bar \n         } \n     }, \n     {   make_new_link :   false   },   // Default: false. If set to true, sendSMS will generate a new link even if one already exists. \n     function ( err )   {   console . log ( err );   }  });", 
            "title": "SendSMS() parameters"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#setting-default-replacement-values-for-liquid-tags", 
            "text": "If a specific tag isn't always going to be filled, you can use a  |  character to specify a default to fallback on if the tag is missing from your link dictionary.  E.g.  {{ link.data.author | default:\"Alex\" }}  If the  link.data.author  information isn't found, the tag will just be replaced with  Alex  instead of being replaced by an empty string.", 
            "title": "Setting default replacement values for liquid tags"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#what-are-the-sms-rate-limits", 
            "text": "We enforce the following rate limits when sending SMS through Branch:  1. 5 texts to the same number within an hour.\n1. 100 texts from the same IP within an hour.", 
            "title": "What are the SMS rate limits?"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#can-i-use-this-service-for-international-phone-numbers", 
            "text": "Yes. Branch uses Twilio to send SMS messages, which means SMS will be delivered all around the world.", 
            "title": "Can I use this service for international phone numbers?"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#ive-sent-myself-multiple-texts-just-now-and-only-received-the-first-few-whats-going-on", 
            "text": "This occurs when a carrier filters you SMS out due to spam. We try our hardest to rate limit a specific user, however, if bypassed, carriers may block your SMS. The reason is that carriers will agressively block content if it's similar and repeatedly sent to the same number. The solution is to wait 24-48 hours.", 
            "title": "I've sent myself multiple texts just now and only received the first few, what's going on?"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#how-come-my-non-us-phone-number-isnt-working", 
            "text": "With full numbers, you are required to use \"+\" and the country code. If you know your users are only in a certain country, you can automatically prepend \"+\" and the country code so that they only need to enter their regular number. To do this, you must  configure a custom url  and complete subsequent steps to create a custom text-me-the-app page. Then, you can alter the code snippet in  step 2  with the following:       var   phone   =   +91   +   form . phone . value ;   In the example above, \"+91\" is the code for the country your users are based in.", 
            "title": "How come my (non US) phone number isn't working?"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#why-have-the-sms-links-sent-from-text-me-the-app-expired", 
            "text": "A: All links links generated from the Text Me the App feature will expire after 7 days.", 
            "title": "Why have the SMS links sent from Text Me The App expired?"
        }, 
        {
            "location": "/pages/ads/apple/", 
            "text": "Overview\n\n\nBranch can help track your Apple Search Ad campaigns by fetching the search ad attribution from Apple at app install.  You can then use the parameters you've set in the Apple Search Ad dashboard, parameters such as the campaign name, and take special action in you app after an install, or simply track the effectiveness of a campaign in the Branch dashboard, along with other your other Branch statistics, such as total installs, referrals, and app link statistics.\n\n\n\n\nApple Search Ads\n\n\nApple Search Ads for Developers\n\n\nApple Search Ads WWDC\n\n\n\n\nSetup\n\n\nIn order to check if the user came from an Apple Search Ad, you must make the attribution call before Branch initializes. As a warning, Apple's API is extremely slow often taking more than 1 second round trip. This means that your call to Branch's initSession to the execution of the callback block will be delayed by this additional 1 second.\n\n\nYou must add Apple's iAd.framework to your project to enable Apple Search Ad checking.\n\n\nEnable Apple Search Ads Check\n\n\nTo enable this check, add a \ndelayInitToCheckForSearchAds\n call to your \nAppDelegate.m\n (or \nAppDelegate.swift\n) file after you create the Branch singleton, but \nbefore\n you call \ninitSession\n. Your code will end up looking something like this:\n\n\nBranch\n \n*\nbranch\n \n=\n \n[\nBranch\n \ngetInstance\n];\n\n\n[\nbranch\n \ndelayInitToCheckForSearchAds\n];\n\n\n[\nbranch\n \ninitSession\n.....\n\n\n\n\n\nlet\n \nbranch\n:\n \nBranch\n \n=\n \nBranch\n.\ngetInstance\n()\n\n\nbranch\n.\ndelayInitToCheckForSearchAds\n()\n\n\nbranch\n.\ninitSession\n.....\n\n\n\n\n\nIf you're concerned about the additional 1 second latency, the call to \ndelayInitToCheckForSearchAds\n can be called conditionally at run time. So, if you want to only check on first install, or the like, then just don't call this method.\n\n\nApple Search Ads Debug\n\n\nWe've also added a debug mode which will demonstrate the functionality. You can enable it like so, but just remember to remove this before release!\n\n\nBranch\n \n*\nbranch\n \n=\n \n[\nBranch\n \ngetInstance\n];\n\n\n[\nbranch\n \nsetAppleSearchAdsDebugMode\n];\n\n\n[\nbranch\n \ndelayInitToCheckForSearchAds\n];\n\n\n[\nbranch\n \ninitSession\n.....\n\n\n\n\n\nlet\n \nbranch\n:\n \nBranch\n \n=\n \nBranch\n.\ngetInstance\n()\n\n\nbranch\n.\nsetAppleSearchAdsDebugMode\n()\n\n\nbranch\n.\ndelayInitToCheckForSearchAds\n()\n\n\nbranch\n.\ninitSession\n.....\n\n\n\n\n\nView Attribution on Dashboard\n\n\nAll the attribution can be visible on the \nBranch dashboard summary page\n. All installs and opens registered from this channel will automatically be tagged with the \nchannel\n: \nApple App Store\n and the \nfeature\n: \nSearch Ads\n. The \ncampaign\n will be set to the Campaign Name you've configured in the Apple Search Ads dashboard.\n\n\nNote that these stats are \nlimited to the date range\n at the top of the page. You can expand the range if you'd like.\n\n\nSupport\n\n\nAdding deep linking to Apple Search Ads\n\n\nSince this integration doesn't utilize Branch links, options for deep linking are limited. We'll pass back the value you use for \ncampaign\n in the Apple Ads dashboard. Since this value is controlled by you, you can put anything there, but it will reflect on the Apple ads dashboard. We will track installs regularly.", 
            "title": "Apple Search Ads"
        }, 
        {
            "location": "/pages/ads/apple/#overview", 
            "text": "Branch can help track your Apple Search Ad campaigns by fetching the search ad attribution from Apple at app install.  You can then use the parameters you've set in the Apple Search Ad dashboard, parameters such as the campaign name, and take special action in you app after an install, or simply track the effectiveness of a campaign in the Branch dashboard, along with other your other Branch statistics, such as total installs, referrals, and app link statistics.   Apple Search Ads  Apple Search Ads for Developers  Apple Search Ads WWDC", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/ads/apple/#setup", 
            "text": "In order to check if the user came from an Apple Search Ad, you must make the attribution call before Branch initializes. As a warning, Apple's API is extremely slow often taking more than 1 second round trip. This means that your call to Branch's initSession to the execution of the callback block will be delayed by this additional 1 second.  You must add Apple's iAd.framework to your project to enable Apple Search Ad checking.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/ads/apple/#enable-apple-search-ads-check", 
            "text": "To enable this check, add a  delayInitToCheckForSearchAds  call to your  AppDelegate.m  (or  AppDelegate.swift ) file after you create the Branch singleton, but  before  you call  initSession . Your code will end up looking something like this:  Branch   * branch   =   [ Branch   getInstance ];  [ branch   delayInitToCheckForSearchAds ];  [ branch   initSession .....   let   branch :   Branch   =   Branch . getInstance ()  branch . delayInitToCheckForSearchAds ()  branch . initSession .....   If you're concerned about the additional 1 second latency, the call to  delayInitToCheckForSearchAds  can be called conditionally at run time. So, if you want to only check on first install, or the like, then just don't call this method.", 
            "title": "Enable Apple Search Ads Check"
        }, 
        {
            "location": "/pages/ads/apple/#apple-search-ads-debug", 
            "text": "We've also added a debug mode which will demonstrate the functionality. You can enable it like so, but just remember to remove this before release!  Branch   * branch   =   [ Branch   getInstance ];  [ branch   setAppleSearchAdsDebugMode ];  [ branch   delayInitToCheckForSearchAds ];  [ branch   initSession .....   let   branch :   Branch   =   Branch . getInstance ()  branch . setAppleSearchAdsDebugMode ()  branch . delayInitToCheckForSearchAds ()  branch . initSession .....", 
            "title": "Apple Search Ads Debug"
        }, 
        {
            "location": "/pages/ads/apple/#view-attribution-on-dashboard", 
            "text": "All the attribution can be visible on the  Branch dashboard summary page . All installs and opens registered from this channel will automatically be tagged with the  channel :  Apple App Store  and the  feature :  Search Ads . The  campaign  will be set to the Campaign Name you've configured in the Apple Search Ads dashboard.  Note that these stats are  limited to the date range  at the top of the page. You can expand the range if you'd like.", 
            "title": "View Attribution on Dashboard"
        }, 
        {
            "location": "/pages/ads/apple/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/ads/apple/#adding-deep-linking-to-apple-search-ads", 
            "text": "Since this integration doesn't utilize Branch links, options for deep linking are limited. We'll pass back the value you use for  campaign  in the Apple Ads dashboard. Since this value is controlled by you, you can put anything there, but it will reflect on the Apple ads dashboard. We will track installs regularly.", 
            "title": "Adding deep linking to Apple Search Ads"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/", 
            "text": "Overview\n\n\nBranch is your preferred linking infrastructure for mobile. With Deep Linked Feeds for Dynamic Ads, advertisers can easily create mobile-optimized links at scale for dynamic ad campaigns. By taking users to the most relevant content on the most relevant platform (web or app) advertisers can maximize revenue and engagement opportunities on mobile.\n\n\nDeep Linked Feeds takes an existing product feed and adds correct deep links for each piece of content.\n\n\nTake advantage of our visual interface for uploading and managing feeds, or set up a more automated integration between you, Branch and your ad network of choice.\n\n\n\n\nNote\n\n\nThis product is a part of Branch Universal Ads.\n\n\n\n\nSetup\n\n\nPre-requisites\n\n\n\n\nTo use Deep Linked Feeds you must integrate the Branch SDK.\n\n\nTo use your Deep Linked Feed on Facebook, make sure you've configured and enabled Facebook as an advertising partner on the \nBranch\n dashboard.\n\n\n\n\nPrepare your Feed Source\n\n\nTo create a deep linked feed, upload a content or product feed. In Branch terminology, this is called a \nFeed Source\n.\n\n\nWhen you need to create a \nDeep Linked Feed\n you'll go through a creation flow that will ask you to select a Feed Source for modification.\n\n\nYou'll be asked to enter some attribution tags and optionally configure linking. After you've done this, Branch will prepare a Deep Linked Feed, adding any missing columns that are needed, or editing existing columns to use the correct links for deep linking. More specifics on the transformation process can be found in our Advanced section.\n\n\nA couple of things to note:\n\n\n\n\nBe sure that your Feed Source has a \nlink\n column with each product's web URL. This is the minimum requirement for Branch to create deep links (although it will likely not be sufficient to be accepted by Facebook or partners.)\n\n\nWe recommend \nhosting deep link data\n on your website for each web URL in your feed. We won't use it to modify your feed, but when your link is clicked from an ad, we'll get the link data from your website and return it to your app.\n\n\n\n\nIf you choose this option, go to your \nLink Settings\n \n Advanced Settings and check \nEnable Link Scraping\n. This option is only available once you've enabled the Deep Linked Feeds product for your account (you can enable the product by creating and downloading a Deep Linked Feed).\n\n\n\n\n\n\nIf you can't host your link data, add the necessary link data as a column in the Feed Source.\n\n\nWant to get creative with your Feed Sources? Check out our \nAdvanced section\n for some power user tips.\n\n\nBranch accepts feed sources that are compatible with Facebook\u2019s format. If you\u2019re not sure about the compatibility of your feed, please use \nFacebook\u2019s Product Feed Debug Tool\n to test and debug it.\n\n\n\n\n\n\nExample Feed Source\n\n\nFacebook has example CSVs that Branch accepts as Feed Sources on the \nFacebook Developer Portal\n. Scroll down to \"Supported Formats\" to find the feed examples.\n\n\n\n\nUpload a Feed Source\n\n\nGo directly to \nAds section\n in the Branch dashboard to get started.\n\n\n\n\nClick on the \"Create Product Link\" tab.\n\n\nClick the \nFeed Sources\n button. \n\n\nName your Feed Source. You can supply a URL (recommended) or upload a file. \n\n\n\n\nYou can see all of the \nFeed Sources\n you've uploaded by going to the \nFeed Sources\n tab.\n\n\nCreate a New Deep Linked Feed\n\n\n\n\nClick the \nAdd Deep Linked Feed\n button from either tab. \n\n\n\n\nDeep Linked Feed Creation Flow\n\n\n\n\nIn \"Deep Linked Feed Information\" you'll name your Deep Linked Feed for reference, and specify which Feed Source you'd like to turn into a Deep Linked Feed. You'll also input the Ad Platform on which you'd like to run your campaigns. This information will be used to modify the feed and insert well-structured Branch attribution data into the links.\n\n\n\nIn \"Create Deep Links\" you'll be presented with two optional elements. The first is a list of column names from your feed source. To add deep link data to each link, select the column that contains the relevant data.\n\n\n\n\nLet's say you have a column in your product feed titled \nid\n. That column contains the product id for each piece of content in your Feed Source file, and your app needs that id to deep link correctly. To create deep links with that id for each product, select the column by checking the box on the left hand side. If you'd like to change the name of the key (for example, from \nid\n to \nproduct_id\n) you can write the new name for the key in the text box on the right hand side. This will add the correct \nproduct_id\n to each link for every single product in your feed (e.g. the first item will have \n\"product_id\":1392\n, the second item will have \n\"product_id\":5284\n).\n\n\n\n\nGetting your Deep Linked Feed\n\n\nFinally, in \"Get Deep Linked Feed\" you can choose to get a URL that will host your Deep Linked Feed or download a file with your Deep Linked Feed.\n\n\nOnce you get to the final step, you will see \"Your links are being created...\" Feel free to navigate away if you have a large feed source. Once this process has completed, you will receive a dashboard notification and an email with a link to your finished Deep Linked Feed.\n\n\n\n\n\n\nSchedule refresh\n\n\nIf you used a Feed Source hosted on a URL (recommended), you will see two options for accessing your feed. We recommend selecting \"Schedule Refresh.\" If you select this option, Branch will host a URL for your Deep Linked Feed that will update itself from your Feed Source URL at regular intervals. You can then provide the Deep Linked Feed URL to your partners, and Branch will keep the content up to date.\n\n\n\n\nYou can see all of the \nDeep Linked Feeds\n you've created by going to the \nDeep Linked Feeds\n tab.\n\n\nDownload CSV\n\n\nClick \"Download CSV\" if you just need a one-time file with your Deep Linked Feed.\n\n\nYou can see all of the \nDeep Linked Feeds\n you've created by going to the \nDeep Linked Feeds\n tab.\n\n\nUse your Deep Linked Feed\n\n\nAfter you've downloaded your feed, it's time to use it!\n\n\n\n\nFacebook Dynamic Ads\n\n\nLaunch a \nFacebook Dynamic Ad Campaign\n to drive engagement or installs with your Deep Linked Feed!\n\n\n\n\n\n\nAd Network Integrations\n\n\nBranch Deep Linked Feeds are accepted by top remarketing companies like \nCriteo\n, Remerge and AppNexus. Ask your Account Manager about launching your campaign with Branch deep links.\n\n\n\n\n\n\nDrive Installs With Your Content\n\n\nUse \nContent Analytics\n to see which products are driving results, then use Deep Linked Feeds to create the links you need at scale with every type of ad.\n\n\n\n\nUnderstand Ad Performance\n\n\nYour Deep Linked Feed provides a bevy of important insights for you to optimize your campaigns and your content.\n\n\n\n\n\n\n\n\nDeep Linked Feed Field\n\n\nBranch Analytics Tag\n\n\n\n\n\n\n\n\n\n\nFeature\n\n\nPaid Ads\n\n\n\n\n\n\nCampaign\n\n\nCampaign\n\n\n\n\n\n\nAd Platform\n\n\nChannel\n\n\n\n\n\n\nAd Type\n\n\nTag\n\n\n\n\n\n\n\n\n\n\nVisit \nContent Analytics\n to see which products are driving clicks, opens, installs and conversions\n\n\nCheck out \nSource Analytics\n to simply understand which Ad Channels are most impactful for you.\n\n\nSet up a \nData Integration\n to send your Dynamic Ads data to another attribution or analytics dashboard.\n\n\n\n\nAdvanced\n\n\nAdd additional link data in your Feed Source\n\n\nYou can add additional data to each link by adding a column to your Feed Source called \nbranch_query_params\n. This column accepts parameters in the web query parameter format \nkey1=value1\nkey2=value2\n.\n\n\nAdvanced segmentation with Data Integrations\n\n\nThe attribution Data Integrations (Tune, Kochava, AppsFlyer, Localytics and Adjust) support additional network segmentation with additional measurement parameters that can be appended to HTTP deep links.\n\n\nTo get started, please visit the \nAdvanced\n documentation for your Data Integration for instructions on how to generate and construct the correct query parameters for your campaign and ad network.\n\n\nThis field accepts parameters in the web query parameter format \nkey1=value1\nkey2=value2\n so do not include \n?\n at the beginning of the entry.\n\n\nOnce you've created the right parameters, add them in the \nAdvanced: Add Measurement Parameters\n text field in Step 2. Your parameters will be added to every HTTP Branch link in the \nlink\n column.\n\n\n\n\nSupport\n\n\nHow does Branch create a Deep Linked Feed?\n\n\nWhen we create a Deep Linked Feed, we take your Feed Source, your Link Settings, and any input you provide to generate a working feed.\n\n\nWe look for the presence of the following columns, and for each one we either modify the existing column, or add a new one with the relevant information:\n- link (by default, we use a Branch link with a web fallback)\n- ios_url\n- ios_app_name\n- ios_app_store_id\n- android_url\n- android_app_name\n- android_package\n\n\nLinks don't open the app\n\n\n\n\nFirst, understand what the \nintended behavior\n of your link should be.\n\n\nLinks created by the Deep Linked Feeds tool currently fall back to the Web URL you originally specified in the \nlink\n column by default. You can override this behavior by including a column called \nbranch_query_params\n and including \n$fallback_method=app_wide\n as the value for every row. This will make each link fall back to the platform fallback you have specified in your \nLink Settings\n, which is usually the App Store.\n\n\nFacebook requires certain \n\"applink treatment\"\n values to be present to change fallback behavior. We're working on adding these to our interface, but for the moment, include them in your feed source.\n\n\n\n\nDeep links aren't working\n\n\n\n\nEnsure you've included your deep link data. Branch will scrape any \nHosted Deep Link Data\n corresponding to the Web URL in your Feed Source's \nlink\n column for every link. Alternatively, you can include deep link data as a column in your Feed Source and then select the relevant data in Step 2 of Deep Linked creation.\n\n\nTo see which data is getting through to your app, click the link and then view the link click in \nLive View\n to see the data going through to your app.\n\n\nIf you don't know what deep link data you need to include, ask a technical teammate to show you which data is included in a working Branch link.\n\n\n\n\nFeed Source won't upload\n\n\n\n\nBranch accepts Feed Sources that are compatible with Facebook\u2019s \nfeed format\n. Please use \nFacebook\u2019s Product Feed Debug Tool\n to test and debug your Product Feed format.\n\n\nPlease ensure you have a column titled \nlink\n in your Feed Source\n\n\nThe largest file size accepted by the tool is 50MB. Please contact \n if you need to upload a larger file.\n\n\n\n\nReport issues\n\n\n\n\nFor Facebook data discrepancies, please see our \nFacebook Advertising troubleshooting documentation\n.\n\n\n\n\nIf you run into any issues, or have questions, please contact \n.", 
            "title": "Dynamic Product Feeds"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#overview", 
            "text": "Branch is your preferred linking infrastructure for mobile. With Deep Linked Feeds for Dynamic Ads, advertisers can easily create mobile-optimized links at scale for dynamic ad campaigns. By taking users to the most relevant content on the most relevant platform (web or app) advertisers can maximize revenue and engagement opportunities on mobile.  Deep Linked Feeds takes an existing product feed and adds correct deep links for each piece of content.  Take advantage of our visual interface for uploading and managing feeds, or set up a more automated integration between you, Branch and your ad network of choice.   Note  This product is a part of Branch Universal Ads.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#pre-requisites", 
            "text": "To use Deep Linked Feeds you must integrate the Branch SDK.  To use your Deep Linked Feed on Facebook, make sure you've configured and enabled Facebook as an advertising partner on the  Branch  dashboard.", 
            "title": "Pre-requisites"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#prepare-your-feed-source", 
            "text": "To create a deep linked feed, upload a content or product feed. In Branch terminology, this is called a  Feed Source .  When you need to create a  Deep Linked Feed  you'll go through a creation flow that will ask you to select a Feed Source for modification.  You'll be asked to enter some attribution tags and optionally configure linking. After you've done this, Branch will prepare a Deep Linked Feed, adding any missing columns that are needed, or editing existing columns to use the correct links for deep linking. More specifics on the transformation process can be found in our Advanced section.  A couple of things to note:   Be sure that your Feed Source has a  link  column with each product's web URL. This is the minimum requirement for Branch to create deep links (although it will likely not be sufficient to be accepted by Facebook or partners.)  We recommend  hosting deep link data  on your website for each web URL in your feed. We won't use it to modify your feed, but when your link is clicked from an ad, we'll get the link data from your website and return it to your app.   If you choose this option, go to your  Link Settings    Advanced Settings and check  Enable Link Scraping . This option is only available once you've enabled the Deep Linked Feeds product for your account (you can enable the product by creating and downloading a Deep Linked Feed).    If you can't host your link data, add the necessary link data as a column in the Feed Source.  Want to get creative with your Feed Sources? Check out our  Advanced section  for some power user tips.  Branch accepts feed sources that are compatible with Facebook\u2019s format. If you\u2019re not sure about the compatibility of your feed, please use  Facebook\u2019s Product Feed Debug Tool  to test and debug it.    Example Feed Source  Facebook has example CSVs that Branch accepts as Feed Sources on the  Facebook Developer Portal . Scroll down to \"Supported Formats\" to find the feed examples.", 
            "title": "Prepare your Feed Source"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#upload-a-feed-source", 
            "text": "Go directly to  Ads section  in the Branch dashboard to get started.   Click on the \"Create Product Link\" tab.  Click the  Feed Sources  button.   Name your Feed Source. You can supply a URL (recommended) or upload a file.    You can see all of the  Feed Sources  you've uploaded by going to the  Feed Sources  tab.", 
            "title": "Upload a Feed Source"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#create-a-new-deep-linked-feed", 
            "text": "Click the  Add Deep Linked Feed  button from either tab.", 
            "title": "Create a New Deep Linked Feed"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#deep-linked-feed-creation-flow", 
            "text": "In \"Deep Linked Feed Information\" you'll name your Deep Linked Feed for reference, and specify which Feed Source you'd like to turn into a Deep Linked Feed. You'll also input the Ad Platform on which you'd like to run your campaigns. This information will be used to modify the feed and insert well-structured Branch attribution data into the links.  In \"Create Deep Links\" you'll be presented with two optional elements. The first is a list of column names from your feed source. To add deep link data to each link, select the column that contains the relevant data.   Let's say you have a column in your product feed titled  id . That column contains the product id for each piece of content in your Feed Source file, and your app needs that id to deep link correctly. To create deep links with that id for each product, select the column by checking the box on the left hand side. If you'd like to change the name of the key (for example, from  id  to  product_id ) you can write the new name for the key in the text box on the right hand side. This will add the correct  product_id  to each link for every single product in your feed (e.g. the first item will have  \"product_id\":1392 , the second item will have  \"product_id\":5284 ).", 
            "title": "Deep Linked Feed Creation Flow"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#getting-your-deep-linked-feed", 
            "text": "Finally, in \"Get Deep Linked Feed\" you can choose to get a URL that will host your Deep Linked Feed or download a file with your Deep Linked Feed.  Once you get to the final step, you will see \"Your links are being created...\" Feel free to navigate away if you have a large feed source. Once this process has completed, you will receive a dashboard notification and an email with a link to your finished Deep Linked Feed.", 
            "title": "Getting your Deep Linked Feed"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#schedule-refresh", 
            "text": "If you used a Feed Source hosted on a URL (recommended), you will see two options for accessing your feed. We recommend selecting \"Schedule Refresh.\" If you select this option, Branch will host a URL for your Deep Linked Feed that will update itself from your Feed Source URL at regular intervals. You can then provide the Deep Linked Feed URL to your partners, and Branch will keep the content up to date.   You can see all of the  Deep Linked Feeds  you've created by going to the  Deep Linked Feeds  tab.", 
            "title": "Schedule refresh"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#download-csv", 
            "text": "Click \"Download CSV\" if you just need a one-time file with your Deep Linked Feed.  You can see all of the  Deep Linked Feeds  you've created by going to the  Deep Linked Feeds  tab.", 
            "title": "Download CSV"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#use-your-deep-linked-feed", 
            "text": "After you've downloaded your feed, it's time to use it!   Facebook Dynamic Ads  Launch a  Facebook Dynamic Ad Campaign  to drive engagement or installs with your Deep Linked Feed!    Ad Network Integrations  Branch Deep Linked Feeds are accepted by top remarketing companies like  Criteo , Remerge and AppNexus. Ask your Account Manager about launching your campaign with Branch deep links.    Drive Installs With Your Content  Use  Content Analytics  to see which products are driving results, then use Deep Linked Feeds to create the links you need at scale with every type of ad.", 
            "title": "Use your Deep Linked Feed"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#understand-ad-performance", 
            "text": "Your Deep Linked Feed provides a bevy of important insights for you to optimize your campaigns and your content.     Deep Linked Feed Field  Branch Analytics Tag      Feature  Paid Ads    Campaign  Campaign    Ad Platform  Channel    Ad Type  Tag      Visit  Content Analytics  to see which products are driving clicks, opens, installs and conversions  Check out  Source Analytics  to simply understand which Ad Channels are most impactful for you.  Set up a  Data Integration  to send your Dynamic Ads data to another attribution or analytics dashboard.", 
            "title": "Understand Ad Performance"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#add-additional-link-data-in-your-feed-source", 
            "text": "You can add additional data to each link by adding a column to your Feed Source called  branch_query_params . This column accepts parameters in the web query parameter format  key1=value1 key2=value2 .", 
            "title": "Add additional link data in your Feed Source"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#advanced-segmentation-with-data-integrations", 
            "text": "The attribution Data Integrations (Tune, Kochava, AppsFlyer, Localytics and Adjust) support additional network segmentation with additional measurement parameters that can be appended to HTTP deep links.  To get started, please visit the  Advanced  documentation for your Data Integration for instructions on how to generate and construct the correct query parameters for your campaign and ad network.  This field accepts parameters in the web query parameter format  key1=value1 key2=value2  so do not include  ?  at the beginning of the entry.  Once you've created the right parameters, add them in the  Advanced: Add Measurement Parameters  text field in Step 2. Your parameters will be added to every HTTP Branch link in the  link  column.", 
            "title": "Advanced segmentation with Data Integrations"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#how-does-branch-create-a-deep-linked-feed", 
            "text": "When we create a Deep Linked Feed, we take your Feed Source, your Link Settings, and any input you provide to generate a working feed.  We look for the presence of the following columns, and for each one we either modify the existing column, or add a new one with the relevant information:\n- link (by default, we use a Branch link with a web fallback)\n- ios_url\n- ios_app_name\n- ios_app_store_id\n- android_url\n- android_app_name\n- android_package", 
            "title": "How does Branch create a Deep Linked Feed?"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#links-dont-open-the-app", 
            "text": "First, understand what the  intended behavior  of your link should be.  Links created by the Deep Linked Feeds tool currently fall back to the Web URL you originally specified in the  link  column by default. You can override this behavior by including a column called  branch_query_params  and including  $fallback_method=app_wide  as the value for every row. This will make each link fall back to the platform fallback you have specified in your  Link Settings , which is usually the App Store.  Facebook requires certain  \"applink treatment\"  values to be present to change fallback behavior. We're working on adding these to our interface, but for the moment, include them in your feed source.", 
            "title": "Links don't open the app"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#deep-links-arent-working", 
            "text": "Ensure you've included your deep link data. Branch will scrape any  Hosted Deep Link Data  corresponding to the Web URL in your Feed Source's  link  column for every link. Alternatively, you can include deep link data as a column in your Feed Source and then select the relevant data in Step 2 of Deep Linked creation.  To see which data is getting through to your app, click the link and then view the link click in  Live View  to see the data going through to your app.  If you don't know what deep link data you need to include, ask a technical teammate to show you which data is included in a working Branch link.", 
            "title": "Deep links aren't working"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#feed-source-wont-upload", 
            "text": "Branch accepts Feed Sources that are compatible with Facebook\u2019s  feed format . Please use  Facebook\u2019s Product Feed Debug Tool  to test and debug your Product Feed format.  Please ensure you have a column titled  link  in your Feed Source  The largest file size accepted by the tool is 50MB. Please contact   if you need to upload a larger file.", 
            "title": "Feed Source won't upload"
        }, 
        {
            "location": "/pages/ads/dynamic-product-feeds/#report-issues", 
            "text": "For Facebook data discrepancies, please see our  Facebook Advertising troubleshooting documentation .   If you run into any issues, or have questions, please contact  .", 
            "title": "Report issues"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/", 
            "text": "Overview\n\n\nBranch Universal Ads help you drive results for web and app campaigns.\n\n\n\n\nCreate Ad Links with tracking parameters and deep linking\n\n\nEnable Ad Partners to send them preconfigured conversion postbacks\n\n\nView ad performance with web and app analytics\n\n\n\n\nSetup\n\n\n\n\nPre-reqs\n\n\nTo track installs from Ads you should \nintegrate the Branch SDK\n into your app. If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n\n\n\n\nPaid Product\n\n\nAds is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\nEnable an ad partner\n\n\n\n\nVisit the \nAds page\n on the Branch dashboard.\n\n\nSelect \nPartner Management\n from the sidebar.\n\n\nSearch for the Ad Partner that you'd like to enable.\n\n\n\nEnter any credentials that may be required, and click \nSave and Enable\n in the bottom right hand corner.\n\n\n\n\n\n\n\nEnable postbacks\n\n\nBasic postbacks will automatically be activated for events like \nInstall\n and \nPurchase\n when you enable your ad partner. You can then \nadd additional postbacks\n, for example, if you wanted to add postbacks for custom events that are specific to your app like \nAccount Created\n. You can also \nedit postbacks\n if there's additional data you really need to pass along to your ad partner.\n\n\n\n\nCreate an ad link\n\n\nOnce you've enabled an ad partner, it's time to create a tracking link.\n\n\n\n\nFirst, select an ad format. For App Install or App Engagement campaigns you'll want to select the \nApp Only\n format. For Search or Display campaigns where the user should go to web if they don't have the app, then you should select \nCross-Platform Search\n or \nCross-Platform Display\n. \nProduct Links\n are for shopping or dynamic remarketing campaigns and will take you to create a Deep Linked Product Feed.\n\n\n\nAt this point you need to name your link. Select something that will make it easy to find if you need it later. Your Ad Format and Ad Partner should be selected already, but feel free to choose one if they aren't. It's important that you select the right Ad Partner for analytics later on. Click \nConfigure Options\n to continue.\n\n\n\nThis is your chance to add deep link data and analytics tags. Analytics tags are important for later segmentation, so click the \nAnalytics\n sub tab to add a Channel and Campaign value.\n\n\n\nClick \nCreate Link Now\n, and you have your tracking link! Take this link and give it to your Ad Partner's Account Manager or paste it into the tracking section of your campaign yourself.\n\n\n\n\n\n\n\nSet Analytics tags\n\n\nIt's easier to slice your data in our analytics platform if you properly assign analytics parameters to your link. \nChannels\n generally correspond to ad networks, and \nCampaigns\n correspond to marketing initiatives that you're launching. For example: \nChannel\n: \"YouTube\", \nCampaign\n: \"Summer 2017 Shoe Discounts.\"\n\n\n\n\nView your data with Unified Analytics\n\n\nThe \nAds Analytics Page page\n on the Branch dashboard shows the performance of your ad campaigns \nacross both web and app\n. You can view performance over time, including purchase and other custom events.\n\n\nEvents are attributed using Branch's unified last-click attribution model. This means that Branch will attribute to the last click across channels, and across platforms.\n\n\nFor example, if a customer clicks a Branch email link, and then clicks an ad, installs the the app and purchases an item, Branch will attribute the install and the purchase to the last clicked ad link.\n\n\nIf the customer then goes on to purchase an item on web within the attribution window, Branch will also attribute the web purchase to the same ad link, connecting the web and app actions taken by a single user for a more accurate view of your marketing channels and customer behavior.\n\n\n\n\nAdvanced\n\n\nAdd more postbacks\n\n\nWhen you enable an ad partner, your ad partner postbacks can be found under the \nPostbacks\n tab for that ad partner. It's easy to add additional postbacks.\n\n\n\n\n\n\nClick the \nAdd New Postback\n button at the bottom of the screen.\n\n\n\nA modal will appear with Branch default events, as well as any commerce or custom events you've set up. Select an event, enter a postback URL if you're asked to, and click \nSave\n. This will be the event that triggers your new postback.\n\n\n\n\n\nEdit postbacks\n\n\nFor advanced integrations, you may want to provide additional information in your postback that isn't there by default. You can edit postbacks by adding data into the textbox, then clicking save. When the postback is saved, it is then validated - if you enter an invalid postback, you'll get an error at the top of your screen.\n\n\n\n\nReset Postbacks\n\n\nWe all make mistakes from time to time. If you need to reset your postbacks and your credentials, navigate to the \nAccount Settings\n tab and look for the \nReset all settings\n button. Be careful though! This will disable the ad partner, clear out all credentials and postbacks that you've set up, and return the ad partner to its basic configuration. You can then start afresh.\n\n\n\n\nChange attribution windows\n\n\nAttribution windows can be specified at the global account level or on a per link basis with the link level window taking priority. See the below instructions for setup.\n\n\nFor customer experience and data accuracy, please do not set your deep linking window longer than the other attribution windows.\n\n\nAccount Level Attribution Windows\n\n\nYou can edit your attribution windows under Link Settings \n Attribution Windows. View through attribution is not yet available, but will be coming soon.\n\n\n\n\nLink Level Attribution Windows\n\n\nTo set attribution windows on a link level, you can append the following parameters to your generated Branch link.\n\n\n\n\n\n\n\n\nKey\n\n\nExample Link\n\n\n\n\n\n\n\n\n\n\n$click_session_start_window_days\n\n\nhttps://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=7\n\n\n\n\n\n\n$click_conversion_window_days\n\n\nhttps://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=30\n\n\n\n\n\n\n$impression_session_start_window_days\n\n\nhttps://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=1\n\n\n\n\n\n\n$impression_conversion_window_days\n\n\nhttps://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=7\n\n\n\n\n\n\n\n\n!!! \"warning\" Link Level Attribution Support for Standard Branch links\"\n    As of July 2017, link level attribution window setting is only available on standard Branch links. Special Branch links such as the ones used for Google's Universal App Campaign or Play Store links with Branch link Ids are currently not supported.\n\n\nSupport\n\n\nHow do I debug a discrepancy?\n\n\nNavigate to the \nAnalytics\n page to see data.", 
            "title": "Branch Universal Ads"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#overview", 
            "text": "Branch Universal Ads help you drive results for web and app campaigns.   Create Ad Links with tracking parameters and deep linking  Enable Ad Partners to send them preconfigured conversion postbacks  View ad performance with web and app analytics", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#setup", 
            "text": "Pre-reqs  To track installs from Ads you should  integrate the Branch SDK  into your app. If you want to deep link from your ads directly to content, you should  configure deep link routing .    Paid Product  Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#enable-an-ad-partner", 
            "text": "Visit the  Ads page  on the Branch dashboard.  Select  Partner Management  from the sidebar.  Search for the Ad Partner that you'd like to enable.  Enter any credentials that may be required, and click  Save and Enable  in the bottom right hand corner.    Enable postbacks  Basic postbacks will automatically be activated for events like  Install  and  Purchase  when you enable your ad partner. You can then  add additional postbacks , for example, if you wanted to add postbacks for custom events that are specific to your app like  Account Created . You can also  edit postbacks  if there's additional data you really need to pass along to your ad partner.", 
            "title": "Enable an ad partner"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#create-an-ad-link", 
            "text": "Once you've enabled an ad partner, it's time to create a tracking link.   First, select an ad format. For App Install or App Engagement campaigns you'll want to select the  App Only  format. For Search or Display campaigns where the user should go to web if they don't have the app, then you should select  Cross-Platform Search  or  Cross-Platform Display .  Product Links  are for shopping or dynamic remarketing campaigns and will take you to create a Deep Linked Product Feed.  At this point you need to name your link. Select something that will make it easy to find if you need it later. Your Ad Format and Ad Partner should be selected already, but feel free to choose one if they aren't. It's important that you select the right Ad Partner for analytics later on. Click  Configure Options  to continue.  This is your chance to add deep link data and analytics tags. Analytics tags are important for later segmentation, so click the  Analytics  sub tab to add a Channel and Campaign value.  Click  Create Link Now , and you have your tracking link! Take this link and give it to your Ad Partner's Account Manager or paste it into the tracking section of your campaign yourself.    Set Analytics tags  It's easier to slice your data in our analytics platform if you properly assign analytics parameters to your link.  Channels  generally correspond to ad networks, and  Campaigns  correspond to marketing initiatives that you're launching. For example:  Channel : \"YouTube\",  Campaign : \"Summer 2017 Shoe Discounts.\"", 
            "title": "Create an ad link"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#view-your-data-with-unified-analytics", 
            "text": "The  Ads Analytics Page page  on the Branch dashboard shows the performance of your ad campaigns  across both web and app . You can view performance over time, including purchase and other custom events.  Events are attributed using Branch's unified last-click attribution model. This means that Branch will attribute to the last click across channels, and across platforms.  For example, if a customer clicks a Branch email link, and then clicks an ad, installs the the app and purchases an item, Branch will attribute the install and the purchase to the last clicked ad link.  If the customer then goes on to purchase an item on web within the attribution window, Branch will also attribute the web purchase to the same ad link, connecting the web and app actions taken by a single user for a more accurate view of your marketing channels and customer behavior.", 
            "title": "View your data with Unified Analytics"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#add-more-postbacks", 
            "text": "When you enable an ad partner, your ad partner postbacks can be found under the  Postbacks  tab for that ad partner. It's easy to add additional postbacks.    Click the  Add New Postback  button at the bottom of the screen.  A modal will appear with Branch default events, as well as any commerce or custom events you've set up. Select an event, enter a postback URL if you're asked to, and click  Save . This will be the event that triggers your new postback.", 
            "title": "Add more postbacks"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#edit-postbacks", 
            "text": "For advanced integrations, you may want to provide additional information in your postback that isn't there by default. You can edit postbacks by adding data into the textbox, then clicking save. When the postback is saved, it is then validated - if you enter an invalid postback, you'll get an error at the top of your screen.   Reset Postbacks  We all make mistakes from time to time. If you need to reset your postbacks and your credentials, navigate to the  Account Settings  tab and look for the  Reset all settings  button. Be careful though! This will disable the ad partner, clear out all credentials and postbacks that you've set up, and return the ad partner to its basic configuration. You can then start afresh.", 
            "title": "Edit postbacks"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#change-attribution-windows", 
            "text": "Attribution windows can be specified at the global account level or on a per link basis with the link level window taking priority. See the below instructions for setup.  For customer experience and data accuracy, please do not set your deep linking window longer than the other attribution windows.", 
            "title": "Change attribution windows"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#account-level-attribution-windows", 
            "text": "You can edit your attribution windows under Link Settings   Attribution Windows. View through attribution is not yet available, but will be coming soon.", 
            "title": "Account Level Attribution Windows"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#link-level-attribution-windows", 
            "text": "To set attribution windows on a link level, you can append the following parameters to your generated Branch link.     Key  Example Link      $click_session_start_window_days  https://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=7    $click_conversion_window_days  https://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=30    $impression_session_start_window_days  https://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=1    $impression_conversion_window_days  https://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=7     !!! \"warning\" Link Level Attribution Support for Standard Branch links\"\n    As of July 2017, link level attribution window setting is only available on standard Branch links. Special Branch links such as the ones used for Google's Universal App Campaign or Play Store links with Branch link Ids are currently not supported.", 
            "title": "Link Level Attribution Windows"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/ads/branch-universal-ads/#how-do-i-debug-a-discrepancy", 
            "text": "Navigate to the  Analytics  page to see data.", 
            "title": "How do I debug a discrepancy?"
        }, 
        {
            "location": "/pages/ads/doubleclick/", 
            "text": "Overview\n\n\nTrack your Doubleclick campaigns using Branch's Universal Ads product. Branch's Ad Product will enable you to update your Doubleclick Campaign Manager (DCM) campaigns with deep links that send data back to Doubleclick's servers.\n\n\nYou can now run campaigns on a variety of in-app and mobile web publishing sites, and provide your users with the smoothest experience with Branch's deep links. Read on to learn how to set everything up.\n\n\nSetup\n\n\nDoubleclick Campaign Manager Set Up\n\n\nBefore we start anything on the Branch side, we need to configure options on the DCM side. Start by heading to your DCM dashboard, and navigating to the advertisers section.\n\n\nGrab Advertiser ID\n\n\nFirst, we'll need to grab the advertiser ID. Select the advertiser you want to track with, and grab the Advertiser ID. In this example, it is 6637276. This is the advertiser you will track campaigns with. Please keep note of it.\n\n\n\n\nGrab Server to Server Token\n\n\nOnce you've captured the advertiser ID and selected the advertiser, navigate to \nFloodlight Configuration\n. From there, go to \"server to server\", and make sure \"in-app attribution tracking\" is check-marked. Click new token, call it \u201cBranch token\u201d, and save it. Copy this value, as well.\n\n\n\n\nNow that you have \nAdvertiser ID\n and \nServer to Server Token\n, the last step is to find the events you need to track.\n\n\nGrab Tags for Events\n\n\nGo to the \nFloodlight activities\n tab. For all the events you want to track, grab the \nActivity tag String\n and \nGroup tag String\n.\n\n\n\n\nIn the above screenshot, the two values for \nActivity tag String\n are \nact-ios\n and \nact-android\n. The one value for \nGroup tag String\n is \nsales\n. Do this for all activities you want to track.\n\n\nOnce you're done with this exercise, you should have at least 4 unique values:\n\n\n\n\nServer to Server token\n\n\nAdvertiser ID\n\n\nActivity tag String (per event)\n\n\nGroup tag String (per event)\n\n\n\n\nBranch Dashboard Setup\n\n\nLet's take these values and place them in Branch's dashboard. Begin by navigating to the \npartners page\n.\n\n\nEnable\n\n\nFind doubleclick in the search box. Hit enable. In the \nAccount Settings\n tab, insert your \nServer to Server token\n.\n\n\nMap Events\n\n\nAt this point, you have enabled Branch to communicate with Doubleclick. Now we need to map Branch events to \nFloodlight Activities\n found on the Doubleclick dashboard. Click the \nPostback Config\n tab. You should see a URL for the event \nInstall\n. For demonstration purposes, we will assume you have a corresponding Install event on the Doubleclick dashboard, but this applies to any event you add.\n\n\nStart by grabbing your \nAdvertiser ID\n, \nActivity tag String\n, and \nGroup tag String\n.\n\n\nIn the screenshot above, we have two events, \"In App Activations - Android\", and \"In App Activations - iOS\", which correspond to the Branch Install event. For this example, the \nActivity tag Strings\n are \nact-and\n and \nact-ios\n. The \nGroup tag String\n is \nsales\n.\n\n\nCopy the existing URL in Install, and replace the \nsrc\n, \ncat\n, and \ntype\n variables. Your end result should look exactly like this:\n\n\nhttps://ad.doubleclick.net/ddm/s2s/appactivity/src=6637276;cat=\n#if user_data.os==\"IOS\"\nact-ios\n/#if\n#if user_data.os==\"ANDROID\"\nact-and\n/#if\n;type=sales;ord=${ (id)! }\n\n\nIf you don't have two different tags for iOS and Android, then it will look simpler:\n\n\nhttps://ad.doubleclick.net/ddm/s2s/appactivity/src=6637276;cat=act-tag;type=sales;ord=${ (id)! }\n\n\n\n\nSimply update and hit save.\n\n\nRun campaigns\n\n\nAt this point, you can now create a link for the Doubleclick network and send data back. Take your Branch link, and place it as the Click Through URL for your placement.", 
            "title": "Doubleclick"
        }, 
        {
            "location": "/pages/ads/doubleclick/#overview", 
            "text": "Track your Doubleclick campaigns using Branch's Universal Ads product. Branch's Ad Product will enable you to update your Doubleclick Campaign Manager (DCM) campaigns with deep links that send data back to Doubleclick's servers.  You can now run campaigns on a variety of in-app and mobile web publishing sites, and provide your users with the smoothest experience with Branch's deep links. Read on to learn how to set everything up.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/ads/doubleclick/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/ads/doubleclick/#doubleclick-campaign-manager-set-up", 
            "text": "Before we start anything on the Branch side, we need to configure options on the DCM side. Start by heading to your DCM dashboard, and navigating to the advertisers section.", 
            "title": "Doubleclick Campaign Manager Set Up"
        }, 
        {
            "location": "/pages/ads/doubleclick/#grab-advertiser-id", 
            "text": "First, we'll need to grab the advertiser ID. Select the advertiser you want to track with, and grab the Advertiser ID. In this example, it is 6637276. This is the advertiser you will track campaigns with. Please keep note of it.", 
            "title": "Grab Advertiser ID"
        }, 
        {
            "location": "/pages/ads/doubleclick/#grab-server-to-server-token", 
            "text": "Once you've captured the advertiser ID and selected the advertiser, navigate to  Floodlight Configuration . From there, go to \"server to server\", and make sure \"in-app attribution tracking\" is check-marked. Click new token, call it \u201cBranch token\u201d, and save it. Copy this value, as well.   Now that you have  Advertiser ID  and  Server to Server Token , the last step is to find the events you need to track.", 
            "title": "Grab Server to Server Token"
        }, 
        {
            "location": "/pages/ads/doubleclick/#grab-tags-for-events", 
            "text": "Go to the  Floodlight activities  tab. For all the events you want to track, grab the  Activity tag String  and  Group tag String .   In the above screenshot, the two values for  Activity tag String  are  act-ios  and  act-android . The one value for  Group tag String  is  sales . Do this for all activities you want to track.  Once you're done with this exercise, you should have at least 4 unique values:   Server to Server token  Advertiser ID  Activity tag String (per event)  Group tag String (per event)", 
            "title": "Grab Tags for Events"
        }, 
        {
            "location": "/pages/ads/doubleclick/#branch-dashboard-setup", 
            "text": "Let's take these values and place them in Branch's dashboard. Begin by navigating to the  partners page .", 
            "title": "Branch Dashboard Setup"
        }, 
        {
            "location": "/pages/ads/doubleclick/#enable", 
            "text": "Find doubleclick in the search box. Hit enable. In the  Account Settings  tab, insert your  Server to Server token .", 
            "title": "Enable"
        }, 
        {
            "location": "/pages/ads/doubleclick/#map-events", 
            "text": "At this point, you have enabled Branch to communicate with Doubleclick. Now we need to map Branch events to  Floodlight Activities  found on the Doubleclick dashboard. Click the  Postback Config  tab. You should see a URL for the event  Install . For demonstration purposes, we will assume you have a corresponding Install event on the Doubleclick dashboard, but this applies to any event you add.  Start by grabbing your  Advertiser ID ,  Activity tag String , and  Group tag String .  In the screenshot above, we have two events, \"In App Activations - Android\", and \"In App Activations - iOS\", which correspond to the Branch Install event. For this example, the  Activity tag Strings  are  act-and  and  act-ios . The  Group tag String  is  sales .  Copy the existing URL in Install, and replace the  src ,  cat , and  type  variables. Your end result should look exactly like this:  https://ad.doubleclick.net/ddm/s2s/appactivity/src=6637276;cat= #if user_data.os==\"IOS\" act-ios /#if #if user_data.os==\"ANDROID\" act-and /#if ;type=sales;ord=${ (id)! }  If you don't have two different tags for iOS and Android, then it will look simpler:  https://ad.doubleclick.net/ddm/s2s/appactivity/src=6637276;cat=act-tag;type=sales;ord=${ (id)! }   Simply update and hit save.", 
            "title": "Map Events"
        }, 
        {
            "location": "/pages/ads/doubleclick/#run-campaigns", 
            "text": "At this point, you can now create a link for the Doubleclick network and send data back. Take your Branch link, and place it as the Click Through URL for your placement.", 
            "title": "Run campaigns"
        }, 
        {
            "location": "/pages/ads/google-app-installs/", 
            "text": "", 
            "title": "Google App Installs"
        }, 
        {
            "location": "/pages/ads/google-universal-app-campaigns/", 
            "text": "", 
            "title": "Google Universal App Campaigns"
        }, 
        {
            "location": "/pages/ads/google-search/", 
            "text": "", 
            "title": "Google Search Ads"
        }, 
        {
            "location": "/pages/ads/facebook-app-installs/", 
            "text": "", 
            "title": "Facebook App Installs"
        }, 
        {
            "location": "/pages/ads/facebook-app-engagement/", 
            "text": "", 
            "title": "Facebook App Engagement"
        }, 
        {
            "location": "/pages/ads/facebook-instagram/", 
            "text": "", 
            "title": "Facebook Instagram"
        }, 
        {
            "location": "/pages/ads/twitter/", 
            "text": "Overview\n\n\nConfiguring Twitter install ads to use Branch links is very simple. The only trick is that you will be using the website click/conversion ads instead of the standard app install ad. Using Branch links allows you to track ad-driven installs on the Branch dashboard and deep link those new users directly to content the first time they open your app.\n\n\nSetup\n\n\nCreate Quick Links\n\n\n\n\nVisit the \nMarketing page\n on the Branch dashboard and click \n+ Add link\n.\n\n\nCreate a link, and fill in values for \ncampaign\n and \nchannel\n. Make sure to add deep link data.\n\n\n\n\nConfigure ad campaign on Twitter\n\n\n\n\nSelect campaign type\n\n\nGo to Twitter and set up a new ad campaign. When selecting the campaign type that you want, select \nWebsite Clicks or Conversions\n.\n\n\nSet the device targeting\n\n\nSet the device targeting as desired.\n\n\nEnter Branch Quick Link\n\n\nOn the ad creation card, enter the Branch Quick Link you created in the \nWebsite URL\n field.\n\n\n\n\nView your data using the Branch dashboard\n\n\nThe \nMarketing page\n on the Branch dashboard shows the performance of each individual link. You can find your link listed in the table with a quick summary of the \ntotal\n clicks and installs.\n\n\n\n\nTo view more details stats, click the \nsmall button that looks like a bar chart\n on the far right. Note that these stats are \nlimited to the date range\n at the top. You can expand the range if you'd like.", 
            "title": "Twitter Ads"
        }, 
        {
            "location": "/pages/ads/twitter/#overview", 
            "text": "Configuring Twitter install ads to use Branch links is very simple. The only trick is that you will be using the website click/conversion ads instead of the standard app install ad. Using Branch links allows you to track ad-driven installs on the Branch dashboard and deep link those new users directly to content the first time they open your app.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/ads/twitter/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/ads/twitter/#create-quick-links", 
            "text": "Visit the  Marketing page  on the Branch dashboard and click  + Add link .  Create a link, and fill in values for  campaign  and  channel . Make sure to add deep link data.", 
            "title": "Create Quick Links"
        }, 
        {
            "location": "/pages/ads/twitter/#configure-ad-campaign-on-twitter", 
            "text": "", 
            "title": "Configure ad campaign on Twitter"
        }, 
        {
            "location": "/pages/ads/twitter/#select-campaign-type", 
            "text": "Go to Twitter and set up a new ad campaign. When selecting the campaign type that you want, select  Website Clicks or Conversions .", 
            "title": "Select campaign type"
        }, 
        {
            "location": "/pages/ads/twitter/#set-the-device-targeting", 
            "text": "Set the device targeting as desired.", 
            "title": "Set the device targeting"
        }, 
        {
            "location": "/pages/ads/twitter/#enter-branch-quick-link", 
            "text": "On the ad creation card, enter the Branch Quick Link you created in the  Website URL  field.", 
            "title": "Enter Branch Quick Link"
        }, 
        {
            "location": "/pages/ads/twitter/#view-your-data-using-the-branch-dashboard", 
            "text": "The  Marketing page  on the Branch dashboard shows the performance of each individual link. You can find your link listed in the table with a quick summary of the  total  clicks and installs.   To view more details stats, click the  small button that looks like a bar chart  on the far right. Note that these stats are  limited to the date range  at the top. You can expand the range if you'd like.", 
            "title": "View your data using the Branch dashboard"
        }, 
        {
            "location": "/pages/emails/responsys/", 
            "text": "", 
            "title": "Responsys"
        }, 
        {
            "location": "/pages/emails/sfmc/", 
            "text": "", 
            "title": "SFMC"
        }, 
        {
            "location": "/pages/emails/sendgrid/", 
            "text": "", 
            "title": "SendGrid"
        }, 
        {
            "location": "/pages/emails/sailthru/", 
            "text": "", 
            "title": "Sailthru"
        }, 
        {
            "location": "/pages/emails/appboy/", 
            "text": "", 
            "title": "AppBoy"
        }, 
        {
            "location": "/pages/emails/self-serve/", 
            "text": "", 
            "title": "Self Serve"
        }, 
        {
            "location": "/pages/organic-search/firebase/", 
            "text": "Overview\n\n\nGoogle's App Indexing is a project that attempts to expose app results in Google searches performed on mobile devices. This project is formally called Firebase App Indexing.\n\n\nAt a high level, App Indexing has two themes to consider.\n\n\n\n\nResults, ranking and relevancy are based upon web scraping. App Indexing does not improve relevancy in results.\n\n\nApp Indexing makes it so that web results \nalso\n open up your app.\n\n\n\n\nWhen enabling App Indexing, you will likely want to make these changes to your website, as well:\n\n\n\n\nMake your existing website support Apple's Universal Links and Android's App Links. After this, all of your links will correctly open the app and you're done.\n\n\nAdd the undocumented header \nlink rel=\"alternate\" ..\n tags to your website for when Google crawls the page. Branch can assist with this using \nautoAppIndex()\n, documented below.\n\n\n\n\nIf Google knows your website opens the app, when it shows up in a search result, and the user has the app installed, the app will open instead of the website, therefore achieveing App Indexing results in organic search portals.\n\n\nBranch's App Indexing integration is designed for businesses that don't have a website, and want Branch to host their site for them. If you have a website, Branch can dynamically inject App Indexing tags through the WebSDK function \nautoAppIndex()\n described \nhere\n.\n\n\nNote that in order for you to get traffic from this feature, your Branch link will need to appear in search results. We've just now supercharged our app indexing feature with AMP tech to leverage Google's new prioritization of these pages.\n\n\nSetup\n\n\nIndex Your Content\n\n\nAssuming you followed our get started guide, you have already indexed your content by creating \nBranch Universal Objects\n. If you haven't, please go to the get started section and do so.\n\n\nEnable App Indexing\n\n\nEnable automatic sitemap generation on the \nOrganic Search\n page of the Branch Dashboard. Check the \nAutomatic sitemap generation\n checkbox.\n\n\n\n\nOnce you enable this, your app will be included in our nightly job to automatically generate sitemaps. These sitemaps can be scraped by Google, and all of the included links can then be indexed.\n\n\nAfter you've enabled App Indexing, this page will showcase the following data:\n\n\n\n\nThe date the sitemap files were last generated (and included at least one of your links)\n\n\nThe total number of links to unique pieces content that Branch has included in sitemaps\n\n\nThe date Google last scraped your links\n\n\nThe total number of times that Google has scraped links to your content\n\n\n\n\nBoth the sitemap itself and statistics about Google scraping your links are updated via nightly map-reduce jobs.\n\n\n\n\nAdvanced\n\n\nConfigure existing website for App Indexing\n\n\nIf you already have your own website, we recommend that you configure your own site for App Indexing rather than use Branch's hosted App Indexing. You want your main website, with your domain and SEO juice to appear in Google rather than try to push your \napp.link\n domain into search results. Therefore, we recommend you go through a few steps to configure your site for App Indexing.\n\n\nApp Indexing, despite the confusing amount of literature out there, simply opens up your app when installed and falls back to your website when not. You actually don't need to use any of Google's tools (Firebase App Indexing) to accomplish this. Merely configuring your domain for Universal Links on iOS and App Links on Android will do the trick. Here are more details:\n\n\nRecommended: Add Universal Link and App Link support to your domain\n\n\nThis is by far the easiest way to take advantage of Google App Indexing, and the recommended way per conversations that we've had with their team. All you need to do is configure Universal Links and Android App Links on your domain and your corresponding apps.\n\n\nWe've put together some handy guides on our blogs:\n- \nEnable Universal Links on your domain\n\n- \nEnable Android App Links on your domain\n\n\nFeel free to drop us a line if you need help with this stuff.\n\n\nAlternative: Have the WebSDK inject App Indexing tags into your Webpage\n\n\nIf you don\u2019t want to implement Universal or App Links then you can allow the WebSDK to inject App Indexing meta tags between the head section of your webpage. These tags allow Google's web crawling bots to index your app content by launching your app through URI schemes.\n\n\nThis requires:\n\n\n\n\n\n\nBranch to be integrated for URI based deep linking. Please ensure that steps 1, 2, 3 and 4 (\niOS\n only) of the following guides are completed:\n\n\n\n\nAndroid SDK Integration Guide\n\n\niOS SDK Integration Guide\n\n\n\n\n\n\n\n\nA call to \nautoAppIndex()\n (a WebSDK function) to be made with the appropriate parameters (see below).\n\n\n\n\n\n\nEnsure that you've placed the snippet from \nhere\n somewhere between the \nhead\n/head\n tags of your webpage. Then position \nbranch.autoAppIndex({..})\n below \nbranch.init()\n and with the optional parameters below:\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n\"androidPackageName\"\n\n\nAndroid App's package name\n\n\n\n\n\n\n\"androidURL\"\n\n\nA custom scheme for your Android App such as: \nexample/home/cupertino/12345\n where \nexample\n is the App's URI scheme and \nhome/cupertino/12345\n routes to unique content in the App\n\n\n\n\n\n\n\"iosAppId\"\n\n\niTunes App Store ID for your iOS App\n\n\n\n\n\n\n\"iosURL\"\n\n\nA custom scheme for your iOS App such as: \nexample/home/cupertino/12345\n\n\n\n\n\n\n\"data\"\n\n\nAny additional deep link data that you would like to pass to your App\n\n\n\n\n\n\n\n\nbranch\n.\nautoAppIndex\n({\n\n    \niosAppId\n:\n123456789\n,\n\n    \niosURL\n:\nexample/home/cupertino/12345\n,\n\n    \nandroidPackageName\n:\ncom.somecompany.app\n,\n\n    \nandroidURL\n:\nexample/home/cupertino/12345\n,\n\n    \ndata\n:\n{\nwalkScore\n:\n65\n,\n \ntransitScore\n:\n50\n}\n\n\n},\n \nfunction\n(\nerr\n)\n \n{\n \nconsole\n.\nlog\n(\nerr\n);\n \n});\n\n\n\n\n\nAfter the WebSDK has initialized, the function will inject Firebase App Indexing tags between the head section of your webpage with the following format:\n\n\nhtml\n\n\nhead\n\n  ...\n  \nlink\n \nrel\n=\nalternate\n \nhref\n=\nandroid-app://{androidPackageName}/{androidURL}?{branch_tracking_params_and_additional_deep_link_data}\n/\n\n  \nlink\n \nrel\n=\nalternate\n \nhref\n=\nios-app://{iosAppId}/{iosURL}?{branch_tracking_params_and_additional_deep_link_data}\n/\n\n  ...\n\n/\nhead\n\n\nbody\n \u2026 \n/\nbody\n\n\n\n\n\nNote\n: If optional parameters from above are not specified, Branch will try to build Firebase App Indexing tags using your page's \nApp Links\n tags.\n\n\nAlternatively, if optional parameters are specified but Firebase App Indexing tags already exist then this function will append Branch tracking params to the end of those tags and ignore what is passed into \n.autoAppIndex()\n.\n\n\nFor debugging purposes, you can check that the method is correctly inserting these tags by right clicking anywhere on your webpage in Chrome then clicking on inspect. After that, toggle the head section of your page's HTML and you should see the dynamically generated Firebase App Indexing tags.\n\n\nAnalytics related to Google's attempts to index your App's content via these tags can be found from Source Analytics in Dashboard where \nchannel\n is \nFirebase App Indexing\n and \nfeature\n is \nAuto App Indexing\n.\n\n\n\n\nTesting with webmaster tools\n\n\nWe have read on Google's official blog that Googlebot renders javascript before it indexes webpages however, there are times where it may choose not to. The reasons why are unclear to us. Therefore, dynamically generated App Indexing meta tags created as part of this function may or may not appear in your tests with Webmaster Tools when you try to fetch and render as Googlebot.\n\n\n\n\nAttribute app traffic to organic search\n\n\nCurious as to how well your content is performing -- how many clicks and installs it is driving?\n\n\nWe automatically tag clicks on these links as coming from Google App Indexing. In the Click Flow section of our Dashboard's \nSummary\n page, you can filter for these clicks. Just select either \nchannel: google_search\n or \nfeature: google_app_index\n.\n\n\nHiding content from the index\n\n\nNot all content is public, and not all content should be publicly indexed. If you want to enable Branch's automatic sitemap generation but exclude certain pieces of content, you can mark that content as private. You should set the content indexing mode for the individual Branch Universal Object. This property is called \ncontentIndexMode\n.\n\n\nBranchUniversalObject\n \n*\nbranchUniversalObject\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nitem/12345\n];\n\n\nbranchUniversalObject\n.\ncontentIndexMode\n \n=\n \nContentIndexModePrivate\n;\n\n\n\n\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/12345\n)\n\n\nbranchUniversalObject\n.\ncontentIndexMode\n \n=\n \nContentIndexModePrivate\n\n\n\n\n\n \nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n                \n.\nsetCanonicalIdentifier\n(\nitem/12345\n)\n\n                \n.\nsetContentIndexingMode\n(\nBranchUniversalObject\n.\nCONTENT_INDEX_MODE\n.\nPRIVATE\n);", 
            "title": "Firebase"
        }, 
        {
            "location": "/pages/organic-search/firebase/#overview", 
            "text": "Google's App Indexing is a project that attempts to expose app results in Google searches performed on mobile devices. This project is formally called Firebase App Indexing.  At a high level, App Indexing has two themes to consider.   Results, ranking and relevancy are based upon web scraping. App Indexing does not improve relevancy in results.  App Indexing makes it so that web results  also  open up your app.   When enabling App Indexing, you will likely want to make these changes to your website, as well:   Make your existing website support Apple's Universal Links and Android's App Links. After this, all of your links will correctly open the app and you're done.  Add the undocumented header  link rel=\"alternate\" ..  tags to your website for when Google crawls the page. Branch can assist with this using  autoAppIndex() , documented below.   If Google knows your website opens the app, when it shows up in a search result, and the user has the app installed, the app will open instead of the website, therefore achieveing App Indexing results in organic search portals.  Branch's App Indexing integration is designed for businesses that don't have a website, and want Branch to host their site for them. If you have a website, Branch can dynamically inject App Indexing tags through the WebSDK function  autoAppIndex()  described  here .  Note that in order for you to get traffic from this feature, your Branch link will need to appear in search results. We've just now supercharged our app indexing feature with AMP tech to leverage Google's new prioritization of these pages.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/organic-search/firebase/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/organic-search/firebase/#index-your-content", 
            "text": "Assuming you followed our get started guide, you have already indexed your content by creating  Branch Universal Objects . If you haven't, please go to the get started section and do so.", 
            "title": "Index Your Content"
        }, 
        {
            "location": "/pages/organic-search/firebase/#enable-app-indexing", 
            "text": "Enable automatic sitemap generation on the  Organic Search  page of the Branch Dashboard. Check the  Automatic sitemap generation  checkbox.   Once you enable this, your app will be included in our nightly job to automatically generate sitemaps. These sitemaps can be scraped by Google, and all of the included links can then be indexed.  After you've enabled App Indexing, this page will showcase the following data:   The date the sitemap files were last generated (and included at least one of your links)  The total number of links to unique pieces content that Branch has included in sitemaps  The date Google last scraped your links  The total number of times that Google has scraped links to your content   Both the sitemap itself and statistics about Google scraping your links are updated via nightly map-reduce jobs.", 
            "title": "Enable App Indexing"
        }, 
        {
            "location": "/pages/organic-search/firebase/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/organic-search/firebase/#configure-existing-website-for-app-indexing", 
            "text": "If you already have your own website, we recommend that you configure your own site for App Indexing rather than use Branch's hosted App Indexing. You want your main website, with your domain and SEO juice to appear in Google rather than try to push your  app.link  domain into search results. Therefore, we recommend you go through a few steps to configure your site for App Indexing.  App Indexing, despite the confusing amount of literature out there, simply opens up your app when installed and falls back to your website when not. You actually don't need to use any of Google's tools (Firebase App Indexing) to accomplish this. Merely configuring your domain for Universal Links on iOS and App Links on Android will do the trick. Here are more details:", 
            "title": "Configure existing website for App Indexing"
        }, 
        {
            "location": "/pages/organic-search/firebase/#recommended-add-universal-link-and-app-link-support-to-your-domain", 
            "text": "This is by far the easiest way to take advantage of Google App Indexing, and the recommended way per conversations that we've had with their team. All you need to do is configure Universal Links and Android App Links on your domain and your corresponding apps.  We've put together some handy guides on our blogs:\n-  Enable Universal Links on your domain \n-  Enable Android App Links on your domain  Feel free to drop us a line if you need help with this stuff.", 
            "title": "Recommended: Add Universal Link and App Link support to your domain"
        }, 
        {
            "location": "/pages/organic-search/firebase/#alternative-have-the-websdk-inject-app-indexing-tags-into-your-webpage", 
            "text": "If you don\u2019t want to implement Universal or App Links then you can allow the WebSDK to inject App Indexing meta tags between the head section of your webpage. These tags allow Google's web crawling bots to index your app content by launching your app through URI schemes.  This requires:    Branch to be integrated for URI based deep linking. Please ensure that steps 1, 2, 3 and 4 ( iOS  only) of the following guides are completed:   Android SDK Integration Guide  iOS SDK Integration Guide     A call to  autoAppIndex()  (a WebSDK function) to be made with the appropriate parameters (see below).    Ensure that you've placed the snippet from  here  somewhere between the  head /head  tags of your webpage. Then position  branch.autoAppIndex({..})  below  branch.init()  and with the optional parameters below:     Key  Value      \"androidPackageName\"  Android App's package name    \"androidURL\"  A custom scheme for your Android App such as:  example/home/cupertino/12345  where  example  is the App's URI scheme and  home/cupertino/12345  routes to unique content in the App    \"iosAppId\"  iTunes App Store ID for your iOS App    \"iosURL\"  A custom scheme for your iOS App such as:  example/home/cupertino/12345    \"data\"  Any additional deep link data that you would like to pass to your App     branch . autoAppIndex ({ \n     iosAppId : 123456789 , \n     iosURL : example/home/cupertino/12345 , \n     androidPackageName : com.somecompany.app , \n     androidURL : example/home/cupertino/12345 , \n     data : { walkScore : 65 ,   transitScore : 50 }  },   function ( err )   {   console . log ( err );   });   After the WebSDK has initialized, the function will inject Firebase App Indexing tags between the head section of your webpage with the following format:  html  head \n  ...\n   link   rel = alternate   href = android-app://{androidPackageName}/{androidURL}?{branch_tracking_params_and_additional_deep_link_data} / \n   link   rel = alternate   href = ios-app://{iosAppId}/{iosURL}?{branch_tracking_params_and_additional_deep_link_data} / \n  ... / head  body  \u2026  / body   Note : If optional parameters from above are not specified, Branch will try to build Firebase App Indexing tags using your page's  App Links  tags.  Alternatively, if optional parameters are specified but Firebase App Indexing tags already exist then this function will append Branch tracking params to the end of those tags and ignore what is passed into  .autoAppIndex() .  For debugging purposes, you can check that the method is correctly inserting these tags by right clicking anywhere on your webpage in Chrome then clicking on inspect. After that, toggle the head section of your page's HTML and you should see the dynamically generated Firebase App Indexing tags.  Analytics related to Google's attempts to index your App's content via these tags can be found from Source Analytics in Dashboard where  channel  is  Firebase App Indexing  and  feature  is  Auto App Indexing .   Testing with webmaster tools  We have read on Google's official blog that Googlebot renders javascript before it indexes webpages however, there are times where it may choose not to. The reasons why are unclear to us. Therefore, dynamically generated App Indexing meta tags created as part of this function may or may not appear in your tests with Webmaster Tools when you try to fetch and render as Googlebot.", 
            "title": "Alternative: Have the WebSDK inject App Indexing tags into your Webpage"
        }, 
        {
            "location": "/pages/organic-search/firebase/#attribute-app-traffic-to-organic-search", 
            "text": "Curious as to how well your content is performing -- how many clicks and installs it is driving?  We automatically tag clicks on these links as coming from Google App Indexing. In the Click Flow section of our Dashboard's  Summary  page, you can filter for these clicks. Just select either  channel: google_search  or  feature: google_app_index .", 
            "title": "Attribute app traffic to organic search"
        }, 
        {
            "location": "/pages/organic-search/firebase/#hiding-content-from-the-index", 
            "text": "Not all content is public, and not all content should be publicly indexed. If you want to enable Branch's automatic sitemap generation but exclude certain pieces of content, you can mark that content as private. You should set the content indexing mode for the individual Branch Universal Object. This property is called  contentIndexMode .  BranchUniversalObject   * branchUniversalObject   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ item/12345 ];  branchUniversalObject . contentIndexMode   =   ContentIndexModePrivate ;   let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   item/12345 )  branchUniversalObject . contentIndexMode   =   ContentIndexModePrivate     BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n                 . setCanonicalIdentifier ( item/12345 ) \n                 . setContentIndexingMode ( BranchUniversalObject . CONTENT_INDEX_MODE . PRIVATE );", 
            "title": "Hiding content from the index"
        }, 
        {
            "location": "/pages/organic-search/spotlight/", 
            "text": "Overview\n\n\nListing your app content on Apple's new Spotlight search with Branch is easy. Note that this guide will list on both \ncloud search\n and \nlocal spotlight search\n.\n\n\n\n\nWarning\n\n\nSome older devices cannot index content. iPad minis, for example, cannot use CoreSpotlight. The SDK includes a check for these devices and will return an error message if you attempt to index content on them.\n\n\n\n\nSetup\n\n\n\n\nPre-reqs\n\n\nThis guide requires you to have already \nintegrated the Branch SDK\n into your app. For Spotlight search results to function as intended, you should also \nconfigure deep link routing\n.\n\n\n\n\n{% endprerequisite %}\n\n\nList Content\n\n\nContent can be added to Spotlight search by using the \nBranchUniversalObject\n. We'd recommend that you put this on every page that renders a piece of content for your users. This way, a user could rediscover a previous thing that they had viewed.\n\n\nFirst, define the content that you'd like to be listed by customizing the \nBranchUniversalObject\n. We'd recommend that you do this in \nviewDidLoad\n\n\nBranchUniversalObject\n \n*\nbranchUniversalObject\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nitem/12345\n];\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \n@\nMy Content Title\n;\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \n@\nMy Content Description\n;\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \n@\nhttps://example.com/mycontent-12345.png\n;\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\nproperty1\n \nvalue\n:\n@\nblue\n];\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\nproperty2\n \nvalue\n:\n@\nred\n];\n\n\n\n// important to set this flag to true\n\n\nbranchUniversalObject\n.\nautomaticallyListOnSpotlight\n \n=\n \nYES\n;\n\n\n\n\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/12345\n)\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \nMy Content Title\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \nMy Content Description\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \nhttps://example.com/mycontent-12345.png\n\n\nbranchUniversalObject\n.\naddMetadataKey\n(\nproperty1\n,\n \nvalue\n:\n \nblue\n)\n\n\nbranchUniversalObject\n.\naddMetadataKey\n(\nproperty2\n,\n \nvalue\n:\n \nred\n)\n\n\n\n// important to set this flag to true\n\n\nbranchUniversalObject\n.\nautomaticallyListOnSpotlight\n \n=\n \ntrue\n\n\n{\n%\n \nendhighlight\n \n%\n}\n\n\n\n\n\nThen call the \nuserCompletedAction\n method with the \nView\n event on your \nBranchUniversalObject\n. You will want to do this every single time a user goes to view a page in your app, so we recommend putting this in \nviewDidAppear\n, which means you must initialize the Branch Universal Object with all appropriate metadata before \nviewDidAppear\n.\n\n\n[\nbranchUniversalObject\n \nuserCompletedAction\n:\nBNCRegisterViewEvent\n];\n\n\n\n\n\nbranchUniversalObject\n.\nuserCompletedAction\n(\nBNCRegisterViewEvent\n)\n\n\n\n\n\nThis will create the appropriate NSUserActivity and tell Apple that a view occurred, adding it to the local Spotlight index if not already present in addition to increasing it's ranking in the global index. To read more about this, check out \nthis blog post\n.\n\n\nHandle incoming traffic from Spotlight\n\n\nOpen your \nAppDelegate.m\n file and add the following method. If you completed the basic SDK integration guide, this is likely already present.\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ncontinueUserActivity:\n(\nNSUserActivity\n \n*\n)\nuserActivity\n \nrestorationHandler:\n(\nvoid\n \n(\n^\n)(\nNSArray\n \n*\nrestorableObjects\n))\nrestorationHandler\n \n{\n\n    \n[[\nBranch\n \ngetInstance\n]\n \ncontinueUserActivity\n:\nuserActivity\n];\n\n\n    \nreturn\n \nYES\n;\n\n\n}\n\n\n\n\n\nIn Swift:\n\n\n{\n%\n \nhighlight\n \nswift\n \n%\n}\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ncontinue\n \nuserActivity\n:\n \nNSUserActivity\n,\n \nrestorationHandler\n:\n \n@\nescaping\n \n([\nAny\n]?)\n \n-\n \nVoid\n)\n \n-\n \nBool\n \n{\n\n    \n// pass the url to the handle deep link call\n\n    \nreturn\n \nBranch\n.\ngetInstance\n().\ncontinueUserActivity\n(\nuserActivity\n)\n\n\n    \nreturn\n \ntrue\n\n\n}\n\n\n\n\n\nAdvanced\n\n\nUse deepviews for user acquisition\n\n\nIf the user doesn't have the app installed and finds your content through search, Spotlight will open up the browser. In this situation, you can \nshow a Deepview\n, which is an automatically-generated, mobile web render of the app content.\n\n\nCustomize content\n\n\nYou can use our identifier when indexing to perform advanced customizations of the content being listed.\n\n\n[\nbranch\n \ngetSpotlightUrlWithParams\n:\n@{\n@\n$og_title\n:\n \n@\nMy App\n,\n\n                                    \n@\n$og_description\n:\n \n@\nMy app is disrupting apps\n,\n\n                                    \n@\n$og_thumb\n:\n \n@\nhttps://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png\n,\n\n                                    \n@\nobject_id\n:\n \n@\n1234\n}\n\n                         \ncallback\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n \n \nparams\n)\n \n{\n\n        \n// params will contain @\nurl\n and @\nspotlight_identifier\n\n        \n// the example below shows where to use them\n\n\n        \n// Index via the NSUserActivity strategy\n\n        \n// you must set the new NSUserActivity to the property of a UIViewController\n\n        \nself\n.\nuserActivity\n \n=\n \n[[\nNSUserActivity\n \nalloc\n]\n \ninitWithActivityType\n:\nparams\n[\n@\nspotlight_identifer\n]];\n\n        \nself\n.\nuserActivity\n.\nwebpageURL\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\nurl\n]];\n\n        \n[\nself\n.\nuserActivity\n \nbecomeCurrent\n];\n\n    \n}\n\n\n}];\n\n\n\n\n\nIndex content at scale\n\n\nIf the goal is to simply index the content of the app without creating a \nBranchUniversalObject\n or if you want index content at scale then we recommend using the following method:\n\n\nBranchCSSearchableItemAttributeSet\n \n*\nset\n \n=\n \n[[\nBranchCSSearchableItemAttributeSet\n \nalloc\n]\n \ninit\n];\n\n\nset\n.\ntitle\n \n=\n \n@\nMy Content Title\n;\n\n\nset\n.\ncontentDescription\n \n=\n \n@\nMy Content Description\n;\n\n\nset\n.\nparams\n \n=\n \n@{\n@\nproperty1\n \n:\n \n@\nblue\n,\n \n@\nproperty2\n \n:\n \n@\nred\n}\n;\n\n\nset\n.\nkeywords\n \n=\n \n[\nNSSet\n \nsetWithArray\n:\n@[\narray\n,\n \nof\n,\n \nkeywords\n]\n];\n\n\nset\n.\nthumbnailURL\n \n=\n \n@\nhttps://example.com/mycontent-12345.png\n;\n\n\n\n[\nset\n \nindexWithCallback\n:\n^\n(\nNSString\n \n*\n \n_Nullable\n \nurl\n,\n \nNSString\n \n*\n \n_Nullable\n \nspotlightIdentifier\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n        \nNSLog\n(\n@\nurl %@, spotlightIdentifier %@, error %@ \n,\n \nurl\n,\n \nspotlightIdentifier\n,\n \nerror\n);\n\n\n}];", 
            "title": "Spotlight"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#overview", 
            "text": "Listing your app content on Apple's new Spotlight search with Branch is easy. Note that this guide will list on both  cloud search  and  local spotlight search .   Warning  Some older devices cannot index content. iPad minis, for example, cannot use CoreSpotlight. The SDK includes a check for these devices and will return an error message if you attempt to index content on them.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#setup", 
            "text": "Pre-reqs  This guide requires you to have already  integrated the Branch SDK  into your app. For Spotlight search results to function as intended, you should also  configure deep link routing .   {% endprerequisite %}", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#list-content", 
            "text": "Content can be added to Spotlight search by using the  BranchUniversalObject . We'd recommend that you put this on every page that renders a piece of content for your users. This way, a user could rediscover a previous thing that they had viewed.  First, define the content that you'd like to be listed by customizing the  BranchUniversalObject . We'd recommend that you do this in  viewDidLoad  BranchUniversalObject   * branchUniversalObject   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ item/12345 ];  branchUniversalObject . title   =   @ My Content Title ;  branchUniversalObject . contentDescription   =   @ My Content Description ;  branchUniversalObject . imageUrl   =   @ https://example.com/mycontent-12345.png ;  [ branchUniversalObject   addMetadataKey : @ property1   value : @ blue ];  [ branchUniversalObject   addMetadataKey : @ property2   value : @ red ];  // important to set this flag to true  branchUniversalObject . automaticallyListOnSpotlight   =   YES ;   let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   item/12345 )  branchUniversalObject . title   =   My Content Title  branchUniversalObject . contentDescription   =   My Content Description  branchUniversalObject . imageUrl   =   https://example.com/mycontent-12345.png  branchUniversalObject . addMetadataKey ( property1 ,   value :   blue )  branchUniversalObject . addMetadataKey ( property2 ,   value :   red )  // important to set this flag to true  branchUniversalObject . automaticallyListOnSpotlight   =   true  { %   endhighlight   % }   Then call the  userCompletedAction  method with the  View  event on your  BranchUniversalObject . You will want to do this every single time a user goes to view a page in your app, so we recommend putting this in  viewDidAppear , which means you must initialize the Branch Universal Object with all appropriate metadata before  viewDidAppear .  [ branchUniversalObject   userCompletedAction : BNCRegisterViewEvent ];   branchUniversalObject . userCompletedAction ( BNCRegisterViewEvent )   This will create the appropriate NSUserActivity and tell Apple that a view occurred, adding it to the local Spotlight index if not already present in addition to increasing it's ranking in the global index. To read more about this, check out  this blog post .", 
            "title": "List Content"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#handle-incoming-traffic-from-spotlight", 
            "text": "Open your  AppDelegate.m  file and add the following method. If you completed the basic SDK integration guide, this is likely already present.  -   ( BOOL ) application: ( UIApplication   * ) application   continueUserActivity: ( NSUserActivity   * ) userActivity   restorationHandler: ( void   ( ^ )( NSArray   * restorableObjects )) restorationHandler   { \n     [[ Branch   getInstance ]   continueUserActivity : userActivity ]; \n\n     return   YES ;  }   In Swift:  { %   highlight   swift   % }  func   application ( _   application :   UIApplication ,   continue   userActivity :   NSUserActivity ,   restorationHandler :   @ escaping   ([ Any ]?)   -   Void )   -   Bool   { \n     // pass the url to the handle deep link call \n     return   Branch . getInstance (). continueUserActivity ( userActivity ) \n\n     return   true  }", 
            "title": "Handle incoming traffic from Spotlight"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#use-deepviews-for-user-acquisition", 
            "text": "If the user doesn't have the app installed and finds your content through search, Spotlight will open up the browser. In this situation, you can  show a Deepview , which is an automatically-generated, mobile web render of the app content.", 
            "title": "Use deepviews for user acquisition"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#customize-content", 
            "text": "You can use our identifier when indexing to perform advanced customizations of the content being listed.  [ branch   getSpotlightUrlWithParams : @{ @ $og_title :   @ My App , \n                                     @ $og_description :   @ My app is disrupting apps , \n                                     @ $og_thumb :   @ https://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png , \n                                     @ object_id :   @ 1234 } \n                          callback : ^ ( NSDictionary   * params ,   NSError   * error )   { \n     if   ( ! error     params )   { \n         // params will contain @ url  and @ spotlight_identifier \n         // the example below shows where to use them \n\n         // Index via the NSUserActivity strategy \n         // you must set the new NSUserActivity to the property of a UIViewController \n         self . userActivity   =   [[ NSUserActivity   alloc ]   initWithActivityType : params [ @ spotlight_identifer ]]; \n         self . userActivity . webpageURL   =   [ NSURL   URLWithString : params [ @ url ]]; \n         [ self . userActivity   becomeCurrent ]; \n     }  }];", 
            "title": "Customize content"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#index-content-at-scale", 
            "text": "If the goal is to simply index the content of the app without creating a  BranchUniversalObject  or if you want index content at scale then we recommend using the following method:  BranchCSSearchableItemAttributeSet   * set   =   [[ BranchCSSearchableItemAttributeSet   alloc ]   init ];  set . title   =   @ My Content Title ;  set . contentDescription   =   @ My Content Description ;  set . params   =   @{ @ property1   :   @ blue ,   @ property2   :   @ red } ;  set . keywords   =   [ NSSet   setWithArray : @[ array ,   of ,   keywords ] ];  set . thumbnailURL   =   @ https://example.com/mycontent-12345.png ;  [ set   indexWithCallback : ^ ( NSString   *   _Nullable   url ,   NSString   *   _Nullable   spotlightIdentifier ,   NSError   *   _Nullable   error )   { \n         NSLog ( @ url %@, spotlightIdentifier %@, error %@  ,   url ,   spotlightIdentifier ,   error );  }];", 
            "title": "Index content at scale"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/", 
            "text": "Overview\n\n\nAt the 2017 Google IO, Google launched the public version of Instant Apps for developers to adopt and build on. Instant Apps are a way to load a partial section (or \nsplit\n as Google refers to them), without the user having to visit the Play Store and install your app. In effect, it's instant access to your native app. If you have been using a website as a fallback when your full Android app is not installed, an Instant App is an alternative. You'll have to choose between mobile web and your Instant App on Android so make sure you plan out your integration!\n\n\nBranch has made it incredibly easy to start using your basic Branch links in your Instant Apps as shown below. The guide on this page will walk you through the full configuration process to enable Branch in your new Instant App.\n\n\n\n\n\n\nNote\n\n\nThis guide is not about how to configure your Android app to be an Instant App. Please see \nGoogle's documentation for detailed instructions\n on how to do this. Come back to this guide when you're ready to enable Branch.\n\n\n\n\nWhy use Branch for your Instant Apps\n\n\nIf you follow Google's guide, they'll have you integrate your own web links as Android App Links, that will trigger Instant Apps. What can Branch do for you then? First off, let me explain how Branch works with Instant Apps. Branch will act as a \nnew\n web domain that you'll register for Android App Links in addition to your own web domain or as your only domain in the manifest. We act as your link.\n\n\nHere's a list of the potential use cases for Branch links and Instant Apps:\n\n\n\n\nBranch will host personalized web links for you since we provision a custom domain (yourapp.app.link or whitelabeled) for every app. If you don't have a website, this means that we can take care of all your Android App Links needs, automatically configuring and hosting the assetlinks.json file on your behalf.\n\n\nIf you have a popular website and have configured Android App Links, you likely don't want 100% of your web links triggering your Instant App. Your Instant App will only support a fraction of your full app functionality. You can configure your Instant App to only trigger on your Branch link domains and paths, then use the usage of Branch to control when users are linked to Instant Apps.\n\n\nBranch can measure and attribute \nclicks\n, \ninstalls\n and custom conversion events back to the Branch tracking link for \nall visits to your Instant App\n, which are visible on the dashboard.\n\n\nYou can use Branch links to deferred deep link from the Android Instant App to the full Android App. You'll likely build a feature that pushes users from the Instant App to the full Android app, and Branch can do its magic on this transition.\n\n\nBranch can measure and attribute \nclicks\n, \ninstalls\n and custom conversion events inside your full native Android App for users who were referred from an Instant App, showing the conversion from click -\n Instant App -\n Full App on the dashboard.\n\n\n\n\nSetup\n\n\nIntegrating Branch for your Instant App\n\n\nSo you're convinced. Let's get started! If at any time, you need a real example, you can check out a \nfull demo application\n on our Github. We've replicated our \noriginal Android demo application\n and modified it to support Android Instant Apps.\n\n\nInitialize the Branch SDK\n\n\nHead to your \ncore library project\n, where your Application class is defined and drop in the snippet of code to the onCreate() method as follows. If you plan on deep linking from your Android Instant App to your full Android app after its installed, you'll need to add the line \nenablePlayStoreReferrer\n. This adds a delay to the initialization to wait for the Google Play Referrer, which can take up to a second.\n\n\npublic\n \nvoid\n \nonCreate\n()\n \n{\n\n  \nsuper\n.\nonCreate\n();\n\n  \n// This is needed to deferred deep link from an Android Instant App to a full app\n\n  \n// It tells the Branch initialization to wait for the Google Play Referrer before proceeding.\n\n  \nBranch\n.\nenablePlayStoreReferrer\n(\n1000L\n);\n\n\n  \n// Initialize the Branch SDK\n\n  \nBranch\n.\ngetAutoInstance\n(\nthis\n);\n\n\n}\n\n\n\n\n\nAdd your Branch keys and register for Install Referrer\n\n\nInstant Apps can be rather confusing as there are many different manifests, but you want to find the Manifest that contains your \napplication\n tags. Make sure your Application class name is defined here, and then specify the Branch keys \ninside\n the \napplication\n element.\n\n\napplication\n\n        \nandroid:allowBackup=\ntrue\n\n        \nandroid:label=\n@string/app_name\n\n        \nandroid:theme=\n@style/AppTheme\n\n        \nandroid:supportsRtl=\ntrue\n\n        \nandroid:name=\n.MyApplication\n\n\n  \nmeta-data\n \nandroid:name=\nio.branch.sdk.TestMode\n \nandroid:value=\nfalse\n \n/\n \n!-- Set to true to use Branch_Test_Key --\n\n  \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey\n \nandroid:value=\nkey_live_my_live_key\n \n/\n\n  \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey.test\n \nandroid:value=\nkey_test_my_test_key\n \n/\n\n\n  \nreceiver\n \nandroid:name=\nio.branch.referral.InstallListener\n \nandroid:exported=\ntrue\n\n    \nintent-filter\n\n       \naction\n \nandroid:name=\ncom.android.vending.INSTALL_REFERRER\n \n/\n\n    \n/intent-filter\n\n  \n/receiver\n\n\n/application\n\n\n\n\n\nConfigure your Branch links as Android App Links\n\n\nThis guide presumes that you've already configured Branch for Android App Links in the past. If you haven't configured your full native app to use Branch as Android App Links, \nplease complete this guide\n which will correctly configure the dashboard and manifest.\n\n\nNow, you simply need to edit the above manifest and paste in the following snippet \ninside\n the \napplication\n element. Then you'll need to replace the \nxxxx\n with your own custom subdomain which will be visible on \nthe Branch link settings dashboard\n at the bottom of the page. If you're using a custom subdomain, you can find the advanced instructions in the above link regarding configuring Android App Links.\n\n\napplication\n\n  \n......\n\n\n  ......\n\n  \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n      \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n      \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n      \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n      \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nxxxx.app.link\n \n/\n\n      \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nxxxx-alternate.app.link\n \n/\n\n  \n/intent-filter\n\n\n\n/application\n\n\n\n\n\nRetrieve Branch deep link data\n\n\nAdd Branch initSession in Activities which are configured to open from a link click in order to receive the deep link params. This will return the deep link data from the referring link.\n\n\nprotected\n \nvoid\n \nonStart\n()\n \n{\n\n    \nsuper\n.\nonStart\n();\n\n    \nBranch\n.\ngetInstance\n().\ninitSession\n(\nnew\n \nBranch\n.\nBranchReferralInitListener\n()\n \n{\n\n        \n@Override\n\n        \npublic\n \nvoid\n \nonInitFinished\n(\nJSONObject\n \nreferringParams\n,\n \nBranchError\n \nerror\n)\n \n{\n\n            \nLog\n.\nd\n(\nBranch\n,\n \nonInitFinished() with deep link data: \n \n+\n \nreferringParams\n);\n\n        \n}\n\n    \n});\n\n\n}\n\n\n\n\n\nConfigure the deep linking from Instant App to your Full App\n\n\nNow, the user has arrived in your Instant App and you're ready to convert them to install your full native app. Don't worry, Branch as got your covered! We have overridden the default \nshowInstallPrompt\n with a method that auto configures the Google Play prompt with all of the deep link data you need to carry context through install. Additionally, we can provide you the full set of attribution on how many users convert through this prompt.\n\n\nBranch SDK provides convenient methods to check for app types and full app conversion. This eliminates the dependency on Google IA support SDK ('com.google.android.instantapp'). Here are some of the methods that makes life easy\n\n\n\n\nBranch#isInstantApp()\n\n\n\n\nThis convenience methods checks whether the current version of app running is Instant App or Full Android App to allow you convenience\n\n\n\n\nBranch#showInstallPrompt()\n\n\n\n\nThis methods shows an install prompt for the full Android app, allowing you an easy way to pass Branch referring deep data to the full app through the install process. Similar to how deferred deep linking works for Branch normally, the full app will receive the deep link params in the handle callback.\n\n\nThe below example shows how to create a custom Branch Universal Object, the associate it with the installation prompt that will be passed through to your full native Android app after the user installs.\n\n\nif\n \n(\nBranch\n.\nisInstantApp\n(\nthis\n))\n \n{\n\n  \nmyFullAppInstallButton\n.\nsetVisibility\n(\nView\n.\nVISIBLE\n);\n\n  \nmyFullAppInstallButton\n.\nsetOnClickListener\n(\nnew\n \nOnClickListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonClick\n(\nView\n \nv\n)\n \n{\n\n       \nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n            \n.\nsetCanonicalIdentifier\n(\nitem/12345\n)\n\n            \n.\nsetTitle\n(\nMy Content Title\n)\n\n            \n.\nsetContentDescription\n(\nMy Content Description\n)\n\n            \n.\nsetContentImageUrl\n(\nhttps://example.com/mycontent-12345.png\n)\n\n            \n.\naddContentMetadata\n(\nproperty1\n,\n \nblue\n)\n\n            \n.\naddContentMetadata\n(\nproperty2\n,\n \nred\n);\n\n\n      \nBranch\n.\nshowInstallPrompt\n(\nmyActivity\n,\n \nactivity_ret_code\n,\n \nbranchUniversalObject\n);\n\n    \n}\n\n  \n});\n\n\n}\n \nelse\n \n{\n\n  \nmyFullAppInstallButton\n.\nsetVisibility\n(\nView\n.\nGONE\n);\n\n\n}\n\n\n\n\n\nTroubleshooting\n\n\nTest Instant Apps\n\n\nYou can create Branch links in \na million different ways\n, but to quickly test your Branch integration, head to the \nquick links section\n on our dashboard and create a link. If you configured deep linking via a specific key in the deep link data, make sure that you add it to your quick link to properly simulate a real live Branch link.", 
            "title": "Android Instant Apps"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#overview", 
            "text": "At the 2017 Google IO, Google launched the public version of Instant Apps for developers to adopt and build on. Instant Apps are a way to load a partial section (or  split  as Google refers to them), without the user having to visit the Play Store and install your app. In effect, it's instant access to your native app. If you have been using a website as a fallback when your full Android app is not installed, an Instant App is an alternative. You'll have to choose between mobile web and your Instant App on Android so make sure you plan out your integration!  Branch has made it incredibly easy to start using your basic Branch links in your Instant Apps as shown below. The guide on this page will walk you through the full configuration process to enable Branch in your new Instant App.    Note  This guide is not about how to configure your Android app to be an Instant App. Please see  Google's documentation for detailed instructions  on how to do this. Come back to this guide when you're ready to enable Branch.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#why-use-branch-for-your-instant-apps", 
            "text": "If you follow Google's guide, they'll have you integrate your own web links as Android App Links, that will trigger Instant Apps. What can Branch do for you then? First off, let me explain how Branch works with Instant Apps. Branch will act as a  new  web domain that you'll register for Android App Links in addition to your own web domain or as your only domain in the manifest. We act as your link.  Here's a list of the potential use cases for Branch links and Instant Apps:   Branch will host personalized web links for you since we provision a custom domain (yourapp.app.link or whitelabeled) for every app. If you don't have a website, this means that we can take care of all your Android App Links needs, automatically configuring and hosting the assetlinks.json file on your behalf.  If you have a popular website and have configured Android App Links, you likely don't want 100% of your web links triggering your Instant App. Your Instant App will only support a fraction of your full app functionality. You can configure your Instant App to only trigger on your Branch link domains and paths, then use the usage of Branch to control when users are linked to Instant Apps.  Branch can measure and attribute  clicks ,  installs  and custom conversion events back to the Branch tracking link for  all visits to your Instant App , which are visible on the dashboard.  You can use Branch links to deferred deep link from the Android Instant App to the full Android App. You'll likely build a feature that pushes users from the Instant App to the full Android app, and Branch can do its magic on this transition.  Branch can measure and attribute  clicks ,  installs  and custom conversion events inside your full native Android App for users who were referred from an Instant App, showing the conversion from click -  Instant App -  Full App on the dashboard.", 
            "title": "Why use Branch for your Instant Apps"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#integrating-branch-for-your-instant-app", 
            "text": "So you're convinced. Let's get started! If at any time, you need a real example, you can check out a  full demo application  on our Github. We've replicated our  original Android demo application  and modified it to support Android Instant Apps.", 
            "title": "Integrating Branch for your Instant App"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#initialize-the-branch-sdk", 
            "text": "Head to your  core library project , where your Application class is defined and drop in the snippet of code to the onCreate() method as follows. If you plan on deep linking from your Android Instant App to your full Android app after its installed, you'll need to add the line  enablePlayStoreReferrer . This adds a delay to the initialization to wait for the Google Play Referrer, which can take up to a second.  public   void   onCreate ()   { \n   super . onCreate (); \n   // This is needed to deferred deep link from an Android Instant App to a full app \n   // It tells the Branch initialization to wait for the Google Play Referrer before proceeding. \n   Branch . enablePlayStoreReferrer ( 1000L ); \n\n   // Initialize the Branch SDK \n   Branch . getAutoInstance ( this );  }", 
            "title": "Initialize the Branch SDK"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#add-your-branch-keys-and-register-for-install-referrer", 
            "text": "Instant Apps can be rather confusing as there are many different manifests, but you want to find the Manifest that contains your  application  tags. Make sure your Application class name is defined here, and then specify the Branch keys  inside  the  application  element.  application \n         android:allowBackup= true \n         android:label= @string/app_name \n         android:theme= @style/AppTheme \n         android:supportsRtl= true \n         android:name= .MyApplication \n\n   meta-data   android:name= io.branch.sdk.TestMode   android:value= false   /   !-- Set to true to use Branch_Test_Key -- \n   meta-data   android:name= io.branch.sdk.BranchKey   android:value= key_live_my_live_key   / \n   meta-data   android:name= io.branch.sdk.BranchKey.test   android:value= key_test_my_test_key   / \n\n   receiver   android:name= io.branch.referral.InstallListener   android:exported= true \n     intent-filter \n        action   android:name= com.android.vending.INSTALL_REFERRER   / \n     /intent-filter \n   /receiver  /application", 
            "title": "Add your Branch keys and register for Install Referrer"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#configure-your-branch-links-as-android-app-links", 
            "text": "This guide presumes that you've already configured Branch for Android App Links in the past. If you haven't configured your full native app to use Branch as Android App Links,  please complete this guide  which will correctly configure the dashboard and manifest.  Now, you simply need to edit the above manifest and paste in the following snippet  inside  the  application  element. Then you'll need to replace the  xxxx  with your own custom subdomain which will be visible on  the Branch link settings dashboard  at the bottom of the page. If you're using a custom subdomain, you can find the advanced instructions in the above link regarding configuring Android App Links.  application \n   ...... \n\n  ......\n\n   intent-filter   android:autoVerify= true \n       action   android:name= android.intent.action.VIEW   / \n       category   android:name= android.intent.category.DEFAULT   / \n       category   android:name= android.intent.category.BROWSABLE   / \n       data   android:scheme= https   android:host= xxxx.app.link   / \n       data   android:scheme= https   android:host= xxxx-alternate.app.link   / \n   /intent-filter  /application", 
            "title": "Configure your Branch links as Android App Links"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#retrieve-branch-deep-link-data", 
            "text": "Add Branch initSession in Activities which are configured to open from a link click in order to receive the deep link params. This will return the deep link data from the referring link.  protected   void   onStart ()   { \n     super . onStart (); \n     Branch . getInstance (). initSession ( new   Branch . BranchReferralInitListener ()   { \n         @Override \n         public   void   onInitFinished ( JSONObject   referringParams ,   BranchError   error )   { \n             Log . d ( Branch ,   onInitFinished() with deep link data:    +   referringParams ); \n         } \n     });  }", 
            "title": "Retrieve Branch deep link data"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#configure-the-deep-linking-from-instant-app-to-your-full-app", 
            "text": "Now, the user has arrived in your Instant App and you're ready to convert them to install your full native app. Don't worry, Branch as got your covered! We have overridden the default  showInstallPrompt  with a method that auto configures the Google Play prompt with all of the deep link data you need to carry context through install. Additionally, we can provide you the full set of attribution on how many users convert through this prompt.  Branch SDK provides convenient methods to check for app types and full app conversion. This eliminates the dependency on Google IA support SDK ('com.google.android.instantapp'). Here are some of the methods that makes life easy   Branch#isInstantApp()   This convenience methods checks whether the current version of app running is Instant App or Full Android App to allow you convenience   Branch#showInstallPrompt()   This methods shows an install prompt for the full Android app, allowing you an easy way to pass Branch referring deep data to the full app through the install process. Similar to how deferred deep linking works for Branch normally, the full app will receive the deep link params in the handle callback.  The below example shows how to create a custom Branch Universal Object, the associate it with the installation prompt that will be passed through to your full native Android app after the user installs.  if   ( Branch . isInstantApp ( this ))   { \n   myFullAppInstallButton . setVisibility ( View . VISIBLE ); \n   myFullAppInstallButton . setOnClickListener ( new   OnClickListener ()   { \n     @Override \n     public   void   onClick ( View   v )   { \n        BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n             . setCanonicalIdentifier ( item/12345 ) \n             . setTitle ( My Content Title ) \n             . setContentDescription ( My Content Description ) \n             . setContentImageUrl ( https://example.com/mycontent-12345.png ) \n             . addContentMetadata ( property1 ,   blue ) \n             . addContentMetadata ( property2 ,   red ); \n\n       Branch . showInstallPrompt ( myActivity ,   activity_ret_code ,   branchUniversalObject ); \n     } \n   });  }   else   { \n   myFullAppInstallButton . setVisibility ( View . GONE );  }", 
            "title": "Configure the deep linking from Instant App to your Full App"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#test-instant-apps", 
            "text": "You can create Branch links in  a million different ways , but to quickly test your Branch integration, head to the  quick links section  on our dashboard and create a link. If you configured deep linking via a specific key in the deep link data, make sure that you add it to your quick link to properly simulate a real live Branch link.", 
            "title": "Test Instant Apps"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/", 
            "text": "Overview\n\n\nWith iOS 10, Branch has \nadded support\n for extension type apps so that you can bundle the SDK into your iMessage app. Apple didn't build full deep linking support into extension apps, so unfortunately the use cases are limited to driving new installs for now. We'll wait patiently to observe updates over time\n\n\niMessage apps are now completely separate from your main App Store app, and should be treated as such. Thus, there is some common confusion that we wanted to clear up regarding how to use Branch with your iMessage app. Here's a list of best practices to ensure your integration is successful.\n\n\nSetup\n\n\nBest practices\n\n\nCreate a separate Branch app for the messages app\n\n\nWe highly recommend that you create a \nseparate\n Branch app via the dashboard for your iMessage app than your full iOS app. Why? Because there's no technical way to handle deep link routing elegantly between your core app and the messages app. Apple has not built support for this use case.\n\n\nConfigure one Branch app's settings to link to your messages app in the iMessage App Store, then configure another Branch app settings to link to your core app in the main App Store. This means you'll integrate the SDK into your messages app with a different Branch key than your main app.\n\n\nOnly use Branch for driving installs of messages apps\n\n\nApple did not build support for the use case where a user clicks a link and the messages app opens. Therefore, Branch cannot open up the existing, pre-installed messages app. Branch can only link to the messages app in the iMessage App Store, even when it's already installed.\n\n\nBecause of this, you should primarily use Branch for tracking installs and deep linking through install. Don't expect a high quality user experience if the app is already installed.\n\n\nMarket your messages app separately from your main app\n\n\nBecause there's no good way to intelligently route to the main App Store, iMessages App Store and existing app depending on the context, we recommend you market your messages app with different links from your main App Store app. So, message to a user you're going to link them to your messages app differently than when you're linking to the App Store app.\n\n\nConfiguring redirects\n\n\nIntroductory concept on messages redirects\n\n\nIf you've read the above, you know that the iMessage App Store is a completely different store than the main App Store. In order to link users to your app in the iMessage App Store, you simply need to append \n?app=messages\n to the link. You can try this on any iOS 10 phone with the links below:\n\n\n\n\niMessages App Store: \nhttps://itunes.apple.com/us/app/classic-mac/id1127542169?app=messages\n\n\nMain App Store: \nhttps://itunes.apple.com/us/app/classic-mac/id1127542169\n\n\n\n\nConfigure your Branch links\n\n\nFirst, create an entirely new app via the \nBranch dashboard\n. You can do this in the pull down selector that shows your app name in the top right section. Then head to the \nlink settings page\n and scroll to the iOS section to configure it as follows:\n\n\n\n\nEnsure you do the following:\n\n\n\n\nUncheck \u201cI have an iOS App\u201d\n\n\nDisable Universal Links\n\n\nPaste the App Store URL with \n?app=messages\n appended into the URL field\n\n\nClick Save\n\n\n\n\nYou're all set! All of your Branch links will correctly link to the iMessages App Store.\n\n\nTroubleshooting\n\n\nTracking installs\n\n\nTo track installs and personalize the first time user experience, you simply need to follow the instructions in the \nSDK integration guide\n for iMessage apps. You'll integrate the SDK just as you have for your main App Store app.", 
            "title": "iMessage Apps"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#overview", 
            "text": "With iOS 10, Branch has  added support  for extension type apps so that you can bundle the SDK into your iMessage app. Apple didn't build full deep linking support into extension apps, so unfortunately the use cases are limited to driving new installs for now. We'll wait patiently to observe updates over time  iMessage apps are now completely separate from your main App Store app, and should be treated as such. Thus, there is some common confusion that we wanted to clear up regarding how to use Branch with your iMessage app. Here's a list of best practices to ensure your integration is successful.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#best-practices", 
            "text": "", 
            "title": "Best practices"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#create-a-separate-branch-app-for-the-messages-app", 
            "text": "We highly recommend that you create a  separate  Branch app via the dashboard for your iMessage app than your full iOS app. Why? Because there's no technical way to handle deep link routing elegantly between your core app and the messages app. Apple has not built support for this use case.  Configure one Branch app's settings to link to your messages app in the iMessage App Store, then configure another Branch app settings to link to your core app in the main App Store. This means you'll integrate the SDK into your messages app with a different Branch key than your main app.", 
            "title": "Create a separate Branch app for the messages app"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#only-use-branch-for-driving-installs-of-messages-apps", 
            "text": "Apple did not build support for the use case where a user clicks a link and the messages app opens. Therefore, Branch cannot open up the existing, pre-installed messages app. Branch can only link to the messages app in the iMessage App Store, even when it's already installed.  Because of this, you should primarily use Branch for tracking installs and deep linking through install. Don't expect a high quality user experience if the app is already installed.", 
            "title": "Only use Branch for driving installs of messages apps"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#market-your-messages-app-separately-from-your-main-app", 
            "text": "Because there's no good way to intelligently route to the main App Store, iMessages App Store and existing app depending on the context, we recommend you market your messages app with different links from your main App Store app. So, message to a user you're going to link them to your messages app differently than when you're linking to the App Store app.", 
            "title": "Market your messages app separately from your main app"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#configuring-redirects", 
            "text": "", 
            "title": "Configuring redirects"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#introductory-concept-on-messages-redirects", 
            "text": "If you've read the above, you know that the iMessage App Store is a completely different store than the main App Store. In order to link users to your app in the iMessage App Store, you simply need to append  ?app=messages  to the link. You can try this on any iOS 10 phone with the links below:   iMessages App Store:  https://itunes.apple.com/us/app/classic-mac/id1127542169?app=messages  Main App Store:  https://itunes.apple.com/us/app/classic-mac/id1127542169", 
            "title": "Introductory concept on messages redirects"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#configure-your-branch-links", 
            "text": "First, create an entirely new app via the  Branch dashboard . You can do this in the pull down selector that shows your app name in the top right section. Then head to the  link settings page  and scroll to the iOS section to configure it as follows:   Ensure you do the following:   Uncheck \u201cI have an iOS App\u201d  Disable Universal Links  Paste the App Store URL with  ?app=messages  appended into the URL field  Click Save   You're all set! All of your Branch links will correctly link to the iMessages App Store.", 
            "title": "Configure your Branch links"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#tracking-installs", 
            "text": "To track installs and personalize the first time user experience, you simply need to follow the instructions in the  SDK integration guide  for iMessage apps. You'll integrate the SDK just as you have for your main App Store app.", 
            "title": "Tracking installs"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/", 
            "text": "Overview\n\n\nTo help you grow your app, Facebook offers a feature called App Invites as an alternative to sharing on the Facebook wall. It is a private, friend-to-friend invite, similar to a direct SMS message.\n\n\n\n\nSet Up\n\n\n\n\nBefore you get started\n\n\nTo use Facebook App Invites, you need to integrate both the Branch and Facebook SDKs.\n\n\n\n\nAuthenticate Branch with Facebook\n\n\nIn order for Branch to work with Facebook App Invites, you must first allow Branch to access your Facebook app information.\n\n\n\n\nLog in to Facebook, navigate to \ndevelopers.facebook.com/apps\n and choose your app. You'll need the \nApp ID\n and \nApp Secret\n.{% image src='/img/pages/features/facebook-app-invites/fb_auth_fb.png' three-quarters center alt='Facebook Auth' %}\n\n\nOn the Branch Dashboard, go to \nLink Settings\n and scroll down to 'Authenticate for Facebook Install Ads'. Enter your \nApp ID\n and \nApp Secret\n from Facebook.{% image src='/img/pages/features/facebook-app-invites/fb_auth_branch.png' three-quarters center alt='Facebook Auth' %}\n\n\nPress 'Authenticate'.\n\n\n\n\nInsert Branch link into App Invite\n\n\nEvery Branch link automatically handles both \nfresh installs\n for new users and \nopens\n for users who already have the app. You simply need to insert it into the Facebook App Invite dialog.\n\n\n\n\n\nIn Objectice C\n\n#import \nBranchUniversalObject.h\n\n\n#import \nBranchLinkProperties.h\n\n\n#import \nFBSDKShareKit/FBSDKShareKit.h\n\n\n\n\nIn Swift\n\nIn\n \nthe\n \nBridging\n \nHeader\n,\n \nadd\n \nthe\n \nfollowing\n:\n\n\n\n{\n%\n \nhighlight\n \nobjective\n-\nc\n \n%\n}\n\n\n#import \nBranch.h\n\n\n#import \nBranchUniversalObject.h\n\n\n#import \nBranchLinkProperties.h\n\n\n#import \nBranchConstants.h\n\n\n#import \nFBSDKShareKit/FBSDKShareKit.h\n\n\n\n\nCreate a \nBranchUniversalObject\n containing details about the user who is initiating the App Invite.\n\n\nBranchUniversalObject\n \n*\nbranchUniversalObject\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nuser/12345\n];\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \n@\nCheck out my app!\n;\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \n@\nYour friend Zack has invited you to check out my app\n;\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \n@\nhttps://example.com/monster-pic-12345.png\n;\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\nuserId\n \nvalue\n:\n@\n12345\n];\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\nuserName\n \nvalue\n:\n@\nZack Zuckerberg\n];\n\n\n\n\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nuser/12345\n)\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \nCheck out my app!\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \nYour friend Zack has invited you to check out my app\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \nhttps://example.com/josh-profile-pic-12345.png\n\n\nbranchUniversalObject\n.\naddMetadataKey\n(\nuserId\n,\n \nvalue\n:\n \n12345\n)\n\n\nbranchUniversalObject\n.\naddMetadataKey\n(\nuserName\n,\n \nvalue\n:\n \nZack Zuckerberg\n)\n\n\n\n\n\nThen define the properties of the link. In the example, our properties reflect that this is an App Invite shared via Facebook:\n\n\nBranchLinkProperties\n*\n \nlinkProperties\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlinkProperties\n.\nfeature\n \n=\n \n@\nApp Invite\n;\n\n\nlinkProperties\n.\nchannel\n \n=\n \n@\nFacebook\n;\n\n\n\n\n\nlet\n \nlinkProperties\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlinkProperties\n.\nfeature\n \n=\n \nApp Invite\n\n\nlinkProperties\n.\nchannel\n \n=\n \nFacebook\n\n\n\n\n\nLastly, trigger the invite!\n\n\n[\nbranchUniversalObject\n \ngetShortUrlWithLinkProperties\n:\nlinkProperties\n \nandCallback\n:\n^\n(\nNSString\n*\n \nurl\n,\n \nNSError\n*\n \nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n \n \nurl\n)\n \n{\n\n        \nFBSDKAppInviteDialog\n*\n \ninviteDialog\n \n=\n \n[\nFBSDKAppInviteDialog\n \nnew\n];\n\n        \nif\n \n([\ninviteDialog\n \ncanShow\n])\n \n{\n\n            \ninviteDialog\n.\ncontent\n \n=\n[[\nFBSDKAppInviteContent\n \nalloc\n]\n \ninit\n];\n\n            \ninviteDialog\n.\ncontent\n.\nappLinkURL\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nurl\n];\n\n            \ninviteDialog\n.\ncontent\n.\nappInvitePreviewImageURL\n \n=\n \n[\nNSURL\n \nURLWithString\n:\n@\nhttps://s3-us-west-1.amazonaws.com/host/zackspic.png\n];\n\n\n            \n[\ninviteDialog\n \nshow\n];\n\n        \n}\n\n    \n}\n\n\n}];\n\n\n\n\n\nbranchUniversalObject\n.\ngetShortUrl\n(\nwith\n:\n \nlinkProperties\n)\n \n{\n \n(\nurl\n,\n \nerror\n)\n \nin\n\n    \nif\n \n(\nerror\n \n==\n \nnil\n)\n \n{\n\n        \nvar\n \ninviteContent\n:\n \nFBSDKAppInviteContent\n \n=\n \nFBSDKAppInviteContent\n()\n\n\n        \ninviteContent\n.\nappLinkURL\n \n=\n \nNSURL\n(\nString\n:\n \nurl\n)\n!\n\n\n        \ninviteDialog\n.\ncontent\n \n=\n \ninviteContent\n\n        \ninviteDialog\n.\ndelegate\n \n=\n \nself\n\n        \ninviteDialog\n.\nshow\n()\n\n    \n}\n\n\n}\n\n\n\n\n\nThen use the Facebook SDK's \nappInviteDialog\n method (\ndocumentation here\n) to show the App Invite dialog:\n\n\n// add these methods in if you extend your sharing view controller with \nFBSDKAppInviteDialogDelegate\n\n\n-\n \n(\nvoid\n)\nappInviteDialog:\n(\nFBSDKAppInviteDialog\n*\n)\n \nappInviteDialog\n\n \ndidCompleteWithResults:\n(\nNSDictionary\n*\n)\n \nresults\n \n{\n\n    \n[[\nBranch\n \ngetInstance\n]\n \nuserCompletedAction\n:\nBNCShareCompletedEvent\n];\n\n    \nNSLog\n(\n@\napp invite dialog did complete\n);\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\nappInviteDialog:\n(\nFBSDKAppInviteDialog\n*\n)\n \nappInviteDialog\n\n       \ndidFailWithError:\n(\nNSError\n*\n)\n \nerror\n \n{\n\n    \nNSLog\n(\n@\napp invite dialog did fail\n);\n\n\n}\n\n\n\n\n\nfunc\n \nappInviteDialog\n(\nappInviteDialog\n:\n \nFBSDKAppInviteDialog\n!,\n \ndidCompleteWithResults\n \nresults\n:\n \n[\nNSObject\n \n:\n \nAnyObject\n]\n!\n)\n \n{\n\n    \nprint\n(\nComplete invite without error\n)\n\n\n}\n\n\n\nfunc\n \nappInviteDialog\n(\nappInviteDialog\n:\n \nFBSDKAppInviteDialog\n!,\n \ndidFailWithError\n \nerror\n:\n \nNSError\n!)\n \n{\n\n    \nNSLog\n(\nError in invite \n\\(\nerror\n)\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nCreate a \nBranchUniversalObject\n containing details about the user who is initiating the App Invite.\n\n\n \nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n                \n.\nsetCanonicalIdentifier\n(\nuser/12345\n)\n\n                \n.\nsetTitle\n(\nCheck out my app!\n)\n\n                \n.\nsetContentDescription\n(\nYour friend Zack has invited you to check out my app!\n)\n\n                \n.\nsetContentImageUrl\n(\nhttps://example.com/monster-pic-12345.png\n)\n\n                \n.\naddContentMetadata\n(\nuserId\n,\n \n12345\n)\n\n                \n.\naddContentMetadata\n(\nuserName\n,\n \nZack Zuckerberg\n);\n\n\n\n\n\nThen define the properties of the link. In the example, our properties reflect that this is an App Invite shared via Facebook:\n\n\nLinkProperties\n \nlinkProperties\n \n=\n \nnew\n \nLinkProperties\n()\n\n               \n.\nsetChannel\n(\nFacebook\n)\n\n               \n.\nsetFeature\n(\nApp Invite\n);\n\n\n\n\n\nThen, create the Branch link and passes it to the Facebook SDK's \nAppInviteDialog\n method (\ndocumentation here\n) to show the App Invite dialog:\n\n\nbranchUniversalObject\n.\ngenerateShortUrl\n(\nthis\n,\n \nlinkProperties\n,\n \nnew\n \nBranchLinkCreateListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonLinkCreate\n(\nString\n \nurl\n,\n \nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n \n \nAppInviteDialog\n.\ncanShow\n())\n \n{\n\n            \nAppInviteContent\n \ncontent\n \n=\n \nnew\n \nAppInviteContent\n.\nBuilder\n()\n\n                        \n.\nsetApplinkUrl\n(\nurl\n)\n\n                        \n.\nsetPreviewImageUrl\n(\nhttps://s3-us-west-1.amazonaws.com/host/zackspic.png\n)\n\n                        \n.\nbuild\n();\n\n            \nAppInviteDialog\n.\nshow\n(\nthis\n,\n \ncontent\n);\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\nView Data\n\n\nThe \nQuick Links page\n on the Branch dashboard shows the performance of each individual link. You can find your link listed in the table with a quick summary of the \ntotal\n clicks and installs.\n\n\n\n\nWarning\n\n\nFacebook prevents Branch from measuring the number of clicks for App Invites, so all click counts will be inaccurate.\n\n\n\n\n\n\nTo view more details stats, click the \nsmall button that looks like a bar chart\n on the far right. Note that these stats are \nlimited to the date range\n at the top. You can expand the range if you'd like.\n\n\n\n\nAdvanced\n\n\nShow personalized welcome screen\n\n\nSince you used a Branch link for the URL in the App Invite, you can use Branch to determine if a new user came from an existing app user, and show a personalized welcome.\n\n\n\n\n\n\n\nThen modify your \nAppDelegate.m\n or \nAppDelegate.swift\n file to handle the incoming links:\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidFinishLaunchingWithOptions:\n(\nNSDictionary\n \n*\n)\nlaunchOptions\n\n\n{\n\n    \n[[\nBranch\n \ngetInstance\n]\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n\n                            \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n        \nif\n \n(\n!\nerror\n \n \nparams\n)\n \n{\n\n            \nif\n \n([[\nparams\n \nobjectForKey\n:\n@\n+clicked_branch_link\n]\n \nboolValue\n])\n \n{\n\n                \n// show personal welcome\n\n            \n}\n\n        \n}\n\n    \n}];\n\n\n    \n[[\nFBSDKApplicationDelegate\n \nsharedInstance\n]\n \napplication\n:\napplication\n\n                                    \ndidFinishLaunchingWithOptions\n:\nlaunchOptions\n];\n\n\n    \nreturn\n \nYES\n;\n\n\n}\n\n\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidFinishLaunchingWithOptions\n \nlaunchOptions\n:\n \n[\nUIApplicationLaunchOptionsKey\n:\n \nAny\n]?)\n \n-\n \nBool\n \n{\n\n    \nbranch\n.\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n,\n \nautomaticallyDisplayDeepLinkController\n:\n \ntrue\n,\n \ndeepLinkHandler\n:\n \n{\n \nparams\n,\n \nerror\n \nin\n\n        \nif\n \nerror\n \n==\n \nnil\n,\n \nlet\n \nparams\n \n=\n \noptParams\n \n{\n\n            \nif\n \n(\nparams\n[\n+clicked_branch_link\n])\n \n{\n\n                \nprint\n(\nnew session was referred by %@\n,\n \nparams\n[\nreferring_user_name\n])\n\n                \n// show personal welcome view controller\n\n            \n}\n\n        \n}\n\n    \n})\n\n\n    \nlet\n \npermissions\n \n=\n \n[\npublic_profile\n,\n \nuser_friends\n,\n \npublish_actions\n]\n\n    \nFBSession\n.\nopenActiveSessionWithPublishPermissions\n(\npermissions\n,\n \ndefaultAudience\n:\n \nFBSessionDefaultAudience\n.\nEveryone\n,\n \nallowLoginUI\n:\n \ntrue\n)\n\n\n    \nreturn\n \ntrue\n\n\n}\n\n\n\n\n\nTo handle other cases than deferred deep links, make sure you follow the instructions on the full SDK integration guide.\n\n\nIf you're working in Android, configure the deep link router that's passed to initSession to handle the case where Branch indicates the session was initialized from a link click.\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonStart\n()\n \n{\n\n    \nsuper\n.\nonStart\n();\n\n    \nBranch\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n(\ngetApplicationContext\n());\n\n    \nbranch\n.\ninitSession\n(\nnew\n \nBranchReferralInitListener\n(){\n\n        \n@Override\n\n        \npublic\n \nvoid\n \nonInitFinished\n(\nJSONObject\n \nreferringParams\n,\n \nBranchError\n \nerror\n)\n \n{\n\n            \nif\n \n(\nreferringParams\n.\ngetBoolean\n(\n+clicked_branch_link\n))\n \n{\n\n                \nLog\n.\ni\n(\nMyApp\n,\n \nnew session was referred by \n \n+\n \nreferringParams\n.\ngetString\n(\nreferring_user_name\n));\n\n                \n// show personal welcome view controller\n\n            \n}\n\n        \n}\n\n    \n},\n \nthis\n.\ngetIntent\n().\ngetData\n(),\n \nthis\n);\n\n\n}\n\n\n\n\n\n\n\nInside the Activity you want to display, you'll need to hook into the \nonNewIntent\n method specified inside the Activity lifecycle and set the intent. This is required for conformity with Facebook's AppLinks.\n\n\nVerify that the activity you're implementing has \nlaunchMode\n set to \nsingleTask\n inside the Manifest declaration.\n\n\nOnce that's done, go to said Activity and do something like the following:\n\n\n\n\n@Override\n\n\npublic\n \nvoid\n \nonNewIntent\n(\nIntent\n \nintent\n)\n \n{\n\n    \nthis\n.\nsetIntent\n(\nintent\n);\n\n\n}\n\n\n\n\n\n\nSupport\n\n\nIssues reading Facebook App Links\n\n\nIf Facebook is having trouble reading the AppLinks from the Branch link, you might see this message while trying to test out the flow. This means that there is something corrupted in the OG tags causing Facebook to not parse it.\n\n\n\n\nRe-scrape OG tags\n\n\nYou can test the OG tags using the \nOG tag tester tool\n provided by Facebook:\n\n\n\n\nPaste the Branch Link into the Input URL box.\n\n\nClick on the Show existing scrape information button.\n\n\nExamine errors regarding App Links from the output window.\n\n\nClick on the Fetch New Scrape Information button. This last step typically resolves this problem if you are certain that your Branch Link Settings are correct.\n\n\n\n\n\n\nNote\n\n\n\n\nYou can further automate the rescraping process by using this command after you create a new link and before you use it for any ads:\n\n\ncurl --insecure \"https://graph.facebook.com/?id=[YOUR-URL-TO-SCRAPE]\nscrape=true\"\n\n\nContinued OG Problems\n\n\n\n\nExamine your \nLink Settings\n and ensure that for all platforms (for which an app is available), that a URI scheme and a link to the app in the Play/App Store is configured. If you are using a Custom URL for your iOS Redirect, then you need to append \n?id[10-digit App Store ID]\n to the URL. This is necessary in order to fully generate the App Links and OG tags that the Facebook scraper expects to find.\n\n\nFor example, if your App Store URL is \nhttps://itunes.apple.com/us/app/my-app-name/id1234567890\n, then your Custom URL value should be \nhttps://example.com?id1234567890\n\n\n\n\n\n\nIf errors from the output window pertain to OG tags i.e. missing title, description etc. then examine link OG tags by appending \n?debug=true\n as described on the \nIntegration Testing page\n.\n\n\nIf you haven't set OG tags on a per link level, then please check your Dashboard's global Social Media Display Customization settings from the \nLink Settings\n page.\n\n\n\n\nKnown issue with App Restrictions\n\n\nA bug exists within the Facebook system that prevents App Links from being read by the robot if you change any of these values from the defaults in your Advanced Facebook App Settings tab. Please make sure the following values are set:\n\n\n\n\nContains Alcohol is set to \nNo\n\n\nAge Restriction is set to \nAnyone (13+)\n\n\nSocial Discovery is set to \nYes\n\n\nCountry Restricted is set to \nNo\n\n\n\n\nIt has to look like this \nexactly\n:\n\n\n\nIP Whitelist\n\n\nBecause Branch has a large distribution of API servers that will be making requests to Facebook on behalf of your app, you cannot have an IP whitelist in your \nFacebook advanced settings\n and still have this integration work. Please remove any IPs from this setting if they are present.\n\n\nFacebook Authentication Issues\n\n\nIf you are having trouble authenticating with Facebook, there are a few things you can check.\n\n\nCheck App ID and App Secret\n\n\nBe sure you have the correct App ID and App Secret. This is the number one source of issues.\n\n\nEmbedded App Secret\n\n\nIf you have entered the correct App ID and Secret but are still getting issues, it may be related to how you are using your Secret. Visit the Settings \n Advanced page on Facebook and check that you don't have the toggle enabled for \"Is your App Secret embedded?\" You will only have this option if you have enabled \"Native or desktop app?\" on this page.\n\n\nIf you have enabled \"Native or desktop app\", then your advanced options should appear like the following:", 
            "title": "Facebook App Invites"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#overview", 
            "text": "To help you grow your app, Facebook offers a feature called App Invites as an alternative to sharing on the Facebook wall. It is a private, friend-to-friend invite, similar to a direct SMS message.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#set-up", 
            "text": "Before you get started  To use Facebook App Invites, you need to integrate both the Branch and Facebook SDKs.", 
            "title": "Set Up"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#authenticate-branch-with-facebook", 
            "text": "In order for Branch to work with Facebook App Invites, you must first allow Branch to access your Facebook app information.   Log in to Facebook, navigate to  developers.facebook.com/apps  and choose your app. You'll need the  App ID  and  App Secret .{% image src='/img/pages/features/facebook-app-invites/fb_auth_fb.png' three-quarters center alt='Facebook Auth' %}  On the Branch Dashboard, go to  Link Settings  and scroll down to 'Authenticate for Facebook Install Ads'. Enter your  App ID  and  App Secret  from Facebook.{% image src='/img/pages/features/facebook-app-invites/fb_auth_branch.png' three-quarters center alt='Facebook Auth' %}  Press 'Authenticate'.", 
            "title": "Authenticate Branch with Facebook"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#insert-branch-link-into-app-invite", 
            "text": "Every Branch link automatically handles both  fresh installs  for new users and  opens  for users who already have the app. You simply need to insert it into the Facebook App Invite dialog.   In Objectice C #import  BranchUniversalObject.h  #import  BranchLinkProperties.h  #import  FBSDKShareKit/FBSDKShareKit.h   In Swift In   the   Bridging   Header ,   add   the   following :  { %   highlight   objective - c   % }  #import  Branch.h  #import  BranchUniversalObject.h  #import  BranchLinkProperties.h  #import  BranchConstants.h  #import  FBSDKShareKit/FBSDKShareKit.h   Create a  BranchUniversalObject  containing details about the user who is initiating the App Invite.  BranchUniversalObject   * branchUniversalObject   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ user/12345 ];  branchUniversalObject . title   =   @ Check out my app! ;  branchUniversalObject . contentDescription   =   @ Your friend Zack has invited you to check out my app ;  branchUniversalObject . imageUrl   =   @ https://example.com/monster-pic-12345.png ;  [ branchUniversalObject   addMetadataKey : @ userId   value : @ 12345 ];  [ branchUniversalObject   addMetadataKey : @ userName   value : @ Zack Zuckerberg ];   let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   user/12345 )  branchUniversalObject . title   =   Check out my app!  branchUniversalObject . contentDescription   =   Your friend Zack has invited you to check out my app  branchUniversalObject . imageUrl   =   https://example.com/josh-profile-pic-12345.png  branchUniversalObject . addMetadataKey ( userId ,   value :   12345 )  branchUniversalObject . addMetadataKey ( userName ,   value :   Zack Zuckerberg )   Then define the properties of the link. In the example, our properties reflect that this is an App Invite shared via Facebook:  BranchLinkProperties *   linkProperties   =   [[ BranchLinkProperties   alloc ]   init ];  linkProperties . feature   =   @ App Invite ;  linkProperties . channel   =   @ Facebook ;   let   linkProperties :   BranchLinkProperties   =   BranchLinkProperties ()  linkProperties . feature   =   App Invite  linkProperties . channel   =   Facebook   Lastly, trigger the invite!  [ branchUniversalObject   getShortUrlWithLinkProperties : linkProperties   andCallback : ^ ( NSString *   url ,   NSError *   error )   { \n     if   ( ! error     url )   { \n         FBSDKAppInviteDialog *   inviteDialog   =   [ FBSDKAppInviteDialog   new ]; \n         if   ([ inviteDialog   canShow ])   { \n             inviteDialog . content   = [[ FBSDKAppInviteContent   alloc ]   init ]; \n             inviteDialog . content . appLinkURL   =   [ NSURL   URLWithString : url ]; \n             inviteDialog . content . appInvitePreviewImageURL   =   [ NSURL   URLWithString : @ https://s3-us-west-1.amazonaws.com/host/zackspic.png ]; \n\n             [ inviteDialog   show ]; \n         } \n     }  }];   branchUniversalObject . getShortUrl ( with :   linkProperties )   {   ( url ,   error )   in \n     if   ( error   ==   nil )   { \n         var   inviteContent :   FBSDKAppInviteContent   =   FBSDKAppInviteContent () \n\n         inviteContent . appLinkURL   =   NSURL ( String :   url ) ! \n\n         inviteDialog . content   =   inviteContent \n         inviteDialog . delegate   =   self \n         inviteDialog . show () \n     }  }   Then use the Facebook SDK's  appInviteDialog  method ( documentation here ) to show the App Invite dialog:  // add these methods in if you extend your sharing view controller with  FBSDKAppInviteDialogDelegate  -   ( void ) appInviteDialog: ( FBSDKAppInviteDialog * )   appInviteDialog \n  didCompleteWithResults: ( NSDictionary * )   results   { \n     [[ Branch   getInstance ]   userCompletedAction : BNCShareCompletedEvent ]; \n     NSLog ( @ app invite dialog did complete );  }  -   ( void ) appInviteDialog: ( FBSDKAppInviteDialog * )   appInviteDialog \n        didFailWithError: ( NSError * )   error   { \n     NSLog ( @ app invite dialog did fail );  }   func   appInviteDialog ( appInviteDialog :   FBSDKAppInviteDialog !,   didCompleteWithResults   results :   [ NSObject   :   AnyObject ] ! )   { \n     print ( Complete invite without error )  }  func   appInviteDialog ( appInviteDialog :   FBSDKAppInviteDialog !,   didFailWithError   error :   NSError !)   { \n     NSLog ( Error in invite  \\( error ) )  }     Create a  BranchUniversalObject  containing details about the user who is initiating the App Invite.    BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n                 . setCanonicalIdentifier ( user/12345 ) \n                 . setTitle ( Check out my app! ) \n                 . setContentDescription ( Your friend Zack has invited you to check out my app! ) \n                 . setContentImageUrl ( https://example.com/monster-pic-12345.png ) \n                 . addContentMetadata ( userId ,   12345 ) \n                 . addContentMetadata ( userName ,   Zack Zuckerberg );   Then define the properties of the link. In the example, our properties reflect that this is an App Invite shared via Facebook:  LinkProperties   linkProperties   =   new   LinkProperties () \n                . setChannel ( Facebook ) \n                . setFeature ( App Invite );   Then, create the Branch link and passes it to the Facebook SDK's  AppInviteDialog  method ( documentation here ) to show the App Invite dialog:  branchUniversalObject . generateShortUrl ( this ,   linkProperties ,   new   BranchLinkCreateListener ()   { \n     @Override \n     public   void   onLinkCreate ( String   url ,   BranchError   error )   { \n         if   ( error   ==   null     AppInviteDialog . canShow ())   { \n             AppInviteContent   content   =   new   AppInviteContent . Builder () \n                         . setApplinkUrl ( url ) \n                         . setPreviewImageUrl ( https://s3-us-west-1.amazonaws.com/host/zackspic.png ) \n                         . build (); \n             AppInviteDialog . show ( this ,   content ); \n         } \n     }  });", 
            "title": "Insert Branch link into App Invite"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#view-data", 
            "text": "The  Quick Links page  on the Branch dashboard shows the performance of each individual link. You can find your link listed in the table with a quick summary of the  total  clicks and installs.   Warning  Facebook prevents Branch from measuring the number of clicks for App Invites, so all click counts will be inaccurate.    To view more details stats, click the  small button that looks like a bar chart  on the far right. Note that these stats are  limited to the date range  at the top. You can expand the range if you'd like.", 
            "title": "View Data"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#show-personalized-welcome-screen", 
            "text": "Since you used a Branch link for the URL in the App Invite, you can use Branch to determine if a new user came from an existing app user, and show a personalized welcome.    Then modify your  AppDelegate.m  or  AppDelegate.swift  file to handle the incoming links:  -   ( BOOL ) application: ( UIApplication   * ) application   didFinishLaunchingWithOptions: ( NSDictionary   * ) launchOptions  { \n     [[ Branch   getInstance ]   initSessionWithLaunchOptions : launchOptions \n                             andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n         if   ( ! error     params )   { \n             if   ([[ params   objectForKey : @ +clicked_branch_link ]   boolValue ])   { \n                 // show personal welcome \n             } \n         } \n     }]; \n\n     [[ FBSDKApplicationDelegate   sharedInstance ]   application : application \n                                     didFinishLaunchingWithOptions : launchOptions ]; \n\n     return   YES ;  }   func   application ( _   application :   UIApplication ,   didFinishLaunchingWithOptions   launchOptions :   [ UIApplicationLaunchOptionsKey :   Any ]?)   -   Bool   { \n     branch . initSession ( launchOptions :   launchOptions ,   automaticallyDisplayDeepLinkController :   true ,   deepLinkHandler :   {   params ,   error   in \n         if   error   ==   nil ,   let   params   =   optParams   { \n             if   ( params [ +clicked_branch_link ])   { \n                 print ( new session was referred by %@ ,   params [ referring_user_name ]) \n                 // show personal welcome view controller \n             } \n         } \n     }) \n\n     let   permissions   =   [ public_profile ,   user_friends ,   publish_actions ] \n     FBSession . openActiveSessionWithPublishPermissions ( permissions ,   defaultAudience :   FBSessionDefaultAudience . Everyone ,   allowLoginUI :   true ) \n\n     return   true  }   To handle other cases than deferred deep links, make sure you follow the instructions on the full SDK integration guide.  If you're working in Android, configure the deep link router that's passed to initSession to handle the case where Branch indicates the session was initialized from a link click.  @Override  protected   void   onStart ()   { \n     super . onStart (); \n     Branch   branch   =   Branch . getInstance ( getApplicationContext ()); \n     branch . initSession ( new   BranchReferralInitListener (){ \n         @Override \n         public   void   onInitFinished ( JSONObject   referringParams ,   BranchError   error )   { \n             if   ( referringParams . getBoolean ( +clicked_branch_link ))   { \n                 Log . i ( MyApp ,   new session was referred by    +   referringParams . getString ( referring_user_name )); \n                 // show personal welcome view controller \n             } \n         } \n     },   this . getIntent (). getData (),   this );  }    Inside the Activity you want to display, you'll need to hook into the  onNewIntent  method specified inside the Activity lifecycle and set the intent. This is required for conformity with Facebook's AppLinks.  Verify that the activity you're implementing has  launchMode  set to  singleTask  inside the Manifest declaration.  Once that's done, go to said Activity and do something like the following:   @Override  public   void   onNewIntent ( Intent   intent )   { \n     this . setIntent ( intent );  }", 
            "title": "Show personalized welcome screen"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#issues-reading-facebook-app-links", 
            "text": "If Facebook is having trouble reading the AppLinks from the Branch link, you might see this message while trying to test out the flow. This means that there is something corrupted in the OG tags causing Facebook to not parse it.", 
            "title": "Issues reading Facebook App Links"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#re-scrape-og-tags", 
            "text": "You can test the OG tags using the  OG tag tester tool  provided by Facebook:   Paste the Branch Link into the Input URL box.  Click on the Show existing scrape information button.  Examine errors regarding App Links from the output window.  Click on the Fetch New Scrape Information button. This last step typically resolves this problem if you are certain that your Branch Link Settings are correct.    Note   You can further automate the rescraping process by using this command after you create a new link and before you use it for any ads:  curl --insecure \"https://graph.facebook.com/?id=[YOUR-URL-TO-SCRAPE] scrape=true\"", 
            "title": "Re-scrape OG tags"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#continued-og-problems", 
            "text": "Examine your  Link Settings  and ensure that for all platforms (for which an app is available), that a URI scheme and a link to the app in the Play/App Store is configured. If you are using a Custom URL for your iOS Redirect, then you need to append  ?id[10-digit App Store ID]  to the URL. This is necessary in order to fully generate the App Links and OG tags that the Facebook scraper expects to find.  For example, if your App Store URL is  https://itunes.apple.com/us/app/my-app-name/id1234567890 , then your Custom URL value should be  https://example.com?id1234567890    If errors from the output window pertain to OG tags i.e. missing title, description etc. then examine link OG tags by appending  ?debug=true  as described on the  Integration Testing page .  If you haven't set OG tags on a per link level, then please check your Dashboard's global Social Media Display Customization settings from the  Link Settings  page.", 
            "title": "Continued OG Problems"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#known-issue-with-app-restrictions", 
            "text": "A bug exists within the Facebook system that prevents App Links from being read by the robot if you change any of these values from the defaults in your Advanced Facebook App Settings tab. Please make sure the following values are set:   Contains Alcohol is set to  No  Age Restriction is set to  Anyone (13+)  Social Discovery is set to  Yes  Country Restricted is set to  No   It has to look like this  exactly :", 
            "title": "Known issue with App Restrictions"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#ip-whitelist", 
            "text": "Because Branch has a large distribution of API servers that will be making requests to Facebook on behalf of your app, you cannot have an IP whitelist in your  Facebook advanced settings  and still have this integration work. Please remove any IPs from this setting if they are present.", 
            "title": "IP Whitelist"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#facebook-authentication-issues", 
            "text": "If you are having trouble authenticating with Facebook, there are a few things you can check.", 
            "title": "Facebook Authentication Issues"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#check-app-id-and-app-secret", 
            "text": "Be sure you have the correct App ID and App Secret. This is the number one source of issues.", 
            "title": "Check App ID and App Secret"
        }, 
        {
            "location": "/pages/app-to-app/facebook-app-invites/#embedded-app-secret", 
            "text": "If you have entered the correct App ID and Secret but are still getting issues, it may be related to how you are using your Secret. Visit the Settings   Advanced page on Facebook and check that you don't have the toggle enabled for \"Is your App Secret embedded?\" You will only have this option if you have enabled \"Native or desktop app?\" on this page.  If you have enabled \"Native or desktop app\", then your advanced options should appear like the following:", 
            "title": "Embedded App Secret"
        }, 
        {
            "location": "/pages/exports/csv/", 
            "text": "", 
            "title": "CSV Export"
        }, 
        {
            "location": "/pages/exports/api/", 
            "text": "", 
            "title": "Export API"
        }, 
        {
            "location": "/pages/exports/webhooks/", 
            "text": "Overview\n\n\nBranch\u2019s webhook system allows you to receive install and down funnel event data from us as it occurs, for install attribution or conversion funnels in your own database. You simply need to specify a URL for us to send all this data to.\n\n\nThe webhook system is very powerful and customizable. You can register to only receive notifications for specific events, or you can register a wildcard and receive all events. You can specify to only receive an event for the first time a user completes it, or every time. You can also specify to only receive events in the case of referrals.\n\n\nSetup\n\n\nRegister webhook\n\n\n\n\nOpen the \nWebhooks\n page on the Branch dashboard.\n\n\nClick \n+ Add A New Webhook\n:\n\n\n\n\n\n\nConfigure webhook criteria\n\n\n\n\nHere are explanations of what each field on this screen controls:\n\n\n\n\nWebhook URL:\n Enter the URL where you would like the events to be sent.\n\n\nPostback Method:\n Events can be sent either via POST or GET.\n\n\nEvent Frequency:\n You can choose to receive a webhook for ever single event occurence, or only for the first time that even is triggered for each unique user.\n\n\nEvent Trigger:\n You may select between the following default events:\n\n\n\n\n\n\n\n\n\n\nEvent\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninstall\n\n\nTriggered the first time a user launches your app\n\n\n\n\n\n\nopen\n\n\nTriggered whenever the app becomes active\n\n\n\n\n\n\nreferred session\n\n\nTriggered in \naddition\n to install, open or web session start if a user comes from a Branch link\n\n\n\n\n\n\nweb session start\n\n\nTriggered when the user views a webpage using the Branch Web SDK\n\n\n\n\n\n\nclick\n\n\nTriggered whenever a Branch link is clicked on any platform\n\n\n\n\n\n\n-- other --\n\n\nEnter an event you \ncreated through the Branch SDK\n, or a wildcard (\n*\n) to return ever single event tracked through Branch.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nThe \nreferred session\n and \nweb session start\n options will only appear after at least one event of that type has been recorded.\n\n\n\n\n\n\nFilter (Advanced):\n See the \nAdvanced\n page to read about customizing when events are sent.\n\n\n\n\nTesting\n\n\nTo test whether your webhook is configured correctly, you can use \nrequestb.in\n. RequestBin gives you a URL that accepts events and allows you to see exactly what Branch is sending.\n\n\n\n\n\n\nGo to \nrequestb.in\n and click \n+ Create a RequestBin\n:\n\n\n\n\n\n\n\n\nCopy the \nBin URL\n:\n\n\n\n\n\n\n\n\nPaste this into the URL field of your Branch webhook's configuration screen:\n\n\n\n\n\n\n\n\nNow whenever your webhook is triggered, you will see a full report on RequestBin:\n\n\n\n\n\n\n\n\nAdvanced\n\n\nSample webhook POST body syntax\n\n\nThere are two types of events that you can listen for, and each has a different format of webhook POST. The two are:\n\n\n\n\nClick\n webhooks: Clicks are the way users interact with your Branch links. Please note that a click does not always have to take place in a browser. For example, clicking a Universal Link will open up the app directly, and therefore no browser metadata information will be present.\n\n\nEvent\n webhooks: Events are user events that either Branch generates or you generate via a call to our event tracking API. Examples are shown on the previous page of this guide.\n\n\n\n\nSample POST body for \nClick\n webhooks\n\n\nPOST\n\n\nUser\n-\nagent\n:\n \nBranch\n \nMetrics\n \nAPI\n\n\nContent\n-\nType\n:\n \napplication\n/\njson\n\n\n{\n\n    \nclick_id\n:\n \na\n \nunique\n \nidentififer\n,\n\n    \nevent\n:\n \nclick\n,\n\n    \nevent_timestamp\n:\n \nlink click timestamp\n,\n\n    \nos\n:\n \niOS\n \n|\n \nAndroid\n,\n\n    \nos_version\n:\n \nthe OS version\n,\n\n    \nmetadata\n:\n \n{\n\n        \nip\n:\n \nclick IP\n,\n\n        \nuserAgent\n:\n \nclick UA\n,\n\n        \nbrowser\n:\n \nbrowser\n,\n\n        \nbrowser_version\n:\n \nbrowser version\n,\n\n        \nbrand\n:\n \nphone brand\n,\n\n        \nmodel\n:\n \nphone model\n,\n\n        \nos\n:\n \nbrowser OS\n,\n\n        \nos_version\n:\n \nOS version\n\n    \n},\n\n    \nquery\n:\n \n{\n \nany\n \nquery\n \nparameters\n \nappeneded\n \nto\n \nthe\n \nlink\n \n},\n\n    \nlink_data\n:\n \n{\n \nlink\n \ndata\n \ndictionary\n \n-\n \nsee\n \nbelow\n \n}\n\n\n}\n\n\n\n// link data dictionary example\n\n\n{\n\n    \nbranch_id\n:\n \nunique identifier for unique link\n,\n\n    \ndate_ms\n:\n \nlink creation date with millisecond\n,\n\n    \ndate_sec\n:\n \nlink creation date with second\n,\n\n    \ndate\n:\n \nlink creation date\n,\n\n    \ndomain\n:\n \ndomain label\n,\n\n    \ndata\n:\n \n{\n\n        \n+\nurl\n:\n \nthe\n \nBranch\n \nlink\n,\n\n        \n...\n \nother\n \ndeep\n \nlink\n \ndata\n\n    \n},\n\n    \ncampaign\n:\n \ncampaign label\n,\n\n    \nfeature\n:\n \nfeature label\n,\n\n    \nchannel\n:\n \nchannel label\n\n    \ntags\n:\n \n[\ntags\n \narray\n],\n\n    \nstage\n:\n \nstage label\n,\n\n\n}\n\n\n\n\n\nSample POST body for \nEvent\n webhooks\n\n\nPOST\n\n\nUser\n-\nagent\n:\n \nBranch\n \nMetrics\n \nAPI\n\n\nContent\n-\nType\n:\n \napplication\n/\njson\n\n\n{\n\n    \nevent\n:\n \nevent name\n\n    \nevent_timestamp\n:\n \ntime stamp for the event\n\n    \nos\n:\n \niOS\n \n|\n \nAndroid\n,\n\n    \nos_version\n:\n \nthe OS version\n,\n\n    \nmetadata\n:\n \n{\n\n        \n ... event metadata  - specified in userCompletedAction withState \n\n        \nip\n:\n \nIP of the user\n,\n\n        \nreferred\n:\n \ntrue\n \n|\n \nfalse\n,\n \n// if event is install / open / web session start\n\n        \nreinstall\n:\n \ntrue\n \n|\n \nfalse\n,\n \nif\n \nevent\n \nis\n \ninstall\n \n/\n \nopen\n\n    \n},\n\n    \nhardware_id\n:\n \nIDFA\n \n(\niOS\n)\n \n|\n \nAndroid ID\n \n(\nAndroid\n),\n\n    \ngoogle_advertising_id\n:\n \nGAID\n \n(\nAndroid\n \nif\n \npresent\n),\n\n\n\n    \n// optionally included:\n\n    \nidentity\n:\n \nuser ID\n,\n \n// specified in setIdentity\n\n\n    \n// the referrer who created the new user\n\n    \nfirst_referring_click_timestamp\n:\n \nthe first click timestamp\n,\n\n    \nfirst_referring_click_query\n:\n \n{\n \nany\n \nquery\n \nparameters\n \nappeneded\n \nto\n \nthe\n \nlink\n \n},\n\n    \nfirst_referring_identity\n:\n \nuser ID who created the referring link\n \n-\n \nspecified\n \nin\n \nsetIdentity\n\n    \nfirst_referring_hardware_id\n:\n \nhardware identifier who created the referring link\n\n    \nfirst_referring_link_data\n:\n \n{\n \nlink\n \ndata\n \ndictionary\n \n-\n \nsee\n \nbelow\n \n}\n\n\n    \n// the referrer who referred this session\n\n    \nsession_referring_click_timestamp\n:\n \nthe session click timestamp\n,\n\n    \nsession_referring_click_query\n:\n \n{\n \nany\n \nquery\n \nparameters\n \nappeneded\n \nto\n \nthe\n \nlink\n \n},\n\n    \nsession_referring_identity\n:\n \nuser ID who created the referring link\n\n    \nsession_referring_hardware_id\n:\n \nhardware identifier who created the referring link\n\n    \nsession_referring_link_data\n:\n \n{\n \nlink\n \ndata\n \ndictionary\n \n-\n \nsee\n \nbelow\n \n}\n\n\n}\n\n\n\n// link data dictionary example\n\n\n{\n\n    \nbranch_id\n:\n \nunique identifier for unique link\n,\n\n    \ndate_ms\n:\n \nlink creation date with millisecond\n,\n\n    \ndate_sec\n:\n \nlink creation date with second\n,\n\n    \ndate\n:\n \nlink creation date\n,\n\n    \ndomain\n:\n \ndomain label\n,\n\n    \ndata\n:\n \n{\n\n        \n+\nurl\n:\n \nthe\n \nBranch\n \nlink\n,\n\n        \n...\n \nother\n \ndeep\n \nlink\n \ndata\n\n    \n},\n\n    \ncampaign\n:\n \ncampaign label\n,\n\n    \nfeature\n:\n \nfeature label\n,\n\n    \nchannel\n:\n \nchannel label\n\n    \ntags\n:\n \n[\ntags\n \narray\n],\n\n    \nstage\n:\n \nstage label\n,\n\n\n}\n\n\n\n\n\nFiltering which webhooks are sent\n\n\nFilters allow you to specify when a webhook gets sent to your URL based off criteria matches. You can configure your filters to use any webhook keyword value by using liquid tags following this convention: \n{{ param.name }}\n.\n\n\n\n\nWildcard Filtering\n\n\nIf you want to filter on just a key being present, you can put a \n*\n in the value box.\n\n\n\n\n\n\nExample: Filtering installs by referring link campaign\n\n\nLet\u2019s say you\u2019re interested in receiving a webhook for every \ninstall\n event that is referred from a Branch link where you set the \nCampaign\n field to \nApp Install Campaign\n. You would configure a filter to fire a webhook only when \n~campaign\n is equal to \nApp Install Campaign\n. The key would equal \nsession.link_data.~campaign\n and the value would equal \nApp Install Campaign\n.\n\n\n\n\n\n\n\n\nExample: Filtering clicks by link channel\n\n\nLet\u2019s say you\u2019re interested in receiving a webhook for every \nclick\n event that is referred from a Branch link where you set the \nChannel\n field to \nAppLovin\n. You would configure a filter to fire a webhook only when \n~channel\n is equal to \nAppLovin\n. The key would equal \nclick.link_data.~channel\n and the value would equal \nAppLovin\n.\n\n\n\n\n\n\n\n\nExample: Filtering custom signup event by location\n\n\nLet\u2019s say you\u2019re interested in receiving a webhook for every \nsign_up\n event that is triggered via the \nuserCompletedAction\n method in the SDKs, but only in a specific market, like Chicago. Your event metadata will look something like the following:\n\n\nevent\n:\n \n{\n\n    \nname\n:\n \nsign_up\n,\n\n    \nmetadata\n:\n \n{\n\n        \ncity\n \n:\n \nChicago\n,\n\n        \nusername\n \n:\n \njohn_smith_1\n,\n\n    \n}\n\n\n}\n\n\n\n\n\nYou would configure a filter to fire a webhook only when \ncity\n is equal to \nChicago\n. The key would equal \nevent.metadata.city\n and the value would equal \nChicago\n.\n\n\n\n\n\n\nTemplating your Postback URL\n\n\nIf you plan on sending click or install data to a third party, you\u2019ll likely need to create one of our templated Postback URLs along side the aforementioned filters. These work very similarly to filters and use the same liquid tags structure: \n{{ param.name }}\n. Once the webhook is eligible, the correct value will be filled in to the slot.\n\n\n\n\nExample: Creating a dynamic conversion postback for an ad agency\n\n\nLet\u2019s say you have created a Branch link in the Ads tab specifically for SEM campaigns and you\u2019re going to give the link to an advertising agency. This ad agency wants to receive install conversion events from Branch by tracking your Branch link with specific query parameters. Your Branch link might potentially look something like this: \nhttp://branch.app.link/my-sf-campaign?clickId=12345\n.\n\n\nNow, you want to report conversions back to the agency or your backend, and you know the structure of the desired Postback URL. For example, lets say you want to send a Postback to \nhttp://myagency.com/tracking?event=install\nclickId=12345\nidfa=\n.\n\n\nWith that information, it\u2019s very easy to setup the correct, dynamic Postback URL using our templates. In this case, you need 3 fields to be dynamically populated:\n\n\n\n\nevent name\n\n\nclickId\n\n\nIDFA value\n\n\n\n\nBranch can easily populate those fields dynamically (and potentially add a lot more as described in the next section) using the following template keys:\n\n\n\n\n{{ event.name }}\n\n\n{{ session.link_click.query.clickId }}\n\n\n{{ device.hardware_id }}\n\n\n\n\nYou can create your dynamic Postback URL by using those above tags in place of where the value should go. So, in keeping with the example, the dynamic Postback URL to give to Branch would be and should be pasted into the webhook creation URL field:\n\n\n\n\nhttp://myagency.com/tracking?event={{ event.name }}\nclickId={{ session.link_click.query.clickId }}\nidfa={{ device.hardware_id }}\n\n\n\n\n\n\nAdditionally, since you don\u2019t want to send them \nevery\n install event, let\u2019s add a \nfilter\n to only send the installs that are referred by links which have a \nclickId\n in the query parameter. In this case, we use a wildcard parameter (\n*\n) for the key \nsession.link_click.query.clickId\n, which tells Branch to only trigger this webhook when an \ninstall\n event was referred by a link with a \nclickId\n.\n\n\n\n\nAnd with that, we\u2019re finished creating our postback!\n\n\n\n\n\n\nKeys available for templating/filtering \nClick\n webhooks\n\n\nWhen a Branch link is opened, triggering a \nclick\n event, you may access:\n\n\n\n\nProperties of the visitor who opened the link.\n\n\nProperties of the link that was opened. \n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclick.query.key\n\n\nAny key that was appended to the link when opened. To retrieve \nvalue1\n from \nhttps://[branchsubdomain]/test?param1=value1\n, you would use \nclick.query.param1\n\n\n\n\n\n\nclick.browser.branch_id\n\n\nThe Branch ID we have for a user's unique broswer\n\n\n\n\n\n\nclick.browser.metadata.userAgent\n\n\nThe user agent of the browser\n\n\n\n\n\n\nclick.device.hardware_id\n\n\nFor iOS, this is the Advertising ID. For Android, this is the Android ID\n\n\n\n\n\n\nclick.device.metadata.google_advertising_id\n\n\nAndroid only. The Google Advertising ID, if known\n\n\n\n\n\n\nclick.device.metadata.os\n\n\nThe OS of the device\n\n\n\n\n\n\nclick.device.metadata.os_version\n\n\nThe OS version\n\n\n\n\n\n\nclick.date\n\n\nTime of link click\n\n\n\n\n\n\n\n\n\n\nclick.device\n will only be available for Universal/App Links without a browser redirect. Similarly, \nclick.browser\n will only be available for non-Universal/App Links. Handle this appropriately in your code.\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclick.link_data.~id\n\n\nID of the link (0 for dynamic and 3P links)\n\n\n\n\n\n\nclick.link_data.~creation_source\n\n\nHow the link was created, e.g. iOS SDK, API, etc.\n\n\n\n\n\n\nclick.link_data.~tags\n\n\nTags of the link\n\n\n\n\n\n\nclick.link_data.~campaign\n\n\nCampaign of the link\n\n\n\n\n\n\nclick.link_data.~channel\n\n\nChannel of the link\n\n\n\n\n\n\nclick.link_data.~feature\n\n\nFeature of the link\n\n\n\n\n\n\nclick.link_data.~stage\n\n\nStage of the link\n\n\n\n\n\n\nclick.link_data.$one_time_use\n\n\nWhether this was a one time use link of not\n\n\n\n\n\n\nclick.link_data.$one_time_use_used\n\n\nWhether this one time use link was used or not\n\n\n\n\n\n\nclick.link_data.$identity_id\n\n\nBranch internal identity of user who generated the link\n\n\n\n\n\n\nclick.link_data.$match_duration\n\n\nLength of time (in milliseconds) that a match could have occured\n\n\n\n\n\n\nclick.link_data.+url\n\n\nThe full URL of the link, e.g. [branchsubdomain]/m/abcde12345\n\n\n\n\n\n\nclick.link_data.key\n\n\nAny key value you specified in the link\u2019s data dictionary\n\n\n\n\n\n\nclick.referring_identity.id\n\n\nID you set for the user who created this link\n\n\n\n\n\n\n\n\nKeys available for templating/filtering \nEvent\n webhooks\n\n\nWhen a user triggers an event inside your app, either one \ncreated by you\n or one tracked by Branch automatically (\ninstall\n, \nopen\n, \nreferred session\n, and \nweb session start\n), you may access:\n\n\n\n\nProperties of the event.\n\n\nIdentity properties of the user who triggered the event.\n\n\nSession properties of the user who triggered the event.\n\n\n\n\n\n\nIdentity vs. Session\n\n\nIdentity properties\n are \nset once\n, the very first time Branch sees a user. Once set for each user, these are never changed. \nSession properties\n are the data of the \nmost recent\n record Branch has for a user.\n\n\nFor an initial \ninstall\n event, identity and session properties will be the same. For \nopen\n events, session properties will be different if the user has subsequently opened another Branch link.\n\n\n\n\nEvent Data\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nevent.name\n\n\nThe name of the event (e.g., \ninstall\n or \nmy_custom_event\n)\n\n\n\n\n\n\nevent.metadata.referred\n\n\nEquals \ntrue\n if user installed app after opening a Branch link\n\n\n\n\n\n\nevent.metadata.ip\n\n\nThe IP address of the user\n\n\n\n\n\n\nevent.metadata.key\n\n\nData defined as \nkey\n when creating a custom event\n\n\n\n\n\n\nevent.date\n\n\nTimestamp of when the event occurred\n\n\n\n\n\n\n\n\nDevice Data\n\n\n\n\nDevice data provides access to the device snapshot. Branch collects this snapshot both when a user is in the browser (via a click on a Branch link) and then after the user opens the app.\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndevice.metadata.os\n\n\nThe OS of the device\n\n\n\n\n\n\ndevice.metadata.os_version\n\n\nThe OS version of the device\n\n\n\n\n\n\ndevice.metadata.ip\n\n\nThe IP address of the device\n\n\n\n\n\n\ndevice.metadata.model\n\n\nThe model of the device\n\n\n\n\n\n\n\n\nIdentity Data\n\n\n\n\nIdentity data is unique for each user Branch tracks. These values are permanently tied to that user, meaning if a link with a campaign of 'google' drives an install, then that user will have a permanent \nidentity.link_data.~campaign\n value equal to 'google'.\n\n\n\n\n\n\nExcept for identity.id, these will not be populated if the user installed your app without opening a Branch link first.\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nidentity.link_data.~id\n\n\nID of the link (0 for dynamic and 3P links)\n\n\n\n\n\n\nidentity.link_data.~creation_source\n\n\nHow the link was created, e.g. iOS SDK, API, etc.\n\n\n\n\n\n\nidentity.link_data.~tags\n\n\nTags of the link\n\n\n\n\n\n\nidentity.link_data.~campaign\n\n\nCampaign of the link\n\n\n\n\n\n\nidentity.link_data.~channel\n\n\nChannel of the link\n\n\n\n\n\n\nidentity.link_data.~feature\n\n\nFeature of the link\n\n\n\n\n\n\nidentity.link_data.~stage\n\n\nStage of the link\n\n\n\n\n\n\nidentity.link_data.$one_time_use\n\n\nWhether this was a one time use link of not\n\n\n\n\n\n\nidentity.link_data.$one_time_use_used\n\n\nWhether this one time use link was used or not\n\n\n\n\n\n\nidentity.link_data.$identity_id\n\n\nBranch internal identity of user who generated the link\n\n\n\n\n\n\nidentity.link_data.$match_duration\n\n\nLength of time (in milliseconds) that a match could have occured\n\n\n\n\n\n\nidentity.link_data.+url\n\n\nThe full URL of the link, e.g. [branchsubdomain]/m/abcde12345\n\n\n\n\n\n\nidentity.link_data.key\n\n\nAny key value you specified in the link\u2019s data dictionary\n\n\n\n\n\n\n\n\nSession Data\n\n\n\n\nSession data refers to the \nmost recent\n record Branch has for each user, regardless of whether it reflects an \ninstall\n or an \nopen\n event. These will not be populated if the session was not initiated by opening a Branch link.\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsession.link_click.query.key\n\n\nAny key that was appended to the link when opened. To retrieve \nvalue1\n from \nhttps://[branchsubdomain]/test?param1=value1\n, you would use \nsession.click.query.param1\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsession.link_data.~id\n\n\nID of the link (0 for dynamic and 3P links)\n\n\n\n\n\n\nsession.link_data.~creation_source\n\n\nHow the link was created, e.g. iOS SDK, API, etc.\n\n\n\n\n\n\nsession.link_data.~tags\n\n\nTags of the link\n\n\n\n\n\n\nsession.link_data.~campaign\n\n\nCampaign of the link\n\n\n\n\n\n\nsession.link_data.~channel\n\n\nChannel of the link\n\n\n\n\n\n\nsession.link_data.~feature\n\n\nFeature of the link\n\n\n\n\n\n\nsession.link_data.~stage\n\n\nStage of the link\n\n\n\n\n\n\nsession.link_data.$one_time_use\n\n\nWhether this was a one time use link of not\n\n\n\n\n\n\nsession.link_data.$one_time_use_used\n\n\nWhether this one time use link was used or not\n\n\n\n\n\n\nsession.link_data.$identity_id\n\n\nBranch internal identity of user who generated the link\n\n\n\n\n\n\nsession.link_data.$match_duration\n\n\nLength of time (in milliseconds) that a match could have occured\n\n\n\n\n\n\nsession.link_data.+url\n\n\nThe full URL of the link, e.g. [branchsubdomain]/m/abcde12345\n\n\n\n\n\n\nsession.link_data.key\n\n\nAny key value you specified in the link\u2019s data dictionary\n\n\n\n\n\n\n\n\nAuthenticating webhook events\n\n\nIf you need to whitelist the webhook server IP addresses for security purposes, they are listed below.\n\n\n\n\n52.9.159.121/32\n\n\n52.9.176.205/32\n\n\n\n\nReserved for future use:\n\n\n\n\n52.9.188.221/32\n\n\n52.9.188.236/32\n\n\n\n\nYou can also \ncreate events through the Branch SDK\n, and specify a secret key inside the event metadata to pass into the URL of the webhook itself.\n\n\nSupport\n\n\nFAQs\n\n\nWhy is my app not sending a device ID?\n\n\nCheck to see if you are in \nTest Mode\n with your SDK. If we are sending a fake ID to simulate installs, we will not send it inside a webhook.\n\n\nWhat is the difference between first referring data and session referring data?\n\n\nBecause webhooks are event based, and tie back to a unique user, we send you data from the link that first drove this unique user into your app. Then, if they click another Branch link later, we also send you session referring data from this second link. For an initial install event, these should be the same. For any subsequent events, session referring data may be different.", 
            "title": "Webhooks"
        }, 
        {
            "location": "/pages/exports/webhooks/#overview", 
            "text": "Branch\u2019s webhook system allows you to receive install and down funnel event data from us as it occurs, for install attribution or conversion funnels in your own database. You simply need to specify a URL for us to send all this data to.  The webhook system is very powerful and customizable. You can register to only receive notifications for specific events, or you can register a wildcard and receive all events. You can specify to only receive an event for the first time a user completes it, or every time. You can also specify to only receive events in the case of referrals.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/exports/webhooks/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/exports/webhooks/#register-webhook", 
            "text": "Open the  Webhooks  page on the Branch dashboard.  Click  + Add A New Webhook :", 
            "title": "Register webhook"
        }, 
        {
            "location": "/pages/exports/webhooks/#configure-webhook-criteria", 
            "text": "Here are explanations of what each field on this screen controls:   Webhook URL:  Enter the URL where you would like the events to be sent.  Postback Method:  Events can be sent either via POST or GET.  Event Frequency:  You can choose to receive a webhook for ever single event occurence, or only for the first time that even is triggered for each unique user.  Event Trigger:  You may select between the following default events:      Event  Description      install  Triggered the first time a user launches your app    open  Triggered whenever the app becomes active    referred session  Triggered in  addition  to install, open or web session start if a user comes from a Branch link    web session start  Triggered when the user views a webpage using the Branch Web SDK    click  Triggered whenever a Branch link is clicked on any platform    -- other --  Enter an event you  created through the Branch SDK , or a wildcard ( * ) to return ever single event tracked through Branch.      Tip  The  referred session  and  web session start  options will only appear after at least one event of that type has been recorded.    Filter (Advanced):  See the  Advanced  page to read about customizing when events are sent.", 
            "title": "Configure webhook criteria"
        }, 
        {
            "location": "/pages/exports/webhooks/#testing", 
            "text": "To test whether your webhook is configured correctly, you can use  requestb.in . RequestBin gives you a URL that accepts events and allows you to see exactly what Branch is sending.    Go to  requestb.in  and click  + Create a RequestBin :     Copy the  Bin URL :     Paste this into the URL field of your Branch webhook's configuration screen:     Now whenever your webhook is triggered, you will see a full report on RequestBin:", 
            "title": "Testing"
        }, 
        {
            "location": "/pages/exports/webhooks/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/exports/webhooks/#sample-webhook-post-body-syntax", 
            "text": "There are two types of events that you can listen for, and each has a different format of webhook POST. The two are:   Click  webhooks: Clicks are the way users interact with your Branch links. Please note that a click does not always have to take place in a browser. For example, clicking a Universal Link will open up the app directly, and therefore no browser metadata information will be present.  Event  webhooks: Events are user events that either Branch generates or you generate via a call to our event tracking API. Examples are shown on the previous page of this guide.", 
            "title": "Sample webhook POST body syntax"
        }, 
        {
            "location": "/pages/exports/webhooks/#sample-post-body-for-click-webhooks", 
            "text": "POST  User - agent :   Branch   Metrics   API  Content - Type :   application / json  { \n     click_id :   a   unique   identififer , \n     event :   click , \n     event_timestamp :   link click timestamp , \n     os :   iOS   |   Android , \n     os_version :   the OS version , \n     metadata :   { \n         ip :   click IP , \n         userAgent :   click UA , \n         browser :   browser , \n         browser_version :   browser version , \n         brand :   phone brand , \n         model :   phone model , \n         os :   browser OS , \n         os_version :   OS version \n     }, \n     query :   {   any   query   parameters   appeneded   to   the   link   }, \n     link_data :   {   link   data   dictionary   -   see   below   }  }  // link data dictionary example  { \n     branch_id :   unique identifier for unique link , \n     date_ms :   link creation date with millisecond , \n     date_sec :   link creation date with second , \n     date :   link creation date , \n     domain :   domain label , \n     data :   { \n         + url :   the   Branch   link , \n         ...   other   deep   link   data \n     }, \n     campaign :   campaign label , \n     feature :   feature label , \n     channel :   channel label \n     tags :   [ tags   array ], \n     stage :   stage label ,  }", 
            "title": "Sample POST body for Click webhooks"
        }, 
        {
            "location": "/pages/exports/webhooks/#sample-post-body-for-event-webhooks", 
            "text": "POST  User - agent :   Branch   Metrics   API  Content - Type :   application / json  { \n     event :   event name \n     event_timestamp :   time stamp for the event \n     os :   iOS   |   Android , \n     os_version :   the OS version , \n     metadata :   { \n          ... event metadata  - specified in userCompletedAction withState  \n         ip :   IP of the user , \n         referred :   true   |   false ,   // if event is install / open / web session start \n         reinstall :   true   |   false ,   if   event   is   install   /   open \n     }, \n     hardware_id :   IDFA   ( iOS )   |   Android ID   ( Android ), \n     google_advertising_id :   GAID   ( Android   if   present ), \n\n\n     // optionally included: \n     identity :   user ID ,   // specified in setIdentity \n\n     // the referrer who created the new user \n     first_referring_click_timestamp :   the first click timestamp , \n     first_referring_click_query :   {   any   query   parameters   appeneded   to   the   link   }, \n     first_referring_identity :   user ID who created the referring link   -   specified   in   setIdentity \n     first_referring_hardware_id :   hardware identifier who created the referring link \n     first_referring_link_data :   {   link   data   dictionary   -   see   below   } \n\n     // the referrer who referred this session \n     session_referring_click_timestamp :   the session click timestamp , \n     session_referring_click_query :   {   any   query   parameters   appeneded   to   the   link   }, \n     session_referring_identity :   user ID who created the referring link \n     session_referring_hardware_id :   hardware identifier who created the referring link \n     session_referring_link_data :   {   link   data   dictionary   -   see   below   }  }  // link data dictionary example  { \n     branch_id :   unique identifier for unique link , \n     date_ms :   link creation date with millisecond , \n     date_sec :   link creation date with second , \n     date :   link creation date , \n     domain :   domain label , \n     data :   { \n         + url :   the   Branch   link , \n         ...   other   deep   link   data \n     }, \n     campaign :   campaign label , \n     feature :   feature label , \n     channel :   channel label \n     tags :   [ tags   array ], \n     stage :   stage label ,  }", 
            "title": "Sample POST body for Event webhooks"
        }, 
        {
            "location": "/pages/exports/webhooks/#filtering-which-webhooks-are-sent", 
            "text": "Filters allow you to specify when a webhook gets sent to your URL based off criteria matches. You can configure your filters to use any webhook keyword value by using liquid tags following this convention:  {{ param.name }} .   Wildcard Filtering  If you want to filter on just a key being present, you can put a  *  in the value box.    Example: Filtering installs by referring link campaign  Let\u2019s say you\u2019re interested in receiving a webhook for every  install  event that is referred from a Branch link where you set the  Campaign  field to  App Install Campaign . You would configure a filter to fire a webhook only when  ~campaign  is equal to  App Install Campaign . The key would equal  session.link_data.~campaign  and the value would equal  App Install Campaign .     Example: Filtering clicks by link channel  Let\u2019s say you\u2019re interested in receiving a webhook for every  click  event that is referred from a Branch link where you set the  Channel  field to  AppLovin . You would configure a filter to fire a webhook only when  ~channel  is equal to  AppLovin . The key would equal  click.link_data.~channel  and the value would equal  AppLovin .     Example: Filtering custom signup event by location  Let\u2019s say you\u2019re interested in receiving a webhook for every  sign_up  event that is triggered via the  userCompletedAction  method in the SDKs, but only in a specific market, like Chicago. Your event metadata will look something like the following:  event :   { \n     name :   sign_up , \n     metadata :   { \n         city   :   Chicago , \n         username   :   john_smith_1 , \n     }  }   You would configure a filter to fire a webhook only when  city  is equal to  Chicago . The key would equal  event.metadata.city  and the value would equal  Chicago .", 
            "title": "Filtering which webhooks are sent"
        }, 
        {
            "location": "/pages/exports/webhooks/#templating-your-postback-url", 
            "text": "If you plan on sending click or install data to a third party, you\u2019ll likely need to create one of our templated Postback URLs along side the aforementioned filters. These work very similarly to filters and use the same liquid tags structure:  {{ param.name }} . Once the webhook is eligible, the correct value will be filled in to the slot.   Example: Creating a dynamic conversion postback for an ad agency  Let\u2019s say you have created a Branch link in the Ads tab specifically for SEM campaigns and you\u2019re going to give the link to an advertising agency. This ad agency wants to receive install conversion events from Branch by tracking your Branch link with specific query parameters. Your Branch link might potentially look something like this:  http://branch.app.link/my-sf-campaign?clickId=12345 .  Now, you want to report conversions back to the agency or your backend, and you know the structure of the desired Postback URL. For example, lets say you want to send a Postback to  http://myagency.com/tracking?event=install clickId=12345 idfa= .  With that information, it\u2019s very easy to setup the correct, dynamic Postback URL using our templates. In this case, you need 3 fields to be dynamically populated:   event name  clickId  IDFA value   Branch can easily populate those fields dynamically (and potentially add a lot more as described in the next section) using the following template keys:   {{ event.name }}  {{ session.link_click.query.clickId }}  {{ device.hardware_id }}   You can create your dynamic Postback URL by using those above tags in place of where the value should go. So, in keeping with the example, the dynamic Postback URL to give to Branch would be and should be pasted into the webhook creation URL field:   http://myagency.com/tracking?event={{ event.name }} clickId={{ session.link_click.query.clickId }} idfa={{ device.hardware_id }}    Additionally, since you don\u2019t want to send them  every  install event, let\u2019s add a  filter  to only send the installs that are referred by links which have a  clickId  in the query parameter. In this case, we use a wildcard parameter ( * ) for the key  session.link_click.query.clickId , which tells Branch to only trigger this webhook when an  install  event was referred by a link with a  clickId .   And with that, we\u2019re finished creating our postback!", 
            "title": "Templating your Postback URL"
        }, 
        {
            "location": "/pages/exports/webhooks/#keys-available-for-templatingfiltering-click-webhooks", 
            "text": "When a Branch link is opened, triggering a  click  event, you may access:   Properties of the visitor who opened the link.  Properties of the link that was opened.       Key  Description      click.query.key  Any key that was appended to the link when opened. To retrieve  value1  from  https://[branchsubdomain]/test?param1=value1 , you would use  click.query.param1    click.browser.branch_id  The Branch ID we have for a user's unique broswer    click.browser.metadata.userAgent  The user agent of the browser    click.device.hardware_id  For iOS, this is the Advertising ID. For Android, this is the Android ID    click.device.metadata.google_advertising_id  Android only. The Google Advertising ID, if known    click.device.metadata.os  The OS of the device    click.device.metadata.os_version  The OS version    click.date  Time of link click      click.device  will only be available for Universal/App Links without a browser redirect. Similarly,  click.browser  will only be available for non-Universal/App Links. Handle this appropriately in your code.      Key  Description      click.link_data.~id  ID of the link (0 for dynamic and 3P links)    click.link_data.~creation_source  How the link was created, e.g. iOS SDK, API, etc.    click.link_data.~tags  Tags of the link    click.link_data.~campaign  Campaign of the link    click.link_data.~channel  Channel of the link    click.link_data.~feature  Feature of the link    click.link_data.~stage  Stage of the link    click.link_data.$one_time_use  Whether this was a one time use link of not    click.link_data.$one_time_use_used  Whether this one time use link was used or not    click.link_data.$identity_id  Branch internal identity of user who generated the link    click.link_data.$match_duration  Length of time (in milliseconds) that a match could have occured    click.link_data.+url  The full URL of the link, e.g. [branchsubdomain]/m/abcde12345    click.link_data.key  Any key value you specified in the link\u2019s data dictionary    click.referring_identity.id  ID you set for the user who created this link", 
            "title": "Keys available for templating/filtering Click webhooks"
        }, 
        {
            "location": "/pages/exports/webhooks/#keys-available-for-templatingfiltering-event-webhooks", 
            "text": "When a user triggers an event inside your app, either one  created by you  or one tracked by Branch automatically ( install ,  open ,  referred session , and  web session start ), you may access:   Properties of the event.  Identity properties of the user who triggered the event.  Session properties of the user who triggered the event.    Identity vs. Session  Identity properties  are  set once , the very first time Branch sees a user. Once set for each user, these are never changed.  Session properties  are the data of the  most recent  record Branch has for a user.  For an initial  install  event, identity and session properties will be the same. For  open  events, session properties will be different if the user has subsequently opened another Branch link.   Event Data     Key  Description      event.name  The name of the event (e.g.,  install  or  my_custom_event )    event.metadata.referred  Equals  true  if user installed app after opening a Branch link    event.metadata.ip  The IP address of the user    event.metadata.key  Data defined as  key  when creating a custom event    event.date  Timestamp of when the event occurred     Device Data   Device data provides access to the device snapshot. Branch collects this snapshot both when a user is in the browser (via a click on a Branch link) and then after the user opens the app.      Key  Description      device.metadata.os  The OS of the device    device.metadata.os_version  The OS version of the device    device.metadata.ip  The IP address of the device    device.metadata.model  The model of the device     Identity Data   Identity data is unique for each user Branch tracks. These values are permanently tied to that user, meaning if a link with a campaign of 'google' drives an install, then that user will have a permanent  identity.link_data.~campaign  value equal to 'google'.    Except for identity.id, these will not be populated if the user installed your app without opening a Branch link first.      Key  Description      identity.link_data.~id  ID of the link (0 for dynamic and 3P links)    identity.link_data.~creation_source  How the link was created, e.g. iOS SDK, API, etc.    identity.link_data.~tags  Tags of the link    identity.link_data.~campaign  Campaign of the link    identity.link_data.~channel  Channel of the link    identity.link_data.~feature  Feature of the link    identity.link_data.~stage  Stage of the link    identity.link_data.$one_time_use  Whether this was a one time use link of not    identity.link_data.$one_time_use_used  Whether this one time use link was used or not    identity.link_data.$identity_id  Branch internal identity of user who generated the link    identity.link_data.$match_duration  Length of time (in milliseconds) that a match could have occured    identity.link_data.+url  The full URL of the link, e.g. [branchsubdomain]/m/abcde12345    identity.link_data.key  Any key value you specified in the link\u2019s data dictionary     Session Data   Session data refers to the  most recent  record Branch has for each user, regardless of whether it reflects an  install  or an  open  event. These will not be populated if the session was not initiated by opening a Branch link.      Key  Description      session.link_click.query.key  Any key that was appended to the link when opened. To retrieve  value1  from  https://[branchsubdomain]/test?param1=value1 , you would use  session.click.query.param1 .        Key  Description      session.link_data.~id  ID of the link (0 for dynamic and 3P links)    session.link_data.~creation_source  How the link was created, e.g. iOS SDK, API, etc.    session.link_data.~tags  Tags of the link    session.link_data.~campaign  Campaign of the link    session.link_data.~channel  Channel of the link    session.link_data.~feature  Feature of the link    session.link_data.~stage  Stage of the link    session.link_data.$one_time_use  Whether this was a one time use link of not    session.link_data.$one_time_use_used  Whether this one time use link was used or not    session.link_data.$identity_id  Branch internal identity of user who generated the link    session.link_data.$match_duration  Length of time (in milliseconds) that a match could have occured    session.link_data.+url  The full URL of the link, e.g. [branchsubdomain]/m/abcde12345    session.link_data.key  Any key value you specified in the link\u2019s data dictionary", 
            "title": "Keys available for templating/filtering Event webhooks"
        }, 
        {
            "location": "/pages/exports/webhooks/#authenticating-webhook-events", 
            "text": "If you need to whitelist the webhook server IP addresses for security purposes, they are listed below.   52.9.159.121/32  52.9.176.205/32   Reserved for future use:   52.9.188.221/32  52.9.188.236/32   You can also  create events through the Branch SDK , and specify a secret key inside the event metadata to pass into the URL of the webhook itself.", 
            "title": "Authenticating webhook events"
        }, 
        {
            "location": "/pages/exports/webhooks/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/exports/webhooks/#faqs", 
            "text": "", 
            "title": "FAQs"
        }, 
        {
            "location": "/pages/exports/webhooks/#why-is-my-app-not-sending-a-device-id", 
            "text": "Check to see if you are in  Test Mode  with your SDK. If we are sending a fake ID to simulate installs, we will not send it inside a webhook.", 
            "title": "Why is my app not sending a device ID?"
        }, 
        {
            "location": "/pages/exports/webhooks/#what-is-the-difference-between-first-referring-data-and-session-referring-data", 
            "text": "Because webhooks are event based, and tie back to a unique user, we send you data from the link that first drove this unique user into your app. Then, if they click another Branch link later, we also send you session referring data from this second link. For an initial install event, these should be the same. For any subsequent events, session referring data may be different.", 
            "title": "What is the difference between first referring data and session referring data?"
        }, 
        {
            "location": "/pages/integrations/abobe-analytics/", 
            "text": "", 
            "title": "Abobe Analytics"
        }, 
        {
            "location": "/pages/integrations/adjust/", 
            "text": "", 
            "title": "Adjust"
        }, 
        {
            "location": "/pages/integrations/amplitude/", 
            "text": "", 
            "title": "Amplitude"
        }, 
        {
            "location": "/pages/integrations/appboy/", 
            "text": "", 
            "title": "AppBoy"
        }, 
        {
            "location": "/pages/integrations/google-analytics/", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/pages/integrations/kochava/", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/pages/integrations/localytics/", 
            "text": "", 
            "title": "Localytics"
        }, 
        {
            "location": "/pages/integrations/mixpanel/", 
            "text": "", 
            "title": "Mixpanel"
        }, 
        {
            "location": "/pages/integrations/tune/", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/pages/integrations/appmetrica/", 
            "text": "", 
            "title": "AppMetrica"
        }
    ]
}